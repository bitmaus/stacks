%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Pluga7sas7070505500.eps
%%Creator: Adobe Illustrator(R) 19.0
%%For: Марина
%%CreationDate: 6/8/2019
%%BoundingBox: 0 0 2617 2305
%%HiResBoundingBox: 0 0 2616.4102 2304.2771
%%CropBox: 0 0 2616.4102 2304.2771
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.0.1 x52 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=0 RasterRes=72 GradRes=72 Text=0 Stroke=0 Clip=0 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-repair">Socket and plug. Vector drawing</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:headline>
            <rdf:Alt>
               <rdf:li>2 ac portable plastic wattage hardware set on white wall backdrop. Black outline hand drawn network rosette app off logo pictogram in modern art doodle style pen on paper space for text. Close up view</rdf:li>
            </rdf:Alt>
         </dc:headline>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-repair">2 ac portable plastic wattage hardware set on white wall backdrop. Black outline hand drawn network rosette app off logo pictogram in modern art doodle style pen on paper space for text. Close up view</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>appliance</rdf:li>
               <rdf:li>background</rdf:li>
               <rdf:li>cable</rdf:li>
               <rdf:li>cartoon</rdf:li>
               <rdf:li>circuit</rdf:li>
               <rdf:li>communications</rdf:li>
               <rdf:li>connect</rdf:li>
               <rdf:li>connector</rdf:li>
               <rdf:li>consumption</rdf:li>
               <rdf:li>cord</rdf:li>
               <rdf:li>current</rdf:li>
               <rdf:li>danger</rdf:li>
               <rdf:li>device</rdf:li>
               <rdf:li>drawing</rdf:li>
               <rdf:li>electric</rdf:li>
               <rdf:li>electricity</rdf:li>
               <rdf:li>electronic</rdf:li>
               <rdf:li>element</rdf:li>
               <rdf:li>energy</rdf:li>
               <rdf:li>equipment</rdf:li>
               <rdf:li>extension</rdf:li>
               <rdf:li>gadget</rdf:li>
               <rdf:li>graphic</rdf:li>
               <rdf:li>house</rdf:li>
               <rdf:li>household</rdf:li>
               <rdf:li>icon</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>industrial</rdf:li>
               <rdf:li>input</rdf:li>
               <rdf:li>insert</rdf:li>
               <rdf:li>isolated</rdf:li>
               <rdf:li>line</rdf:li>
               <rdf:li>outlet</rdf:li>
               <rdf:li>pin</rdf:li>
               <rdf:li>plug</rdf:li>
               <rdf:li>power</rdf:li>
               <rdf:li>sign</rdf:li>
               <rdf:li>sketch</rdf:li>
               <rdf:li>socket</rdf:li>
               <rdf:li>supply</rdf:li>
               <rdf:li>switch</rdf:li>
               <rdf:li>symbol</rdf:li>
               <rdf:li>tech</rdf:li>
               <rdf:li>technology</rdf:li>
               <rdf:li>tool</rdf:li>
               <rdf:li>unplug</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>volt</rdf:li>
               <rdf:li>voltage</rdf:li>
               <rdf:li>wire</rdf:li>
               <rdf:li>supply</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <xmp:MetadataDate>2019-05-18T09:11:40+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2019-06-08T23:06:01.011+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2019-05-18T09:11:39+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>228</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA5AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A72q5kMVVVwKqKuBVRVxV&#xA;eFwJXhcCrwuKrgMVXAYFXAYqupirdMVdTArdMVdTFW6Yq6mKtUxV1MVaphVojFWiMVWkYq0Riq0r&#xA;hVYVxVYVwqsK4qpsuFCmy4qpsuFVJlwqrKuBVVVwKqKuBKoBiq8LgVeBiq8DAq4DFVwGKtgYFbAx&#xA;VdTFXUxVumKupilumKupihqmKXUxQ1TFWqYq0RirRGFVpGKrSMVWkYVWEYqsK4qpsuFVNlwoU2XF&#xA;VJlwqrKuBVRRiqoowJVAMCrwMVXgYFXgYquAxVsDAq4DFW6YpbpirdMVdTArdMVdTFXUxV1MVapi&#xA;rqYVapirRGKFpGKtEYqtIwqtIxVYRiqwjCqwjFVNhhVTZcKFJlwqqqMCqqjAlUUYFXqMVXgYFXgY&#xA;quAxVcBgVcBirYGKW6YFbpirdMVdTFW6Yq6mKupirqYq1TFXUxVqmKtUwq0Riq0jFC0jFVpGFVpG&#xA;KrCMVWEYVU2GFVNhiqkwwoVVGBKqowKvUYqqAYFXgYquAwKuAxVcBiq4DFLdMCt0xVumKt0xV2Ku&#xA;pirdMVdTFWqYq6mKtUxV1MVaIxVojFVpGFWiMULCMVWkYVWEYqsIwqsYYqpsMKqTDChVUYEqijAq&#xA;oBgVeBiq8DFVwGBVwGKVwGBVwGKt0xVumKt0xV1MVbxV1MCupirqYq7FWsKupirWKtUxVqmKtEYq&#xA;tIwqtIxQtIxVaRhVYRiqmwwqpsMVU2GFVRRgVUUYqqAYFXgYqvAwKuAxSuAwKuAxVsDFW8Vbpire&#xA;BXUxVvFXYVdirsVdirsCtUxVrCrqYq0Riq0jFWiMVWkYVWkYoWEYqtIwqpkYqsYYVUmGFVRRgVUA&#xA;wKvAxVeBgVeBiq4DFK4YFbZlRC7kKqglmJoAB1JOKsdXzzp15cyWmg21xrs0J4zS2aqLWNvBruVo&#xA;4CR3WNmYfy4aRbHPM35lppTyw33mry15duohxltJmk1S4V9qhoo5rB1p/qnCAglgU/59eUSxiuvz&#xA;OullQgNLpeiRxxN48RdQ3pp/sslwnuRxJDqH5+eVEim+r+a/OP1eFykGoLBpjfWOm6pJaxL47FkO&#xA;2HgRxIPTf+ciNZi5vY+fra5jQr6Nr5m0eWCRgR9kzaSLgGnQluOPB5LxPTfJ/wCf13qsK/XNGg1F&#xA;gaM/l6/t72U0/a+oTNb3gH+qj5AxZCSPtv8AnJL8vLzUv0XYRahdanyEZsRbrBN6h2KBLmSAs4Ox&#xA;VanHgK8QT5vzPnrIYfJ+vXUcL+nPJbJp83Bx9pWSO8aTkO441wcKbda/mzpDMBf6JrukhjxVr3TL&#xA;gcjt9kQiYt9rsMeFbZRpWv6Jq6sdNvYbpo6etHG49SMntJGfjjb2YA4KSj6YFdhV2BWsKtHFWjiq&#xA;04q0Riq0jCqwjFCwjCqxhiqxhhVSYYqqKMVVFGBV4GKrwMCrhileMCpNr/mux0iWGyRHv9bvATYa&#xA;Rb0M8tNi5qQscSn7UrkKPGtASAi3k/mr8wl/T7aLJbSed/OS/FbeU9Kr+iLFwdjeTN/fPGRVmlFA&#xA;eiRnfJAMSU0sPy0/NbzTcRal57833WjwrzMPl7y5J9UWNJSCYprqOhloFUbhqdm3OPEByTRZDpv5&#xA;CflDpvKY+Xbe6lJMk1zqDSXjO3Vnc3DSCpO52yPGV4QxfWfzR8i6RdPof5Z+VIvNGvRUQw6NaxpZ&#xA;W+9Ky3MScKDb7O3iy5IRPVb7mEebNW/M6WA3/wCZfny38maZIzKnl7QG9TUGZa8oh6BZt6cavMyg&#xA;9fciugYm+qM8seSfJc9tO/lf8qtR8wevHE0OteZJktUlMu8pZbhgR6dRRoYjzNegAYpJ70geSWap&#xA;/wA4neZNRuF1XTU0ny1dpWVNMjnub+2MgYsgPrw/B2DD41PYAbY+IjgQEHlHSfzGFz5G80WQ8r/m&#xA;zoqFbC6LzSpfxohekpb1P3YUAqRIaA1j+AcMN1v0WrRP5S/k9e+aNO1C1v8AznrejeZdCuZNP1fS&#xA;YpmpEORMZT46mKRRsehINNsZSpQHpX/Ks/zx8vQXJ8rfmCuqm4Jc22vW/Mq1CAUmrOQehpxALbnq&#xA;cjYPRlRSy8/Mm70+C3sPzo8pXGnXkThLXzTpnxWtaE80uYZFmt5KV+CNyzbgL+zjw9yL72U3Hm3z&#xA;F5Lih1TULl/NHkG4BLawsQGoacK0H1lIwouIhSjPwWRTUNU0rGrTdPRtO1Gw1Owt9Q0+dLqyuo1l&#xA;triIhkdHFVZSPHIskRirsVawq0cVWnFWiMVWnCqwjFC0jFVhGFVNhiqmwwqvXFVRRgVeMVXjAq8Y&#xA;pYr5u84XFlf23lrQI47vzZqUbS28MlfRtbZTxe9uyN1iQ7KvV2+EdyCAgl5Tp9tqvm7zTdeX/JGq&#xA;zLoaMD568/KR9d1CapX6paSlAEVApCej8Cg7f5cuXNi9q8peS/LHlLTRp3l/T47G32MpQVklYfty&#xA;yNV5G92OQJtkAr+Z/M+h+V9Dutb1u6W0060XlJI3Un9lEXqzsdlUdcAFqS+bvMHmzV/zMtk17zfr&#xA;J8kflG8zw2lqjH65qRiDFloiuX+wexQHZQzb5aBXLmwu/cmPlfyt5/8AO+iQaP5Rh/5V/wDliPsz&#xA;K0jXt9+8LGaMt6czCVePxPxUjxG2AkDnzSBb1/yH+TPkHyUgk0zTxc6oTyl1i+pPeM3ciRh8FfBA&#xA;oyBkSyApnGRS7FXk3/OQvkeTUfK7ecNELWnmzyshvLS9t2eGZ7WOrXEDSRFX4+nyYUPXYfaOTgej&#xA;GQef/l/q2qad+Y/lLzTKrLp3mm1j0HU3eQSu0zWUN/p7TSUT1JfSnihL8QTwY9TQyPJA5vpqmVM1&#xA;G7s7S8tpbW7hjubWZSk0Eyh43U9VZWBBB8DiryLVbe9/KHVbS40qL1/yx1W5WDVNOlYt+iZ7hgiz&#xA;wu5bjbyM1HRvhU9COWT5+9jyR/k27j8pfmDc+UgyR+XfM8b6z5Vt1BX6tIFDXdrxKqFDms0aLsoD&#xA;YncWo5vU8gyaxV2KrcKtYq0cVWnFVpwqsOKFhwqpsMVU2wqvXAqouKrxgVeMVSfzn5psvKvlbUvM&#xA;F4C8VhCXSEfallYhIol/ypJGVB88QLUl4jqNtrhjg8iWjs/5k/mDGt7521Y9dOsCAXhAoV9NIi0M&#xA;ahvHoWXJ+fRi918p+VdF8q6BaaFo0At7CzTig/adju0jn9p3O7HIE2yATjAl8y+YNU/5Wt+Yl5qF&#xA;zctD+XHkCX61dSAMYp47fkZpBxFXadomRGVvgjUn7R3sGw82HMsn8geSLb8ytWt/zC8zWJj8t2wM&#xA;Xk3yzNT0I7eNyFuJYF/dDkFUKgFCBU8hxwE1soFvdgABQbAZWzdirdMVdiqhf2dve2NxZ3Irb3MT&#xA;wzDxSRSrfgcVfIlhf6jD+S3k3UApd384adNZ3I+zEtlZRWigGteReEin+t4Zd1a+j7CylsdiqD1j&#xA;SLDWNKvNK1GIT2N9C9vcxH9qORSrD7jiCr5688atr5/KPQfNUzSXOv8A5e629vezI0UMTNYXZsy8&#xA;yyfvHMsaoCsZG7muwplo5+9geT6LtbmG6tobmFuUM6LJE3irjkp+45UzVcVawq0cCtHCq04qtOKr&#xA;ThVacULDhVTbFVNsKr1wKqDFV4wKuGKXk35pao+qfmd5H8lgL9QhlbzFrRc8UENjyMBkJ24eojE1&#xA;2J45KPK2J5on8liPMureZ/zKlBZdduzYaGWr8Gl2B9JClfs+rKGZ1H7QrjLbZR3vVhkGTBvzy80X&#xA;Hln8qvMOq2rlLv6uLa2dTRlkupFtw6+6epy+jDEWUSOz51ltbObRfy//ACw0Ka5tIvM1zFqWvNyK&#xA;NLbXYVo0etHIW1o9AfTLnapX4be8sPJ9hWttb2ttFbW0aw28CLHDCgCoiIOKqoGwAAoMobFXFWxi&#xA;rsVdirFfzU19fL/5ceY9X5+nJb2E4gatP30qmKHf/jI64YjdB5PmrUNBca5+UH5Vxwr9b04Ratqz&#xA;c39RHvJPrlxE8dEVTHHG+9SaU+z3tvmWHcH1/lLY7FXYq+dvN1+I/wAnPOEkqqg1XzZqKadLJEsq&#xA;LEl8zTSojqRvDbTk1713GWDmwPJ7f5Kt5LbyboNvL/ew6daRv1+0sCA9d+2QLIJzgS0cVaOKtHCr&#xA;RxVacVWnCqw4oWHFVjYVU2wquXAqoMVXjAq8YpfJ/wCYXmO5n88/nDqEdwkIstFh0W3d6MRHNPbw&#xA;zQoD/v3978ia5YBsGs9X0f8Alno8Oj/l75c02EALb6dbB6dDI0QeRv8AZOxOVy5sxyZOMCXnf/OQ&#xA;mhSa1+T3mS2iBMtvbrepTwtJFnf/AISNslA7sZcnh8t2I9D/ACv/ADl0+z5QaKI9I80RwBT6UNs5&#xA;tEcRj7NYy4BPjHXJ94Y+b6wsb20v7OC9s5VntblFlgmQ1VkYVUj6MpbFfFW8VdirsVeH/mn5y0zW&#xA;/NyaG3pzeV/Jf+5jzVNJMkFvLexqxsNPaVqglpRydKNXpSqnLIjZiSkP/ONWiap5s83eYvzc15WM&#xA;19LJaaQJKGimgkZSFSoijVIVYKK/FhmaFIj3vo7KmbsVS/X9WXStJnvOIlnAEdpb1oZriUhIIQfG&#xA;SRlX6cIV80/mtotxqOveRPydsYjdTQmM6zqLMjyOp4yzzrGrOYFIeSRieLN0+yBWyJ5lrPc+pQqq&#xA;oVQFUCgA2AAypsdirjirWKtYVWnFVpxVacVWnCqw4oWNhVTbFVy4qvGKrxgVeMVfGH5gWGnjzj+b&#xA;ljPb3El9I9vdWUcTgJHWdHaeQMRUfvlQbE0kPTLR0az1fWX5d60mueRPL+rKwY3mn20klO0npKJF&#xA;/wBi4IyqQ3bAyMYErZoYZ4ZIJkEkMqlJI2FVZWFCCPAjFXzHYyN+S3nCbyN5ljW5/K3zTPcSW13K&#xA;vNESeMRPHNUEkx8Y1eh+yS9Dy+Gz6hfVr5Mx0zQfNX5VxtqXk2WXzh+Xl3xnfRg4lu7RXAPq2ki1&#xA;EqMpBpTwr3kAu+fNlyek+R/zK8nedbP19Bv1lmQVubCX91dwHuJYW+IUO3IVU9iciYkJBtlGRS7F&#xA;WAfmB591ODUI/JfkyNL7ztqEfLk29vptu2xvLs0IFK/AnVjTboGkB1KCXisumyeYLlvyV8hutzpk&#xA;cy3fnvzkSzzTzcx9YLFlADmQFQoZ+Wy8qB8n5lh5PprQNC0vQNFstG0qAW+n2ESwW0Q7Ko6k92J3&#xA;Ynqd8rJbEfgVpmVVLMQqqKknYADFXkGp+ftL1LWLvzjdzzQ+SvJau1jIqqI7/UpogiuA9GkBjnAt&#xA;+Gx5cy1CuTroxtB/848+UNcu5tT/ADS82/vPMXmgL9RDqFaGwAXhRRQL6gRKCn2FX+Y4zPQLEdXt&#xA;hyDJrFXYq1hVrAq3Cq04qtOKrThVYcULGwqpthVcuBV4xVeMCrxir5Z/5yO8sWVj+bejazqRli8u&#xA;eZIYbbV3gLKzm0lX1YzxBqXhEYSv7W/7OWQOzCQ3Z3/zjbr9xpkOpflnq4eHVNAZ7ixjlKlmtZJC&#xA;JkqpIb0bksOXRgwK7ZGY6pj3PcRkGbYwKlPmnyl5d81aPLo+v2Ud9YTbmOTYqw2DxuKMjiuzKQcI&#xA;NIIeNL+Tv5p/l1fLqH5Za4NX0eIuzeV9XagYSABlSQFEJ+BaGsdKd96z4gebGiOTFdW8/eSNSvtM&#xA;svzW8t6j5S85xyPHJ5osw1pOnEARXCzQqvqKRs3wsqmhUUJ4yo9EX3vSfInns3sFtb+X/P2l+aRK&#xA;itBputKLPVAvTg80JqWHQ8rUnvU1yBHkyBRD/mR548z6heeV/KWkxWuo2sgg1TzR663ml2fT1PRb&#xA;hEbmdRsI+K0b7W1ceEDmtvJbie8Ov3n5Uflje3Q1+8vJZfNnnG8nSOacg0kq3H1T6daD023+L4SS&#xA;SJ+ZY+QfRP5c/l5oHkLy1BomkJWnx3l4wAluZyPilkI/AfsjbKpG2YFMowJaZlVSzEKqipJ2AAxV&#xA;435+852XmjTrxH1L9DfljZyehrXmEGkuqSbg2On1BBhJHGSX9r7K7cjkwK97El5/5D8ual+dHmO0&#xA;1a/04aL+WOgNxtNIjZ2jvp0YsxZ2CtLVt5Xb/VHxFiJE8PvYgW+pFVVUKoCqooANgAMqbGzirWKu&#xA;xVrCrWBVuFWjiqw4qtOFVhxQsbCqm2FW1wKqDFV4wKvGKWHfm5+Xdt5+8k3mhsVjvlpc6XcN0juo&#xA;weBJ/lYEo3scMTRQRb5S0VfNEWoTazpZ/R35heUJZGvNFUcFe2toma9u5mduNHAEboDvtw4rQZaW&#xA;t9aflb+ZWjfmB5Yi1expBdxn0tS05mDSW046q3QlW6o1Nx71ApkKbAbZiMilvCreBWEeavOnka7j&#xA;l0VrIecLs7S6JYW6aiQTt+/J/wBHg+czrkgCgl4H5o8qfkxpF9D5i836bYaXax3DQnyp5fvfrt2Z&#xA;BXa/PrxogUrQpbx7Hq5ywE9GBAWatN+e/wCZPk8W/k/y4mgeSIAq2en2xisjcopJDRmVkZlod+JC&#xA;n3OOwO67ljGiefvMv5d21v5d81eS/Q8v/XVubyyvLUuJ14ukvFrkMGchoyrI4oYx/M1SRaLp6r5b&#xA;/Mr8uNYmj/QHnTUvKN76syC3nuDdaaFUgxM8OpB1jWVWoBGUCtVa/ZLQMSyBD0lPNXnjSNHOsX8e&#xA;l+Z/L8cJuDrGlzrYymBRyMhgune2Ycd6i6Ue2RoMrfO/5q/85E+aNdvxptxpNzofleglbSrj1be4&#xA;1CMb8LiZVJWNx+wgoRsWOWRgwMk88l+Q/M35rCHzX591CTR/y2sQjadonrrDA8dupRSqIIYYYwKq&#xA;ZOCsRsKfaxJrlzUC30J5Z86flrcwR6X5b1vSpIbRRFDZWdxB8CKKALGjfZ8KCmVEFmCGUYEuOKpf&#xA;rWvaJodg+oazfwadZR/auLmRYkr2ALEVJ7AbnDSvL7n/AJyo/KKPUGs4L24ukT7V5HDwhqOwM7RO&#xA;30LkvDLHiCPtf+ck/wAnpx8etPB4mS1uWQfDyIMkcckW3+tjwFeIMp0j8y/y91hQdM8yabcsf91r&#xA;dRCQfONmDj6Rg4SmwyOoIqNwemBK04qtOKrThVYcULGwqptira4qqDFV4wKvGKWF+ePzV0fyrrOn&#xA;aAtjd6x5g1RJJrXS7BYzJ6MSszyu0rxqFpG3fscIjaCXjX5y+WL7z1cxa15d8n+YdF83rH6Ms00F&#xA;rHbXcNRG0czx3L0ZQ9AxWhX4W2pxnE0wItR8neRvzdstRm8zJpGp6N53aSWW7uImsJ9O1JZ5mlMd&#xA;1BLd2vp0L8aozfCAVAYbpIUAvboPMH5nXOnW7HRNH02+YcLg3mqO6LMqszrGlvbycuPAkgyAgV60&#xA;rldBnuknmjznqehQq3mzz3o3l1KAmHTLRrm8cMnLkouJLjbYlf8ARz88IHkgl5xrH51flCL+K2iX&#xA;XPzIu5l/drdPKLZpP99mxZLa3Ne5Fsclwn3I4gidJtv+cmPOl8JbGCL8vvLJQJDZMDCUUDqkQH1j&#xA;n9Ea4+kea7ln3kz/AJx08l6LqJ1zXpZ/NvmWRhJLqmqn1F9QftpCxcV2FDIXI7EZEzKRF6sAAKDY&#xA;DIMmEec/zd/K7y5BLBrutWkklCsmmxEXc7duLQR8yK/5QAyQiSgkPnXzhDo35o22q3PkH8ubawi0&#xA;+Fp5teuGNnK4FaiC1tXSKSYkftF/8oAkZYNuZYHd5PYQecYtfn8s+XJp9WeVxDJZWh+sxzokqzFG&#xA;MLOjxeqKsQ3HuaZPZi921n81/wAzPLFnd2P5seUI7+yngAtTNClxYPLwupAplUyoHeSWBCOR4oh2&#xA;rvlYiDyZWerHPLvl7yH+Yn5r2+laHF+jfJVjbxajrtpFPN9WuJVWLYGZjTncTiGg4/CpIHI1wkkB&#xA;RuXo/wCYX/ONdr5i16S80OXToI5riC3mt1t0gTT7OOFQ4RIT++mag48gtAx/yWWInSTF5R5F/K/z&#xA;T5j/ADA1HSNBTVvKOj6YkfrySXEkdxAJRyjNwo9Ok0yMZPTRAB9nYEtkzLZiA9t88fk35zj0myi8&#xA;i+bNdTVBMkc0+oazdNAkQHxO0dSD06Kvf7PhASHVmQi9G/5xz0Ka6j1Xz9q17521lejX8rraR71p&#xA;Hbqx29mYqf5RgM+5eF6LZeT/ACrp8Ppabo9jYqFKr9WtoI+NRTYBKfhkbTTDvPOiaZoGh3Ouanca&#xA;Zd2FoA9wmtaZbzl6nikcTWq25DszBU/dv4U75IFBfN+veT9D806u19f6ba+UUYAwaJ5eiiv7sBhU&#xA;C8QXUMUEnU8PTVu1K5YDTCnqX/ONmq6zpXmPXPIl5JqR0i1to77QY9YtjaXIjqqTlIy0lIy8i8Qr&#xA;le4+0cjPvZRfQJytmtOFVhxQsOKrGwqpthVtcCqi4qvGBV4xVgv5l/k55Z8/G3ub2a50/V7ON4rT&#xA;U7J+EqxvXlG4IKuhqduu533OESpBFsQg/wCcZ5Oavc+fNelZN0aORY2DcUUsCfU6iFP+BHhh4/JH&#xA;CiZf+cbw6nh578xxtzaZAtyiosjS/WOXBFQbTD1KCnxbihx4/JPC8v8AzC/5xs/OSK5uNS0vXn80&#xA;+tKtxNyma2u2ljj9JJGSRzGzLF8AYScqbAZITDExLyDU/IOoaUYRr8Go6FIKrdPqFjKIV4lQvpyq&#xA;T6gYE0ou1Ppydsaeh/lRF+YGmw2CeUfPPl2wbUYDN9UY2f1hSrqHguFuIVmEu4pSvIV4tQZGVdQk&#xA;Pa9Ns/8AnJ28jJg17RhHG5R5ry2jVnFA3KP6oblGArx+Iqcr9LPdj97qv53hbi0vvzT8raTfRqXn&#xA;tz9WUwqVPwvI8LBGrt4gb1yW3cjfvY/q+j+TY9Re2/Mj83rvXeEZD6Pp8s8sbzEbqY4PVVKMePAf&#xA;E1K1X7IO/QI95R/l7yvoMWj/AFb8qvy+utU1a4FD5s8028UcEBIoJYVudnZfCKMDx5dMBPeU13Mr&#xA;g/5x+81+ZLlbv8w/Ns00HpRwHQ9F529qIolKpE00lXkT42+0nLc/Fvg465J4e96x5U8leVfKWnfo&#xA;/wAu6bDp1tsXEQ+NyP2pJGq7n3YnIE2kBNbu0tLy2ltbuGO5tZlKTQSqHjdT1VlYEEHwOBL40/Or&#xA;8rPMfkPzFrd55Y0eZ/J2spFI01sJXS1VHWWWCQISgjMibCZGj4kbclqL4ytqkKYP5M/NvzJ5dv5N&#xA;StboJqMr6fbLJKzyBbS1Dh0HIOeDbcl9QLufhJ4lCY2gF9Y/lH5x8tQfl7Za9c3fK78z6xdfWpQr&#xA;M0mpXM8hWHYbBYolRCaDiF6ZVIbtgLJPzQ1/XbH8sNZ1ryojXOqCzWXTzGvNgspUNKi0NTHExcCn&#xA;bBEbpPJ8neXvzk/MeL0EX8xGt9QcO00WowNNAjgSFY3knSQDkVVDRKKWG9AxFpiO5rss4sP+cjvz&#xA;n0tFk1bR9O1nTRQjUbVZQJKxwy0EkDSKD6dzG3H0qiu4wcATxFL7z8zdX/OXzdpxTRmi8veX4/rE&#xA;mjuzzxTXktUV5ZUECKVWpi5kfZPWpGPDS3aQfnR5x82WV3p1iLuW0kgpcSfVL3/SIVU8I0cW8cMc&#xA;Piv2z/ldsMQiRXeT/wA1tUbzBp3mN/M/1jVNOEsUen+Ynk9JorhOLwpeQVA5MFbk8EahlWrEYmKg&#xA;vojSfz08tMkC+Z7abyxNcHjDc3JW402Y1/3RqVvztnX3YrlfCz4nokFxBcQJPbyJNBKoeKWNgyMp&#xA;3BVhUEHAls4qsOFVNsVWNhVy4qqLgVeMCrxiq8YpXDArYxVcMVb2Ox3B64FY1rf5Zfl5rm+q+XNP&#xA;unry9VreNZa9/wB4oV9+++SEiiglFt+Q/wCUVtC8MPlm2Ecn94paVuX+sWc1x4ivCEXD+S/5TQ8O&#xA;HlLSzwpx52sb9PHmG5fTjxFeEMh0jyz5b0ZeOj6VZ6ap6i0t4oB/yTVcFppMq4FbrirsVdirq4q8&#xA;l/M//nG7yJ50jlu7OFdC14iq39ogEcjf8XwDij/6wo3uemTjMhiY2+Ytf0Pzx5EsfM/kfWok+qzP&#xA;Fe2kwkmhjaWBhKLmxUARSVjXi441XxXictBB3Ycn1l/zj95nl8x/lNoV7cS+reQJJZ3R7hraRo1B&#xA;+cYQ/TlMxRZxOzIfM35deRfNCsNe0Ozv5G29eSJROB7TJxlH0NiCQkh83/8AOQP5E/l35K8rrrOi&#xA;XN5Y3d3dR2trprS+tbyOyu/7Y9VaKh+IuR08cshIlhKIDLPyq/LuTy95fMEsdtq2p6i/r6hdQrfa&#xA;vbXTVJRDvZWCmNWIq8r71NaGgEjaQGUzw288NzoLyq0UicLrRYmjMkYeorJYaJGr+m1KfvbsL4nI&#xA;peVaR+Xvkbzx+Ydt5bOmenDp1ldtrktgttbrbyOYxaJzsvUh5qQ/wvJK3XkxoQs7IDGrKbXH/OO3&#xA;5oeTrmWX8vPMkd5p1xtcaZqACc0IC8ZEZZIJloN+QX5Y8YPNeEjk9O/Ij8vde8h+RzpGt3cdzez3&#xA;Ul4YoSWit1kRF9FGNK/3fI0AFWNPExkbLKIp6GcilYcKqbYqpscKtqcVVFOBV4OKrwcCrhileMCt&#xA;jFVwxVvFWxgVvCrq4FbxV2KuxV2KuxV2KuxVCarpGl6vYS6fqlpFe2M4Ky286LIjAim6sDiFfLeh&#xA;+cNU/wCcfvPOseTr3TpNT8rarcLe6NIJViZI3+HmjS0R24gRyBmX4kBrvvcRxC2u6e0r+Zd95k01&#xA;b/8ALv8AR+tt6PK40u7uHsb+Fzurem6OKEGnxhR3DMNshVc2V9z51/MPzD+ZFx+YflK180aNeadE&#xA;mq29xaW19JHIk06zxiT050jNoyjmoYxw03qymu9gApgbZz+bH5h6p5fvrDQXOn3Gt6kz/Wm1bUbi&#xA;/tbWJVVU+s2sSW9mkjyE8SY2AH2gAa5GIZEsd86fmD5o0ny7Ah0KWytpY6HUBFDdaVJIfhHoPbyN&#xA;Y79QyJGy1O5I+IgIJe2/84+RWSflF5ea2it4pHt+V19W4nlKWJ5Slf8AdjLQtXeuQlzZR5PRDgZL&#xA;CcULScVWE4VU2OKqbHCrlOKqinAqoDiq8HAq4HFVwOKVwOBVwOKt4q3irdcCt4VdgVuuKuxV2Kux&#xA;V2KtVxV2FUm80eT/ACx5q046d5h02HUrSvJUmX4kbpyjcUdG91IOINIIeFeZP+ccdc8oX0Pmz8sN&#xA;UmN5o7PdWuiXhMpYleMkcLinIPHVODCrfz5YJ3zY8Pc8w/Nb82Lj8xPK+kXt7Y2dvr3l26aSeKOQ&#xA;U4TcRIjWtyFlNHiSojMi0+0V6ZKMaYk2yzzppeh/m0+kedryW50vR4bIQXDqVDM0LMHjBn9Oxtf3&#xA;nIqWuSxG/p4Btsk7sM/LLyH+bV2+q6h+XN1KukQySx+pNL6drd0PFY1WULFcNx+1zjCD6aZIkdUA&#xA;HoraxrGt+UVuZ/MPlW88o+awCLDXNA5WEEkg3UTxoWspkr9r0gK1ODmr6Q/IPzd5t81/lxaaz5nC&#xA;NeyzSx290iiMzwRkKJXRQqq3MOvwilBXISFFnE7PQycilYThVYTiqxjhVSY4q5TiqopxVUBwKvBx&#xA;VeDgVcDiq4HAlcDirYOKt4q3XFW8CurireFXYq7FXYq7FXYFarirsKtVxV5R+Zv/ADjj5E873Eup&#xA;Kr6Nrsu8moWgBSRv5poDRXPupVj3OSjMhiY2w/yj/wA4jaZZalDN5s12XX9OslK2WmIj28Q5Ekhz&#xA;6kjBKmvFONT1PYyORAg97sLCx0+yhsbCCO1s7dBHBbwqEjRB0VVWgAyDJUljjlQxyIHRuqMAQfmD&#xA;iloBVUKoCqooANgAMUNE4qsJwqpk4qsY4VU2OFWlOKqinAqoDgVeDiq8HFVwOBVwOKrgcCVwOKtg&#xA;4q3XFW64q7FW8VdXArq4q6uKuxVrCrq4q1irVcVaJxVonFVpOFWicULCcVWk4VWE4qpscKrGOKqT&#xA;HCrSnFVVTgVepxVUBwKvBxVcDgVcDiq4HFK4HArdcVbrirdcVbrirsVbrirq4q6uKtVxV1cVdXFW&#xA;q4q0TirROKrScKtE4oWk4qsJwqtJxVYThVTY4qpscKqbHChapxVVU4EqgOBV4OKrwcCrwcVXA4FX&#xA;A4quBxS2DirdcCt1xVuuKt1xV1cVdXFXVxV1cVarirq4q1XFWq4q0ThVaTihaTiq0nCq0nFVhOKr&#xA;CcKqbHCqmxxVSY4UNK2KqqtiqopwJXg4FXg4qvBwKvBxVcDirYOBVwOKt1xS3XFW64q3XArq4q6u&#xA;Kurirq4q1XFXVwq1XFWicULScVaJxVaThVaTiqwnFVhOFVjHFVNmwqpscKFJmwqtVsVVVbAqorYE&#xA;qgOKrwcCrwcVXg4FXA4quBxVsHAq4HFW64q3XFXVxS3XFXVxV1cVarirq4q1XFDVcVaJxVonCq0n&#xA;FVpOKrScKrC2KrCcVWM2FVJmwoU2bFVJmwqtVsKqqtgVUVsCqitgSqBsVXhsCrg2KrwcVXA4FbBx&#xA;VdXFW64q3XArq4q3XFXVxV1cVdXFWq4q1XFWq4VaJxVonFVpOKrScKrC2KrC2FVjNiqmzYUKbNiq&#xA;mzYVUmbCqfD9BdvT/HKvUlcP0L29P8cfUrY/RHbh+ODdVw/RXbh+OO6tj9Gf5H447q3/ALjv8nHd&#xA;W/8Acf8A5OO6W/8AQf8AJwbq3/oX+Tjurf8Aof8Ak47q7/RPbHdW/wDRfbHdXf6L7Y7q7/RvbHdX&#xA;f6N7Y7q7/RvbFXf6N7Yq7/RvbHdXf6L7Y7q7/RfbHdXf6J7Y7q1/ontjurX+h/5OO6u/0L/Jx3Vr&#xA;/QP8nDurX+4//Jx3Vo/o3/J/HHdWj+i+/D8cd0LT+ie/D8cd1aP6G78Pxw7qtP6E7+n+OPqVaf0D&#xA;39P8cfUuz//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:F87F117407206811822AB2A6B75D99AD</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:F87F117407206811822AB2A6B75D99AD</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:0880117407206811822A8072EAEFE205</stRef:instanceID>
            <stRef:documentID>xmp.did:0880117407206811822A8072EAEFE205</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:AC3D3EC9D6DEE611ADF3FA58164AFD71</stEvt:instanceID>
                  <stEvt:when>2017-01-20T09:07:56+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:02801174072068118083F6D0A67B0728</stEvt:instanceID>
                  <stEvt:when>2017-01-20T18:36:10+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:05801174072068118083F6D0A67B0728</stEvt:instanceID>
                  <stEvt:when>2017-01-20T21:11:37+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:577FABBD61206811822AA8872E1D75D1</stEvt:instanceID>
                  <stEvt:when>2019-04-07T19:22:06+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0880117407206811822A8072EAEFE205</stEvt:instanceID>
                  <stEvt:when>2019-05-11T00:15:08+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F117407206811822AB2A6B75D99AD</stEvt:instanceID>
                  <stEvt:when>2019-05-18T09:11:40+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>2616.410162</stDim:w>
            <stDim:h>2304.277214</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -2304.28 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 2304.28 li
2616.41 2304.28 li
2616.41 0 li
cp
clp
4.273e-5 0 mo
2616.41 0 li
2616.41 2304.28 li
4.273e-5 2304.28 li
4.273e-5 0 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
level3{
gsave
clp
[1799.89 0 0 1799.89 1286.49 1141.67 ]ct
/0 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 1 1 ]
/C1 [.815686 .823529 .886275 ]
/N 2.99419 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1799.89 0 0 1799.89 1286.49 1141.67 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~s8W)trr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2oqrVc]nrVc]nrVc]nrVc]nrVcZlr;?Kjr;?Kjr;?Kiqtp9fqtp9fqtg0cqYL'bqYL$`q>'j^
q=sa[q"XXZp\4FVp\4CTp@e4Rp%A"Np%7nKo^qbHoCMSEo()AAnaZ/=nF5r9n*f`5mdBN1mHs9,m-O'(
lg!d#l07Hrkih3mkN:phjlPUbjQ#:\io8qUiS`YOhr!;Ih;-lAgY:K:g=b03f[na+f%&=#eC2mpda?Ih
~>
<~s8W)trr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrVc]nrVc]nrVc]nrVc]nrVc]mr;?Kjr;?Kjr;?Kjqtp9fqtp9fqtp9eqYL'bqYL'aq>'j^
q>'j]q"XXZq"XUXp\4FVp@e4Rp@e1Pp%A"Mo^qeJoCMSFoCDJCo()>@naZ,<nF5o8n*f]4md9E/mHj3+
lg*m&lK[[!l07Eqki_-lk2tgfjlPRaj5]1Zio8qUi8EPNhqm5Gh;-lAgY:H9g"G$1f[na+f%&=#eC2mp
~>
<~s8W)trr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrVc]nrVc]nrVc]nrVc]nrVc]nrVZTkr;?Kjr;?Kjr;?Kjqtp9fqtp9f
qtp9fqtg0cqYL'bqYL'aq>'j^q>'j^q"XXZq"XXZp\4FVp\4FUp@e4Rp@e1Pp%A"No^qeJo^qbHoCMSE
o()ABnaZ/>naQ&;nF5o8n*f]4mdBN1mHs<-m-O*)lg*m%lK[Wul07Eqki_-lkN:phjlPUbjQ,@]j5].Y
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
392.22 1112.62 mo
392.156 1112.59 392.088 1112.56 392.023 1112.53 cv
392.031 1112.66 392.024 1112.79 392.03 1112.91 cv
392.08 1112.85 392.135 1112.79 392.185 1112.74 cv
392.191 1112.7 392.21 1112.66 392.22 1112.62 cv
cp
0 .0392157 .0980392 rgb
f
1818.56 1708.17 mo
1818.55 1708.16 1818.55 1708.16 1818.54 1708.15 cv
1818.54 1708.15 1818.54 1708.15 1818.53 1708.15 cv
1818.54 1708.16 1818.55 1708.16 1818.56 1708.17 cv
cp
f
884.325 749.149 mo
884.274 749.118 884.219 749.085 884.167 749.055 cv
884.194 749.116 884.207 749.162 884.233 749.222 cv
884.252 749.208 884.271 749.195 884.291 749.181 cv
884.302 749.171 884.313 749.159 884.325 749.149 cv
cp
f
700.997 1341.48 mo
701.072 1341.47 701.146 1341.46 701.221 1341.45 cv
701.281 1341.43 701.34 1341.42 701.399 1341.4 cv
701.318 1341.39 701.238 1341.4 701.156 1341.39 cv
701.103 1341.42 701.051 1341.45 700.997 1341.48 cv
cp
f
872.98 757.194 mo
872.996 757.169 873.013 757.145 873.03 757.12 cv
872.955 757.184 872.88 757.248 872.805 757.312 cv
872.802 757.316 872.799 757.32 872.799 757.32 cv
872.858 757.281 872.919 757.237 872.98 757.194 cv
cp
f
737.946 873.926 mo
738.088 873.349 738.229 872.773 738.371 872.197 cv
738.142 872.762 738.022 873.341 737.946 873.926 cv
cp
f
1645.7 1540.69 mo
1645.63 1540.62 1645.56 1540.54 1645.49 1540.46 cv
1645.51 1540.56 1645.52 1540.65 1645.54 1540.75 cv
1645.59 1540.73 1645.65 1540.71 1645.7 1540.69 cv
cp
f
1902.72 1604.07 mo
1902.72 1604.07 li
1902.73 1604.08 li
1902.81 1604.02 1902.88 1603.93 1902.96 1603.85 cv
1902.83 1603.88 1902.7 1603.91 1902.58 1603.93 cv
1902.58 1603.93 1902.73 1604.08 1902.72 1604.07 cv
cp
f
1076.64 1159.28 mo
1076.83 1159.14 1077.04 1158.98 1077.22 1158.84 cv
1077.37 1158.68 1077.53 1158.51 1077.68 1158.35 cv
1077.47 1158.43 1077.26 1158.58 1077.05 1158.65 cv
1076.92 1158.87 1076.77 1159.07 1076.64 1159.28 cv
cp
f
2207.23 1496.15 mo
2206.68 1496.99 2202.98 1496.14 2200.75 1495.95 cv
2197.4 1495.67 2194.05 1495.31 2190.71 1494.93 cv
2189 1494.74 2187.18 1494.71 2185.64 1494.12 cv
2159.88 1484.2 2134.22 1474.04 2108.35 1464.35 cv
2103.01 1462.35 2096.48 1462.81 2091.18 1460.75 cv
2074.82 1454.41 2058.77 1447.41 2042.63 1440.63 cv
2041.52 1440.16 2040.17 1437.51 2040.47 1436.91 cv
2091.48 1454.95 2142.5 1473 2193.52 1491.04 cv
2140.32 1466.43 2083.89 1447.86 2031.56 1421.7 cv
2031.8 1420.69 2038.78 1417.81 2041.52 1418.64 cv
2055.77 1422.93 2069.88 1427.57 2083.99 1432.22 cv
2095.82 1436.12 2107.73 1439.89 2119.33 1444.27 cv
2139.37 1451.85 2159.12 1460.02 2179.17 1467.59 cv
2185.75 1470.08 2193.37 1470.62 2199.6 1473.61 cv
2204.72 1476.08 2209.65 1480.2 2212.32 1484.91 cv
2213.57 1487.1 2209.6 1492.59 2207.23 1496.15 cv
cp
2093.73 1471.2 mo
2092.4 1470.66 2092.05 1468.2 2090.63 1465.4 cv
2106.52 1472.29 2134.51 1486.08 2134.17 1486.76 cv
2120.67 1481.62 2107.12 1476.57 2093.73 1471.2 cv
cp
2086.24 1494.82 mo
2085.62 1498.93 2084.9 1503.05 2084.24 1507.16 cv
2083.09 1514.29 2082.09 1521.44 2080.68 1528.55 cv
2080.37 1530.12 2078.92 1532.15 2077.4 1532.91 cv
2073.75 1534.74 2069.81 1535.93 2065.42 1537.59 cv
2067.37 1538.04 2068.78 1538.37 2069.6 1538.56 cv
2057.74 1550.91 2041.54 1554.41 2026.01 1559.29 cv
2003.45 1566.39 1980.83 1573.27 1958.24 1580.24 cv
1955.26 1581.15 1952.27 1582.01 1948.73 1584.48 cv
1951.67 1585.35 1954.6 1586.23 1957.54 1587.1 cv
1957.36 1587.67 1949.75 1588.18 1948.63 1586.37 cv
1946.65 1583.14 1944.7 1584.21 1942.11 1584.89 cv
1937.2 1586.16 1932.27 1587.28 1927.14 1589.6 cv
1930.92 1590.54 1934.69 1591.49 1939.46 1592.68 cv
1927.26 1596.08 1916 1599.18 1904.77 1602.38 cv
1904.09 1602.57 1903.55 1603.29 1902.96 1603.85 cv
1911.28 1602.19 1919.77 1600.11 1927.03 1598.67 cv
1916.92 1608.02 1921.86 1615.38 1917.31 1622.42 cv
1914.73 1626.41 1907.91 1628.16 1902.94 1630.8 cv
1900.42 1632.14 1897.77 1633.23 1895.18 1634.43 cv
1901.34 1632.86 1907.49 1631.3 1915.73 1629.2 cv
1913.32 1636.54 1913.32 1636.54 1915.46 1644.35 cv
1914.78 1644.25 1907.87 1648.76 1907.19 1648.66 cv
1908.53 1651.89 1921.78 1654.87 1923.33 1657.99 cv
1925 1661.34 1913.83 1664.6 1907.51 1666.44 cv
1918.71 1665.96 1928.96 1666.55 1934.8 1671.04 cv
1924.17 1674.54 1900.98 1686.21 1892.26 1688.67 cv
1890.73 1689.11 1888.04 1687.59 1886.87 1686.2 cv
1884.07 1682.89 1881.4 1679.32 1879.65 1675.41 cv
1879.05 1674.07 1880.89 1670.9 1882.49 1669.46 cv
1884.13 1667.99 1886.85 1667.62 1889.1 1666.77 cv
1888.92 1666.27 1888.74 1665.76 1888.56 1665.26 cv
1886.37 1666.03 1884.1 1667.48 1882.03 1667.38 cv
1879.95 1667.28 1876.6 1666 1876.34 1664.62 cv
1875.03 1657.95 1874.58 1651.08 1873.87 1644.68 cv
1876.85 1642.86 1879.59 1641.18 1882.34 1639.51 cv
1873.26 1642.03 1872.91 1641.75 1872.03 1633.35 cv
1871.62 1629.42 1870.5 1625.59 1870.26 1621.64 cv
1870.08 1618.63 1870.77 1615.5 1872.19 1612.63 cv
1871.13 1610.78 1870.07 1608.93 1869.01 1607.08 cv
1870.95 1605.99 1872.8 1604.45 1874.87 1603.9 cv
1885.49 1601.09 1896.17 1598.55 1906.81 1595.84 cv
1908.05 1595.52 1909.19 1594.74 1910.14 1593.08 cv
1907.39 1593.55 1904.63 1593.96 1901.89 1594.51 cv
1892.32 1596.46 1882.78 1598.56 1873.2 1600.4 cv
1868.59 1601.29 1867.16 1598.21 1867.87 1593.95 cv
1869.67 1583.14 1869.52 1572.31 1869.67 1561.48 cv
1869.76 1555.91 1873.32 1552.81 1878.43 1551.49 cv
1892.91 1547.75 1907.43 1544.15 1921.95 1540.6 cv
1943.56 1535.32 1965.24 1530.36 1986.79 1524.84 cv
2007.66 1519.51 2028.45 1513.77 2049.21 1507.96 cv
2058.04 1505.49 2066.76 1502.54 2075.43 1499.48 cv
2077.29 1498.82 2078.69 1496.75 2080.31 1495.33 cv
2078.59 1494.54 2060.15 1495.54 2052.64 1496.83 cv
2052.67 1497.39 2058.83 1498.05 2061.87 1497.81 cv
2062.02 1498.3 2038.45 1507.8 2026.34 1511.33 cv
2013.65 1515.04 2000.73 1517.8 1987.92 1521.06 cv
1975.35 1524.26 1962.81 1527.65 1950.23 1530.83 cv
1937.43 1534.06 1924.61 1537.22 1911.77 1540.27 cv
1899.37 1543.21 1886.93 1545.96 1873.61 1548.99 cv
1874.06 1546.72 1873.84 1544.73 1874.79 1543.63 cv
1877.75 1540.19 1878.27 1536.82 1878.3 1532.56 cv
1878.32 1530.01 1882.11 1525.51 1884.86 1524.78 cv
1908.06 1518.61 1931.4 1513.01 1954.73 1507.43 cv
1970.87 1503.58 1987.1 1500.14 2003.25 1496.33 cv
2020.9 1492.16 2038.53 1487.87 2056.11 1483.34 cv
2058.43 1482.74 2060.39 1480.45 2063.02 1478.58 cv
2067.44 1479.46 2083.75 1486.92 2083.75 1486.92 cv
2083.75 1486.92 2087.4 1487.11 2086.24 1494.82 cv
cp
2044.09 1568.59 mo
2043.58 1569.55 2042.17 1570.37 2041.01 1570.8 cv
2025.25 1576.77 2009.49 1582.76 1993.66 1588.52 cv
1986.66 1591.06 1972.94 1597.14 1973.21 1598.03 cv
1995.87 1589.95 2018.52 1581.88 2042.67 1573.27 cv
2041.46 1579.08 2041.26 1580.04 2040.44 1583.93 cv
2032.5 1585.68 1991.43 1598.25 1991.43 1598.58 cv
1993.26 1598.88 2020.67 1594.38 2022.68 1594.71 cv
2007.55 1610.31 1975.84 1608.67 1957.83 1590.98 cv
1963.67 1589.06 1969.2 1587.25 1975.6 1585.15 cv
1969.27 1578.21 1961.77 1586.46 1955.62 1583.25 cv
1987.26 1573.55 2018.65 1563.93 2051.22 1553.95 cv
2048.44 1559.72 2046.41 1564.21 2044.09 1568.59 cv
cp
2041.83 1611.78 mo
2040.77 1615.05 2039.9 1617.73 2038.89 1620.85 cv
2035.31 1619.63 2032.92 1618.81 2029.45 1617.62 cv
2033.89 1615.53 2037.33 1613.9 2041.83 1611.78 cv
cp
2032.8 1609.73 mo
2022.58 1619.56 2014.36 1611.47 2005.55 1609.44 cv
2005.47 1608.79 2005.38 1608.15 2005.3 1607.5 cv
2016.13 1603.63 2026.96 1599.75 2038.06 1595.79 cv
2039.05 1598.07 2040.01 1600.29 2041.17 1602.99 cv
2037.17 1604.25 2033.46 1605.42 2028.71 1606.92 cv
2030.52 1608.16 2031.54 1608.86 2032.8 1609.73 cv
cp
2104.75 1662.19 mo
2111.41 1664.91 2117.08 1670.05 2122.25 1674.99 cv
2125.87 1678.46 2122.04 1681.34 2118.31 1682.45 cv
2108.41 1685.39 2098.63 1686.02 2089.28 1681.98 cv
2078.94 1677.51 2058.56 1667.9 2058.78 1667.42 cv
2068.53 1669.84 2078.29 1672.25 2088.05 1674.67 cv
2037.5 1655.33 1985.68 1638.66 1938.05 1613.8 cv
1938.89 1612.05 1939.23 1611.03 1939.82 1610.17 cv
1943.17 1605.33 1945.87 1602.63 1953.1 1605.57 cv
1974.26 1614.17 1996.26 1621.12 2017.72 1629.16 cv
2030.75 1634.04 2043.22 1640.07 2056.25 1644.95 cv
2072.3 1650.95 2088.95 1655.74 2104.75 1662.19 cv
cp
2133.58 1682.06 mo
2128.74 1677.54 2124.59 1673.67 2119.43 1668.86 cv
2128.81 1670.49 2132.67 1674.26 2133.58 1682.06 cv
cp
2078.21 1693.51 mo
2087.07 1696.2 2095.93 1698.88 2104.78 1701.57 cv
2104.49 1702.34 2094.97 1702.22 2090.75 1700.83 cv
2081.19 1697.68 2072.17 1694 2065 1686.68 cv
2061.54 1683.13 2054.91 1682.42 2049.75 1680.37 cv
2047.39 1679.44 2045.09 1678.38 2043.25 1676.06 cv
2048.08 1677.23 2053.14 1677.94 2057.69 1679.68 cv
2067.06 1683.26 2076.18 1687.36 2085.37 1691.32 cv
2095.17 1695.54 2105.65 1694.17 2116.16 1692.81 cv
2118.25 1692.54 2120.35 1692.25 2122.45 1691.97 cv
2107.09 1701.17 2078.46 1692.84 2078.21 1693.51 cv
cp
1929.86 1626.42 mo
1930.17 1625.57 1930.48 1624.72 1930.8 1623.86 cv
1933.59 1624.41 1936.63 1624.51 1939.15 1625.59 cv
1952.91 1631.45 1966.29 1638.08 1980.28 1643.45 cv
1999.86 1650.95 2019.97 1657.34 2039.64 1664.65 cv
2052.95 1669.6 2065.9 1675.31 2078.45 1681.91 cv
2045.01 1673.55 1949.78 1634.43 1929.86 1626.42 cv
cp
1955.97 1646.34 mo
1956.45 1645.69 1964.45 1647.3 1967.63 1649.23 cv
1968.13 1649.54 1966.79 1652.4 1966.3 1654.09 cv
1965.5 1654.34 1964.71 1654.59 1963.91 1654.84 cv
1961.27 1652.01 1958.62 1649.17 1955.97 1646.34 cv
cp
1978.24 1672.97 mo
1971.98 1674.87 1959.59 1679.63 1959.67 1680.11 cv
1964.13 1679.25 1968.58 1678.26 1973.06 1677.57 cv
1977.68 1676.85 1987.17 1677.19 1987.26 1677.85 cv
1958.91 1687.75 1930.56 1697.66 1902.46 1707.47 cv
1899.14 1702.09 1896.4 1697.67 1893.6 1693.14 cv
1901.63 1690.14 1908.86 1686.88 1916.37 1684.98 cv
1918.86 1684.34 1922.09 1687.2 1924.92 1688.43 cv
1924.57 1687.28 1923.88 1685.01 1923.63 1684.18 cv
1934 1678.33 1943.9 1672.49 1954.09 1667.19 cv
1956.46 1665.96 1960.01 1665.91 1962.65 1666.48 cv
1967.89 1667.63 1972.88 1669.59 1978.24 1672.97 cv
cp
1999.64 1686.61 mo
1992.93 1684.21 1989.9 1690.72 1983.64 1693.59 cv
1986.31 1689.49 1988.25 1686.51 1990.18 1683.53 cv
1975.89 1692.76 1965.08 1706.87 1947.71 1712.04 cv
1931.63 1716.82 1915.76 1722.4 1900.09 1727.52 cv
1899.13 1726.3 1898.71 1726.02 1898.66 1725.66 cv
1896.5 1710.84 1892.83 1714.02 1910.11 1708.45 cv
1933.83 1700.8 1957.46 1692.85 1981.08 1684.85 cv
1984.66 1683.64 1988.53 1682.04 1991.22 1679.58 cv
1995.39 1675.77 1998.31 1676.93 2002.02 1679.8 cv
2001.14 1682.32 2000.37 1684.53 1999.64 1686.61 cv
cp
1930.02 1721.4 mo
1937.92 1718.5 1945.11 1713.06 1954.27 1714.56 cv
1955.48 1714.76 1957.17 1713.42 1958.53 1712.61 cv
1960.9 1711.2 1963.2 1709.65 1965.52 1708.15 cv
1954.66 1721.72 1944.56 1721.17 1930.02 1721.4 cv
cp
1903.5 1732.37 mo
1908.57 1725.35 1916.42 1724.09 1920 1730.58 cv
1914.06 1731.86 1909.13 1737.71 1903.5 1732.37 cv
cp
1865.05 1616.95 mo
1866.41 1625.56 1867.73 1633.88 1869.27 1643.6 cv
1862.73 1637.7 1860.34 1620.42 1865.05 1616.95 cv
cp
1713.02 1443.79 mo
1712.48 1443.64 1711.94 1443.49 1711.4 1443.34 cv
1711.61 1437.7 1711.34 1431.92 1716.59 1427.72 cv
1717.28 1427.92 1717.98 1428.11 1718.67 1428.3 cv
1716.79 1433.46 1714.91 1438.63 1713.02 1443.79 cv
cp
1723.44 1446.65 mo
1724.74 1443.3 1726.5 1440.09 1728.96 1435.06 cv
1732.11 1441.34 1734.41 1445.92 1737.28 1451.64 cv
1732.25 1450.82 1728.59 1450.39 1725.09 1449.51 cv
1724.23 1449.3 1723.15 1447.4 1723.44 1446.65 cv
cp
1803.63 1605.45 mo
1785.25 1598.66 1748.06 1585.84 1747.84 1586.23 cv
1757.9 1591.07 1767.97 1595.9 1778.04 1600.74 cv
1777.65 1601.46 1751.98 1596.82 1751.7 1597.52 cv
1781.38 1606.71 1811.05 1615.9 1841.33 1625.28 cv
1841.52 1646.12 1844.26 1666.84 1854.66 1686.48 cv
1851.6 1686.42 1850.15 1686.39 1848.7 1686.37 cv
1852.69 1688.67 1859.93 1694.45 1859.56 1695.04 cv
1837.03 1684.81 1811.5 1680.58 1790.09 1668.14 cv
1790.48 1667.36 1790.87 1666.57 1791.26 1665.79 cv
1807.7 1672.22 1824.11 1678.71 1840.62 1685.01 cv
1843.16 1685.98 1846.14 1686.08 1848.91 1686.58 cv
1841.74 1683.46 1834.67 1680.23 1827.44 1677.3 cv
1814.81 1672.19 1802 1667.4 1789.45 1662.13 cv
1787.35 1661.25 1785.89 1658.77 1784.64 1656.74 cv
1781.72 1652.01 1779.04 1647.14 1776.47 1642.22 cv
1776.13 1641.57 1777.02 1640.3 1777.56 1638.63 cv
1767.72 1634.53 1756.92 1630.2 1746.33 1625.49 cv
1742.67 1623.87 1739.58 1621.22 1736.15 1619.16 cv
1735.02 1618.48 1733.68 1618.04 1732.36 1617.7 cv
1723.67 1615.51 1715.72 1612.36 1710.87 1604.75 cv
1709.37 1602.41 1707.57 1600.26 1705.1 1596.93 cv
1704.19 1600.15 1703.75 1601.69 1703.19 1603.69 cv
1702.17 1603.26 1701.21 1602.95 1700.35 1602.48 cv
1693.32 1598.66 1686.11 1595.08 1679.37 1590.85 cv
1676.36 1588.96 1673.16 1587.19 1673.98 1581.73 cv
1674.52 1578.11 1669.91 1574.32 1668.19 1570.35 cv
1660.44 1552.43 1655.99 1533.52 1652.36 1514.22 cv
1649.34 1498.19 1644.14 1482.67 1639.86 1466.94 cv
1637.9 1459.7 1635.81 1452.5 1633.78 1445.28 cv
1632.89 1445.55 1642.79 1489.02 1648.62 1510.48 cv
1648.02 1510.82 1647.42 1511.16 1646.81 1511.5 cv
1645.79 1510.59 1643.89 1509.74 1643.88 1508.75 cv
1643.75 1495.59 1633.86 1486.69 1629.96 1475.21 cv
1629.36 1473.47 1628.62 1471.79 1627.7 1469.46 cv
1626.5 1472.93 1625.45 1475.95 1624.4 1478.96 cv
1624.04 1479.04 1623.68 1479.11 1623.32 1479.19 cv
1622.3 1471.63 1621.81 1463.92 1619.99 1456.58 cv
1619.22 1453.47 1615.68 1451.15 1613.4 1448.47 cv
1612.86 1448.76 1617.46 1473.62 1616.87 1473.83 cv
1613.92 1467.02 1610.97 1460.22 1607.65 1452.54 cv
1606.88 1455.48 1606.33 1457.59 1605.77 1459.76 cv
1611.3 1462.03 1612.09 1468.08 1610.99 1473.69 cv
1609.9 1479.21 1611.61 1485.28 1613.11 1490.8 cv
1615.26 1498.73 1618.33 1506.38 1621.33 1515.09 cv
1604.81 1510.9 1593.58 1501.03 1584.32 1482.79 cv
1592.45 1486.68 1607.07 1492.11 1607.5 1491.54 cv
1605.67 1490.26 1604.07 1488.36 1601.98 1487.81 cv
1580.32 1482.11 1574.15 1466.33 1573.05 1446.98 cv
1568.4 1447.01 1569.17 1449.59 1569.82 1452.24 cv
1571.08 1457.41 1572.27 1462.6 1573.88 1469.42 cv
1571.77 1468.06 1570.83 1467.81 1570.69 1467.31 cv
1569.2 1461.9 1566.79 1456.55 1566.62 1450.99 cv
1565.98 1430.26 1574.5 1411 1583.06 1391.88 cv
1585.28 1386.93 1587.32 1381.64 1593.65 1379.09 cv
1595.47 1378.35 1595.74 1374.33 1597.58 1372.7 cv
1604.68 1366.45 1612.04 1360.46 1619.48 1354.57 cv
1624.63 1350.5 1630.07 1346.76 1635.38 1342.88 cv
1635 1342.32 1612.5 1355.85 1601.64 1363.17 cv
1601.12 1362.83 1600.61 1362.49 1600.09 1362.14 cv
1603.42 1356.04 1606.74 1349.94 1610.56 1342.91 cv
1617.37 1349.4 1623.07 1344.31 1627.38 1341.49 cv
1644.12 1330.56 1661.47 1331.01 1679.2 1333.67 cv
1686.73 1334.8 1694.21 1336.08 1702.65 1337.44 cv
1695.03 1341.87 1688.75 1345.52 1682.46 1349.17 cv
1686.19 1347.78 1689.9 1346.35 1693.64 1345.01 cv
1697.06 1343.79 1700.51 1342.66 1704.98 1341.14 cv
1702.91 1348.97 1696.5 1349.67 1691.78 1352.31 cv
1688.91 1353.91 1685.97 1355.4 1683.06 1356.95 cv
1690.64 1354.59 1706.43 1350.73 1706.75 1351.17 cv
1699.82 1356.25 1686.58 1367.57 1686.88 1368.16 cv
1692.04 1365.86 1697.33 1363.83 1702.32 1361.22 cv
1709.72 1357.32 1716.64 1352.39 1724.24 1349.01 cv
1741.91 1341.16 1759.74 1333.62 1777.76 1326.66 cv
1789.68 1322.06 1801.87 1317.5 1814.25 1315.06 cv
1828.98 1312.17 1844.03 1311.29 1858.95 1310.07 cv
1868.39 1309.29 1877.88 1309.17 1887.29 1309.32 cv
1894.87 1309.43 1902.38 1310.32 1909.91 1310.97 cv
1922.05 1312.02 1934.15 1313.3 1946.31 1314.22 cv
1968.68 1315.91 1989.24 1323.09 2010.26 1328.88 cv
2011.15 1329.12 2011.82 1329.96 2013.47 1331.15 cv
1998.96 1336.67 1982.9 1338.18 1974.46 1351.97 cv
1941.62 1341.88 1909.9 1330.37 1874.02 1334.34 cv
1890.84 1336.57 1907.67 1338.79 1924.49 1341.07 cv
1925.74 1341.24 1927.9 1341.67 1927.95 1342.23 cv
1928.45 1348.07 1934.12 1346.59 1937.46 1347.54 cv
1948.13 1350.55 1959.12 1352.75 1969.98 1355.26 cv
1969.91 1356.05 1969.84 1356.85 1969.77 1357.64 cv
1968.62 1358.45 1967.34 1359.14 1966.35 1360.09 cv
1960.01 1366.2 1953.33 1372.05 1947.52 1378.58 cv
1932.43 1395.52 1918.82 1413.44 1908.2 1433.13 cv
1905.8 1437.58 1903.05 1438.48 1898.33 1436.9 cv
1878.49 1430.26 1858.05 1425.47 1837.04 1422.09 cv
1815.9 1418.68 1795.14 1413.79 1774.09 1409.99 cv
1761.09 1407.64 1747.86 1406.14 1734.74 1404.21 cv
1733.65 1404.06 1732.43 1403.87 1731.62 1403.28 cv
1725.16 1398.63 1720.77 1401.08 1715.32 1406.78 cv
1705.8 1416.72 1699.17 1427.45 1698 1440.51 cv
1697.29 1448.43 1700.54 1455.21 1705.05 1461.24 cv
1706.42 1463.07 1709.05 1464.39 1711.44 1465.07 cv
1760.33 1479.09 1809.27 1492.99 1858.2 1506.9 cv
1862.02 1507.99 1863.25 1509.59 1861.24 1513.85 cv
1854.12 1528.93 1848.75 1544.44 1846.52 1560.65 cv
1845.47 1568.3 1843.75 1575.92 1842.1 1584.83 cv
1838.04 1583.07 1834.09 1581.35 1830.13 1579.63 cv
1829.97 1579.84 1829.81 1580.05 1829.66 1580.26 cv
1832.51 1582.47 1835.36 1584.68 1838.22 1586.89 cv
1837.93 1587.4 1819.95 1581.78 1811.15 1578.64 cv
1807.74 1577.42 1797.34 1577.11 1795.44 1577.92 cv
1811.58 1584.03 1826.76 1589.78 1843.21 1596.01 cv
1838.22 1598.22 1838.22 1598.22 1824.45 1595.43 cv
1828.83 1597.93 1833.21 1600.43 1839.22 1603.85 cv
1819.19 1598.88 1801.07 1594.37 1781.28 1589.46 cv
1787.24 1598.52 1797.55 1598.74 1803.63 1605.45 cv
cp
1869.79 1713.7 mo
1857.02 1713.73 1811.6 1692.92 1801.54 1678.81 cv
1810.05 1681.75 1817.18 1684.15 1824.24 1686.68 cv
1835.32 1690.63 1846.29 1694.78 1857.42 1698.61 cv
1864.89 1701.19 1868.18 1706.61 1869.79 1713.7 cv
cp
1871.99 1726.13 mo
1861.9 1721.38 1852.42 1716.91 1842.93 1712.45 cv
1862.85 1715.82 1873.36 1720.71 1871.99 1726.13 cv
cp
1845.55 1722.08 mo
1836.28 1717.91 1827.52 1712.83 1818.54 1708.15 cv
1818.55 1708.16 1818.55 1708.16 1818.56 1708.17 cv
1823.35 1711.6 1828.14 1715.03 1832.93 1718.45 cv
1832.7 1718.82 1832.48 1719.19 1832.25 1719.55 cv
1827.35 1716.95 1822.41 1714.4 1817.63 1711.61 cv
1817.34 1711.44 1818.32 1709.43 1818.7 1708.28 cv
1818.65 1708.24 1818.61 1708.21 1818.56 1708.17 cv
1818.55 1708.16 1818.54 1708.16 1818.53 1708.15 cv
1818.54 1708.15 1818.54 1708.15 1818.54 1708.15 cv
1816.17 1706.27 1813.8 1704.38 1811.43 1702.5 cv
1811.62 1702.2 1811.82 1701.9 1812.02 1701.59 cv
1833.35 1711.52 1875.29 1732.81 1874.92 1733.53 cv
1865.11 1729.75 1855.08 1726.36 1845.55 1722.08 cv
cp
1776.14 1673.85 mo
1772.23 1672.1 1768.31 1670.35 1764.05 1668.45 cv
1765.6 1666.47 1766.75 1665.01 1768.85 1662.33 cv
1771.97 1665.79 1774.89 1669.02 1777.8 1672.24 cv
1777.25 1672.78 1776.7 1673.31 1776.14 1673.85 cv
cp
1744 1628.3 mo
1756.94 1630.9 1760.04 1641.77 1766.11 1651.99 cv
1750.81 1649.26 1750.91 1635.93 1744 1628.3 cv
cp
1759.39 1665.75 mo
1753.65 1662.81 1747.91 1659.87 1741.84 1656.75 cv
1743.4 1655.23 1744.73 1653.94 1746.89 1651.84 cv
1751.6 1655.69 1756.37 1659.58 1761.14 1663.48 cv
1760.56 1664.24 1759.97 1664.99 1759.39 1665.75 cv
cp
1729.41 1625.59 mo
1727.29 1624.05 1725.66 1622.87 1722.96 1620.92 cv
1738.96 1622.12 1740.27 1635.41 1747.87 1643.18 cv
1742.83 1644.71 1735.6 1642.31 1732.93 1638.62 cv
1727.39 1630.92 1726.81 1628.82 1729.41 1625.59 cv
cp
1735.64 1654 mo
1730 1650.1 1724.37 1646.19 1718.74 1642.29 cv
1719.09 1641.8 1719.44 1641.31 1719.79 1640.81 cv
1726.48 1643.48 1733.73 1645.45 1735.64 1654 cv
cp
1706.38 1626.58 mo
1702.46 1622.04 1700.89 1616.66 1698.24 1611.65 cv
1710.9 1616.74 1722.4 1623 1724.53 1638.43 cv
1721.38 1635.47 1718.24 1632.5 1714.78 1629.24 cv
1711.69 1630.88 1709.48 1630.17 1706.38 1626.58 cv
cp
1694.59 1622.53 mo
1687.47 1616.12 1675.17 1600.26 1676.99 1597.93 cv
1683.51 1605.59 1689.94 1613.12 1696.36 1620.66 cv
1695.77 1621.28 1695.18 1621.9 1694.59 1622.53 cv
cp
1628.32 1505.99 mo
1627.58 1500.76 1626.84 1495.53 1626.1 1490.31 cv
1626.91 1490.13 1630.1 1500.22 1630.88 1505.45 cv
1630.03 1505.63 1629.18 1505.81 1628.32 1505.99 cv
cp
1640.24 1526.47 mo
1638.41 1521.42 1636.73 1510.49 1637.72 1510.08 cv
1639.61 1515.11 1641.51 1520.14 1643.4 1525.17 cv
1642.35 1525.6 1641.29 1526.04 1640.24 1526.47 cv
cp
1645.7 1540.69 mo
1645.65 1540.71 1645.59 1540.73 1645.54 1540.75 cv
1645.54 1540.78 1645.55 1540.8 1645.55 1540.83 cv
1647.91 1545.65 1650.3 1550.45 1652.69 1555.24 cv
1651.94 1555.59 1648.61 1551.98 1647.69 1549.83 cv
1647.45 1549.87 1647.2 1549.91 1646.96 1549.95 cv
1647.04 1552.17 1647.13 1554.38 1647.21 1556.6 cv
1646.67 1556.73 1642.98 1547.02 1641.67 1542.02 cv
1643.16 1541.53 1644.36 1541.14 1645.54 1540.75 cv
1645.52 1540.65 1645.51 1540.56 1645.49 1540.46 cv
1643.07 1537.77 1640.62 1535.05 1637.01 1531.05 cv
1640.66 1530.64 1643.5 1530.08 1643.57 1530.35 cv
1644.43 1533.66 1644.92 1537.07 1645.49 1540.46 cv
1645.56 1540.54 1645.63 1540.62 1645.7 1540.69 cv
cp
1624.06 1530.11 mo
1618.89 1526.89 1613.73 1523.66 1608.57 1520.44 cv
1609.01 1519.84 1617.61 1519.68 1622.95 1522.61 cv
1622.33 1523.51 1624.67 1529.22 1624.06 1530.11 cv
cp
1628.38 1541.9 mo
1617.36 1535.38 1598.64 1529.25 1586.21 1521.9 cv
1589.03 1521.78 1597.76 1521.05 1598.47 1521.34 cv
1606.96 1524.89 1615.61 1528.2 1623.75 1532.33 cv
1626.62 1533.79 1629.06 1541.23 1628.38 1541.9 cv
cp
1629.59 1554.1 mo
1617.17 1547.72 1604.95 1541.74 1593.17 1535.12 cv
1590.76 1533.76 1589.99 1529.96 1588.46 1527.29 cv
1588.96 1526.89 1589.45 1526.49 1589.94 1526.09 cv
1597.79 1530.08 1605.62 1534.1 1613.49 1538.06 cv
1616.9 1539.77 1620.2 1541.84 1623.87 1542.9 cv
1629.8 1544.6 1630.32 1548.61 1629.59 1554.1 cv
cp
1598.5 1357.45 mo
1590.46 1371.29 1582.41 1385.14 1574.37 1398.98 cv
1573.62 1398.62 1586.29 1369.24 1598.5 1357.45 cv
cp
1576.64 1351.67 mo
1577.83 1351.72 1570.71 1363.69 1570.46 1364.38 cv
1569 1368.52 1565.93 1370.18 1561.1 1368.4 cv
1560.93 1363.95 1572.09 1351.5 1576.64 1351.67 cv
cp
1543.31 1344.62 mo
1538.35 1351.68 1531.94 1351.92 1523.96 1351.12 cv
1527.14 1346.91 1532.01 1344.12 1534.81 1340.42 cv
1538.13 1341.78 1538.58 1341.92 1541.08 1343.03 cv
1541.85 1343.37 1542.45 1344 1543.31 1344.62 cv
cp
1547.3 1456.33 mo
1548.38 1454.73 1549.9 1453.23 1550.4 1451.52 cv
1550.83 1450.05 1550.69 1447.82 1549.76 1446.83 cv
1546.15 1443.01 1545.5 1441.27 1546.93 1434.98 cv
1549.7 1434.89 1552.54 1434.79 1556.54 1434.64 cv
1553.8 1431.21 1551.66 1428.52 1549.51 1425.82 cv
1549.86 1425.6 1550.21 1425.39 1550.56 1425.17 cv
1547.7 1424.27 1544.84 1423.36 1541.98 1422.46 cv
1542.08 1422.01 1542.18 1421.55 1542.28 1421.1 cv
1544.05 1420.72 1545.81 1420.35 1549.56 1419.56 cv
1544.08 1416.63 1540.14 1414.53 1535.4 1412 cv
1533.67 1415.15 1532.13 1417.95 1530.19 1421.47 cv
1525.59 1419.28 1519.5 1417.08 1514.37 1413.64 cv
1512.23 1412.22 1511.88 1408.25 1511.18 1405.31 cv
1510.66 1403.16 1510.9 1400.81 1510.74 1397.2 cv
1515.91 1399.19 1520.47 1401.13 1525.18 1402.72 cv
1530.01 1404.35 1534.98 1405.65 1540.45 1406.07 cv
1524.33 1398.88 1508.22 1391.7 1492.1 1384.51 cv
1491.53 1385.41 1497.5 1391.14 1501.45 1393.32 cv
1499.17 1396.44 1496.87 1399.58 1494.46 1402.88 cv
1481.09 1396.97 1469.67 1388.17 1454.38 1386.4 cv
1455.06 1387.06 1455.64 1387.86 1456.45 1388.35 cv
1461.56 1391.46 1464.92 1394.41 1456.35 1398.56 cv
1453.84 1399.78 1451.21 1404.38 1449.99 1404.02 cv
1445.15 1402.56 1439 1400.82 1436.86 1397.16 cv
1434.8 1393.64 1436.58 1387.57 1437.56 1382.72 cv
1441.32 1363.96 1448.75 1346.31 1461.39 1330.8 cv
1472.16 1317.59 1485.01 1307.8 1500.25 1316.3 cv
1501.52 1317.01 1503 1317.42 1504.3 1317.93 cv
1499.91 1324.19 1495.64 1330.55 1491.07 1336.71 cv
1488.16 1340.64 1489.09 1344.06 1492.42 1345.96 cv
1494.99 1347.42 1498.92 1347.96 1501.97 1347.29 cv
1504.77 1346.67 1507.96 1344.34 1509.65 1341.96 cv
1516.15 1332.78 1526.47 1328.26 1535.25 1321.95 cv
1537.01 1320.68 1541.17 1322.55 1546.2 1323.26 cv
1537.38 1331.07 1530.06 1337.67 1522.61 1344.14 cv
1516.89 1349.1 1515.8 1357.99 1522.78 1361.88 cv
1527.33 1364.42 1530.13 1361.85 1533.63 1359.69 cv
1543.32 1353.7 1549.66 1344.69 1557.26 1336.82 cv
1559.4 1334.61 1562.04 1331.36 1564.48 1331.17 cv
1571.16 1330.65 1578.04 1330.85 1584.46 1332.1 cv
1587.47 1332.69 1586.47 1335.44 1583.37 1337.55 cv
1576.68 1342.09 1570.35 1347.14 1564.06 1352.2 cv
1562.54 1353.43 1561.64 1355.46 1560.67 1357.22 cv
1558.46 1361.21 1556.38 1365.26 1553.73 1370.28 cv
1554.4 1371.88 1555.73 1375.08 1557.34 1378.96 cv
1563.21 1376.46 1569.35 1374.29 1574.95 1371.18 cv
1576.63 1370.25 1576.75 1366.66 1577.74 1364.35 cv
1578.58 1362.39 1579.22 1360.1 1580.71 1358.67 cv
1587.27 1352.36 1593.99 1346.19 1600.92 1340.25 cv
1602.29 1339.07 1604.8 1339.1 1606.79 1338.58 cv
1607.23 1339.23 1607.66 1339.88 1608.1 1340.54 cv
1605.25 1343.14 1602.76 1346.38 1599.48 1348.25 cv
1587.21 1355.24 1580.09 1365.65 1576.52 1378.02 cv
1571.62 1395 1563.24 1406.43 1559 1423.53 cv
1556.92 1431.93 1559.77 1446.14 1557.75 1454.55 cv
1557.32 1456.32 1555.11 1459.27 1554.09 1459.2 cv
1551.71 1459.04 1549.55 1457.38 1547.3 1456.33 cv
cp
1558.03 1477.78 mo
1553.44 1476.37 1548.42 1476.06 1549.14 1468.64 cv
1553.74 1470.73 1560.22 1469.85 1558.03 1477.78 cv
cp
1560.66 1493.77 mo
1559.95 1494.18 1559.24 1494.6 1558.52 1495.02 cv
1555.34 1490.16 1552.16 1485.3 1548.27 1479.35 cv
1559.98 1479.98 1562.01 1482.84 1560.66 1493.77 cv
cp
1525.85 1436.66 mo
1525.52 1437.25 1525.19 1437.85 1524.86 1438.44 cv
1520.07 1436.46 1513.58 1435.66 1511 1432.15 cv
1508.64 1428.94 1510.53 1422.78 1510.54 1417.07 cv
1517.7 1420.73 1523.31 1423.6 1529.21 1426.62 cv
1527.25 1430.03 1527.38 1435.23 1521.05 1432.45 cv
1522.65 1433.85 1524.25 1435.26 1525.85 1436.66 cv
cp
1524.37 1445.82 mo
1522.92 1445.49 1521.48 1445.16 1519.84 1444.79 cv
1521.51 1447.66 1522.99 1450.22 1524.78 1453.31 cv
1513.2 1451.46 1511.42 1450.47 1511.09 1437.65 cv
1516.31 1439.97 1520.81 1441.97 1525.32 1443.97 cv
1525 1444.59 1524.68 1445.2 1524.37 1445.82 cv
cp
1528.36 1479.99 mo
1518.96 1475.89 1516.97 1473 1517.91 1465.84 cv
1527.54 1465.84 1526.7 1473.2 1528.36 1479.99 cv
cp
1498.8 1411.46 mo
1507.37 1414.19 1508.11 1418.12 1501.31 1427.52 cv
1492.92 1423.37 1496.58 1417.21 1498.8 1411.46 cv
cp
1477.1 1416.25 mo
1476.3 1415.72 1476.89 1412.84 1477.47 1411.21 cv
1478.59 1408.09 1480.17 1405.11 1481.75 1401.66 cv
1484.5 1402.94 1488.07 1404.6 1491.83 1406.35 cv
1490.24 1411.21 1488.79 1415.62 1487.01 1421.04 cv
1483.62 1419.49 1480.07 1418.24 1477.1 1416.25 cv
cp
1484.53 1435.62 mo
1483.14 1436.47 li
1481.74 1433.91 1479.77 1431.49 1479.19 1428.72 cv
1478.93 1427.49 1481.47 1425.55 1482.75 1423.94 cv
1483.26 1424.32 1483.77 1424.71 1484.27 1425.09 cv
1484.36 1428.6 1484.44 1432.11 1484.53 1435.62 cv
cp
1461.46 1409.64 mo
1460.84 1409.43 1460.22 1409.23 1459.61 1409.02 cv
1461.27 1405.52 1462.14 1401.3 1464.79 1398.7 cv
1468.37 1395.18 1472.98 1397.48 1471.76 1401.7 cv
1471.12 1403.93 1470.18 1406.1 1469.11 1409.03 cv
1465.86 1404.66 1463.46 1405.34 1461.46 1409.64 cv
cp
1460.89 1415.62 mo
1464.62 1420.71 1467.3 1424.37 1470.62 1428.89 cv
1459.69 1429 1457.89 1426.66 1460.89 1415.62 cv
cp
1451.78 1425.07 mo
1446.82 1423.45 1442.12 1422.36 1437.96 1420.37 cv
1436.1 1419.48 1434.4 1416.92 1434.2 1414.87 cv
1433.79 1410.62 1434.42 1406.2 1434.68 1400.59 cv
1440.58 1404.15 1446.44 1405.87 1448.96 1409.7 cv
1451.57 1413.68 1450.95 1419.7 1451.78 1425.07 cv
cp
1453.14 1438.92 mo
1445.56 1435.02 1442.61 1433.49 1434.76 1429.45 cv
1436.13 1423.81 1436.13 1423.81 1437.96 1424.08 cv
1445.66 1425.22 1452.88 1432.13 1453.14 1438.92 cv
cp
1402.74 1379.34 mo
1391.32 1374.9 1390.8 1368.5 1395.41 1356.21 cv
1397.3 1351.18 1396.49 1349.06 1391.46 1348.24 cv
1392.2 1346.72 1392.72 1345.64 1393.24 1344.56 cv
1393.03 1344.42 1392.81 1344.28 1392.6 1344.15 cv
1391.45 1345.32 1390.31 1346.49 1388.14 1348.7 cv
1388.72 1345.89 1389.01 1344.46 1389.44 1342.35 cv
1388.18 1343.14 1387.39 1343.37 1387.21 1343.79 cv
1383.94 1351.56 1379.82 1350.89 1376.33 1358.59 cv
1375.23 1361.01 1374.02 1371.53 1371.28 1374.96 cv
1366.37 1364.38 1360.78 1356.3 1369.52 1346.34 cv
1367.66 1347.46 1365.79 1348.58 1362.91 1350.32 cv
1363.79 1346.72 1364.41 1344.2 1365.03 1341.68 cv
1364.49 1341.55 1356.25 1346.73 1354.98 1366.45 cv
1344.8 1354.01 1345.47 1339.45 1348.28 1324.32 cv
1347.4 1324.34 1335.37 1341.49 1330.24 1350.05 cv
1329.5 1350.1 1328.76 1350.16 1328.02 1350.22 cv
1325.06 1340.59 1322.1 1330.95 1319.19 1321.46 cv
1316.87 1328.49 1314.29 1336.33 1311.69 1344.23 cv
1308.29 1340.34 1305.2 1336.85 1302.18 1333.31 cv
1301.8 1332.86 1301.53 1332.12 1301.61 1331.53 cv
1302.93 1321.27 1303.95 1311.08 1310.65 1301.76 cv
1314.37 1296.58 1318.7 1297.41 1322.8 1298.45 cv
1336.58 1301.95 1350.37 1305.5 1363.77 1309.92 cv
1374.91 1313.6 1385.85 1317.97 1396.26 1323.06 cv
1405.88 1327.76 1416.06 1329.2 1426.17 1328.74 cv
1418.32 1345.69 1410.52 1362.53 1402.74 1379.34 cv
cp
1384.5 1378.94 mo
1376.09 1374.16 1383.24 1361.42 1383.86 1361.34 cv
1384.07 1367.16 1384.28 1372.98 1384.5 1378.94 cv
cp
1288.36 1322.83 mo
1287.89 1323.79 1287.63 1324.84 1286.76 1327.29 cv
1283.24 1324.54 1280.23 1322.35 1277.44 1319.92 cv
1275.52 1318.25 1273.91 1316.24 1272.17 1314.38 cv
1265.63 1307.39 1263.05 1307.87 1256.47 1318.24 cv
1250.03 1313.51 1243.64 1308.96 1237.44 1304.18 cv
1234.41 1301.85 1231.78 1299.07 1228.88 1296.58 cv
1223.31 1291.78 1218.87 1292.95 1215.87 1300.29 cv
1202.78 1297.98 1200.35 1282.3 1186.6 1280.75 cv
1193.91 1287.67 1201.22 1294.6 1208.53 1301.52 cv
1207.82 1302.12 1207.12 1302.72 1206.41 1303.32 cv
1195.38 1303.4 1189.17 1297.52 1186.58 1287.18 cv
1186.01 1287.68 1185.45 1288.18 1184.88 1288.68 cv
1185.32 1291.23 1185.75 1293.79 1186.18 1296.34 cv
1185.54 1296.79 1184.9 1297.24 1184.26 1297.68 cv
1180.74 1294.69 1176.72 1292.1 1173.83 1288.63 cv
1168.49 1282.23 1163.96 1275.22 1158.77 1268.71 cv
1157.6 1267.24 1155.08 1266.79 1153.18 1265.86 cv
1152.74 1266.35 1152.3 1266.84 1151.86 1267.33 cv
1156.28 1273.45 1160.71 1279.58 1166.16 1287.12 cv
1163.15 1287.71 1160.44 1289.07 1158.69 1288.42 cv
1153.08 1286.34 1147.04 1284.34 1142.65 1280.73 cv
1138.04 1276.95 1135.03 1271.4 1131.5 1266.5 cv
1127.53 1260.98 1123.95 1255.19 1119.82 1249.79 cv
1118.21 1247.69 1115.55 1246.35 1112.19 1245.63 cv
1112.52 1246.71 1112.48 1248.21 1113.24 1248.8 cv
1119.4 1253.64 1118.28 1260.91 1118.98 1267.52 cv
1119.15 1269.18 1118.14 1271.03 1117.67 1272.79 cv
1115.77 1272.23 1113.12 1272.26 1112.11 1271.03 cv
1107.51 1265.38 1103.42 1259.35 1099.06 1253.53 cv
1094.6 1247.57 1090.03 1241.69 1085.46 1235.71 cv
1096.57 1222.47 1106.55 1223.62 1120.12 1229.6 cv
1129.95 1233.92 1140.67 1236.63 1151.01 1240.03 cv
1167.63 1245.52 1184.18 1251.19 1200.92 1256.39 cv
1215.93 1261.05 1231.21 1265.08 1246.29 1269.59 cv
1261.14 1274.04 1275.89 1278.74 1290.68 1283.35 cv
1296.57 1285.18 1302.43 1287.09 1308.32 1288.92 cv
1312.11 1290.1 1313.23 1293.07 1309.49 1294.73 cv
1296.48 1300.52 1293.5 1312.27 1288.36 1322.83 cv
cp
1270.38 1327.2 mo
1261.12 1324.63 1261.11 1324.65 1264.12 1314.09 cv
1269.96 1319.4 1279.74 1329.6 1279.42 1329.97 cv
1276.41 1329.04 1273.42 1328.05 1270.38 1327.2 cv
cp
1268.79 1360.34 mo
1261.64 1359.22 1259.2 1356.58 1261.65 1351.15 cv
1264.79 1353.83 1267.64 1356.27 1270.49 1358.7 cv
1269.92 1359.25 1269.35 1359.8 1268.79 1360.34 cv
cp
1255.47 1351.79 mo
1251 1348.04 1246.52 1344.28 1242.05 1340.53 cv
1242.51 1339.99 1252.8 1345.97 1257.49 1349.5 cv
1256.82 1350.27 1256.15 1351.03 1255.47 1351.79 cv
cp
1256.81 1369.21 mo
1256.26 1369.4 1253.93 1366.92 1254.21 1366.13 cv
1254.86 1364.3 1256.35 1361.92 1257.99 1361.36 cv
1259.16 1360.96 1261.14 1363.17 1263.96 1365 cv
1260.75 1366.99 1258.9 1368.49 1256.81 1369.21 cv
cp
1218.83 1308.85 mo
1220.76 1304.97 1222.12 1302.26 1223.91 1298.67 cv
1229.59 1303.57 1240.44 1314.87 1240.05 1315.5 cv
1232.47 1313.12 1224.88 1310.75 1218.83 1308.85 cv
cp
1247.91 1362.62 mo
1239.46 1358.69 1231.29 1354.27 1222.89 1349.9 cv
1232.08 1340.14 1235.79 1340.05 1246.81 1349.43 cv
1240.84 1348.09 1230.52 1346.94 1230.24 1347.46 cv
1236.62 1350.43 1243.02 1353.36 1249.35 1356.41 cv
1250.74 1357.08 1251.87 1358.21 1253.12 1359.13 cv
1251.34 1360.37 1248.76 1363.01 1247.91 1362.62 cv
cp
1245.06 1371.5 mo
1242.49 1375.77 1239.08 1379.63 1235.71 1384.02 cv
1234.06 1382.49 1233.07 1381.59 1232.76 1381.29 cv
1224.66 1387.39 1216.95 1393.21 1209.67 1398.7 cv
1208.16 1398.02 1207.62 1397.96 1207.44 1397.67 cv
1202.05 1388.66 1202.15 1388.74 1194.36 1396.91 cv
1190.29 1401.18 1185.96 1405.27 1181.43 1409.09 cv
1179.55 1410.67 1176.82 1411.34 1174.42 1412.46 cv
1179.74 1402.1 1188.36 1381.53 1187.61 1381.09 cv
1186.53 1381.9 1185.03 1382.51 1184.44 1383.54 cv
1183.03 1386.03 1181.42 1388.66 1180.99 1391.32 cv
1178.67 1405.7 1165.63 1411.27 1155.6 1420.17 cv
1150.51 1413.83 1146.97 1416.37 1143.13 1421.62 cv
1140.14 1425.71 1136.66 1429.81 1132.55 1432.81 cv
1129.6 1434.95 1125.25 1435.27 1121.48 1435.09 cv
1132.6 1425.58 1153.68 1405.09 1153.1 1404.34 cv
1149.94 1406.6 1145.86 1408.32 1143.77 1411.23 cv
1137.47 1420.03 1129.4 1426.45 1119.61 1431.27 cv
1116.71 1432.71 1114.42 1435.36 1111.58 1436.98 cv
1102.43 1442.19 1092.79 1446.48 1082.41 1447.79 cv
1077.89 1448.37 1073.25 1446.49 1068.63 1446.65 cv
1065.58 1446.75 1062.3 1448.17 1059.4 1449.58 cv
1049.15 1454.56 1038.86 1456.81 1027.6 1455.37 cv
1023.33 1454.83 1018.26 1457.32 1013.7 1458.91 cv
1003.95 1462.31 994.312 1466.05 984.597 1469.56 cv
982.983 1470.15 981.215 1470.27 979.762 1470.56 cv
979.824 1467.53 980.939 1463.87 979.659 1462.85 cv
978.043 1461.55 974.409 1461.91 971.761 1462.41 cv
963.226 1464.02 954.75 1466.05 946.24 1467.84 cv
944.632 1468.18 942.966 1468.15 941.849 1468.24 cv
943.03 1464.51 944.062 1461.23 945.095 1457.96 cv
941.429 1458.74 937.364 1458.76 934.163 1460.43 cv
913.873 1471.01 892.187 1474.82 870.315 1475.26 cv
858.257 1475.51 846.4 1472.25 834.412 1470.75 cv
832.056 1470.46 829.515 1471.09 827.066 1471.17 cv
824.347 1471.25 821.481 1471.66 818.946 1471.09 cv
808.575 1468.77 798.311 1466.11 787.992 1463.62 cv
786.314 1463.22 784.329 1462.35 782.878 1462.87 cv
775.197 1465.64 767.878 1464.18 761.077 1462.07 cv
756.589 1460.67 753.462 1456.07 749.001 1454.49 cv
743.848 1452.66 742.528 1449.25 742.093 1444.83 cv
741.576 1439.59 744.084 1438.43 749.514 1439.3 cv
757.028 1440.5 764.853 1440.45 771.972 1440.91 cv
774.702 1446.18 777.244 1451.51 780.266 1456.56 cv
780.834 1457.51 783.319 1457.34 783.605 1457.4 cv
782.293 1453.25 780.897 1448.99 779.613 1444.7 cv
778.645 1441.47 780.003 1440.27 783.254 1441.51 cv
791.092 1444.5 798.877 1445.12 807.784 1443.06 cv
813.798 1441.67 820.417 1443.75 826.792 1444.07 cv
828.976 1444.18 831.299 1443.96 833.457 1443.41 cv
838.128 1442.22 840.673 1443.23 841.018 1448.11 cv
841.151 1449.99 842.631 1451.7 843.964 1453.21 cv
845.907 1441.04 846.03 1441.61 859.289 1440.69 cv
874.833 1439.61 890.376 1437.2 905.921 1435.4 cv
906.97 1435.28 908.034 1435.43 908.992 1435.45 cv
906.53 1437.98 904.205 1440.38 901.88 1442.78 cv
902.388 1443.43 902.895 1444.08 903.402 1444.73 cv
907.776 1442.35 913.009 1440.75 916.345 1437.44 cv
923.494 1430.34 932.132 1430.78 940.882 1430.35 cv
933.981 1433 927.08 1435.64 920.178 1438.29 cv
920.251 1438.6 920.322 1438.91 920.395 1439.22 cv
930.305 1436.7 940.215 1434.17 950.534 1431.54 cv
949.966 1434.42 949.615 1436.2 948.986 1439.39 cv
960.607 1436.21 971.429 1433.26 982.25 1430.3 cv
982.464 1430.7 982.678 1431.09 982.892 1431.49 cv
978.974 1434.18 975.056 1436.88 971.139 1439.57 cv
971.335 1440.02 976.724 1439.64 978.966 1438.5 cv
988.033 1433.89 999.213 1430.84 1005.44 1423.91 cv
1013.29 1415.18 1031.86 1414.23 1032.34 1414.96 cv
1022.05 1421.61 1002.58 1436.82 1003.13 1437.78 cv
1008.29 1435.54 1013.61 1433.59 1018.59 1431 cv
1032.29 1423.85 1045.74 1416.2 1059.53 1409.23 cv
1064.28 1406.83 1069.73 1405.85 1074.86 1404.22 cv
1075.29 1404.97 1075.71 1405.73 1076.14 1406.48 cv
1070.79 1409.75 1065.3 1412.81 1060.18 1416.37 cv
1058.29 1417.69 1057.26 1420.18 1055.84 1422.14 cv
1057.96 1422.38 1060.39 1423.42 1062.16 1422.72 cv
1071.98 1418.82 1081.74 1414.73 1091.31 1410.24 cv
1098.46 1406.89 1105 1401.99 1112.34 1399.33 cv
1118.74 1397.01 1125.97 1397.32 1132.67 1395.64 cv
1147.91 1391.84 1163.23 1388.18 1177.11 1380.02 cv
1180.71 1377.9 1184.72 1376.46 1188.54 1374.71 cv
1188.38 1374.16 1179.07 1375.79 1174.58 1377.15 cv
1174.47 1376.76 1192.09 1366.76 1200.94 1362.04 cv
1204.92 1359.92 1219.35 1353.91 1220.07 1354.95 cv
1221.49 1357 1221.58 1360.36 1221 1363.02 cv
1220.81 1363.9 1216.9 1364.43 1214.65 1364.86 cv
1213.35 1365.12 1211.97 1364.86 1210.13 1365.73 cv
1212.7 1367.02 1215.26 1368.3 1218.66 1370 cv
1217.42 1374.44 1216.07 1379.26 1214.73 1384.08 cv
1215.28 1384.27 1220.76 1376.32 1223.29 1371.5 cv
1225.44 1371.55 1228.21 1371.6 1230.99 1371.65 cv
1224.98 1368.31 1222.29 1364.34 1227.13 1357.62 cv
1232.6 1360.26 1238.46 1362.77 1243.86 1365.94 cv
1245.12 1366.68 1245.87 1370.17 1245.06 1371.5 cv
cp
967.898 1472.6 mo
960.562 1473.95 953.128 1474.55 945.731 1475.42 cv
945.64 1474.85 945.548 1474.28 945.457 1473.7 cv
949.808 1472.06 954.083 1470.08 958.535 1468.88 cv
962.787 1467.72 967.224 1467.38 971.578 1466.69 cv
972.011 1467.07 972.443 1467.45 972.875 1467.84 cv
971.224 1469.49 969.719 1472.27 967.898 1472.6 cv
cp
920.532 1471.14 mo
927.398 1468.07 932.699 1465.7 938.553 1463.08 cv
936.855 1472.45 935.43 1473.1 920.532 1471.14 cv
cp
933.989 1476.06 mo
923.598 1476.76 913.206 1477.46 902.816 1478.16 cv
902.794 1477.24 923.611 1474.44 934.042 1473.96 cv
934.024 1474.66 934.006 1475.36 933.989 1476.06 cv
cp
786.176 1476.48 mo
798.368 1473.59 798.368 1473.59 801.642 1477.53 cv
796.206 1477.16 791.191 1476.82 786.176 1476.48 cv
cp
734.115 1443.68 mo
735.864 1445.71 737.613 1447.75 739.363 1449.78 cv
738.984 1450.44 738.605 1451.1 738.226 1451.75 cv
730.885 1450.5 723.542 1449.25 716.207 1447.98 cv
714.924 1447.75 713.7 1447.3 712.412 1447.1 cv
705.71 1446.09 698.917 1445.24 697.234 1436.1 cv
694.895 1439.22 693.644 1440.89 692.104 1442.94 cv
684.025 1439.79 673.715 1441.03 667.629 1433.11 cv
668.465 1431.03 669.324 1428.9 670.251 1426.59 cv
666.491 1426.89 663.628 1427.39 660.878 1427.18 cv
659.93 1427.11 659.267 1425.26 658.474 1424.22 cv
659.862 1423.32 661.294 1421.71 662.628 1421.69 cv
664.737 1421.67 666.861 1422.55 668.838 1423.32 cv
676.745 1426.44 684.371 1432.17 692.524 1432.28 cv
705.192 1432.45 714.346 1438.92 725.235 1442.09 cv
726.245 1442.38 727.479 1442.1 728.609 1442.09 cv
722.312 1439 716.014 1435.92 709.716 1432.83 cv
709.914 1432.33 710.112 1431.84 710.309 1431.34 cv
719.68 1432.82 729.051 1434.3 739.147 1435.9 cv
737.375 1439.19 740.93 1443.88 734.115 1443.68 cv
cp
725.798 1453.56 mo
734.82 1450.63 740.11 1455.51 745.611 1459.84 cv
738.462 1459.62 730.526 1461.19 725.798 1453.56 cv
cp
717.308 1459.3 mo
712.081 1455.7 708.099 1452.95 704.117 1450.21 cv
704.802 1449.53 705.487 1448.86 706.173 1448.19 cv
710.6 1450.24 718.551 1448.13 717.308 1459.3 cv
cp
694.743 1452.54 mo
693.088 1452.75 690.957 1453.67 689.863 1453.05 cv
685.712 1450.7 681.896 1447.85 677.955 1445.19 cv
678.412 1444.52 678.869 1443.85 679.327 1443.18 cv
683.954 1444.43 688.748 1445.34 693.099 1447.12 cv
694.319 1447.62 694.231 1450.66 694.743 1452.54 cv
cp
692.928 1428.24 mo
692.614 1428.99 692.299 1429.75 691.984 1430.5 cv
684.797 1427.09 677.609 1423.69 669.448 1419.82 cv
681.351 1416.65 684.425 1427.45 692.928 1428.24 cv
cp
735.751 1431.85 mo
729.025 1429.67 723.948 1428.02 718.499 1426.26 cv
724.368 1423.13 730.6 1424.84 735.751 1431.85 cv
cp
1101.19 1269.86 mo
1100.65 1270.21 1100.11 1270.56 1099.56 1270.92 cv
1097.26 1267.43 1094.95 1263.95 1093.68 1262.02 cv
1090.96 1262.19 1088.75 1262.93 1088.14 1262.28 cv
1083.96 1257.83 1079.68 1253.38 1076.28 1248.38 cv
1071.8 1241.77 1081.05 1241.72 1082.32 1236.48 cv
1089.81 1248.25 1098.47 1257.43 1101.19 1269.86 cv
cp
1072.4 1262.19 mo
1072.04 1262.82 1062.4 1260.34 1057.16 1258.14 cv
1062.79 1254.27 1067.45 1251.07 1072.62 1247.51 cv
1075.91 1252.07 1079.98 1257.71 1085.14 1264.87 cv
1078.28 1261.28 1072.94 1258.48 1067.59 1255.68 cv
1067.13 1256.43 1070.34 1260.76 1072.4 1262.19 cv
cp
960.429 1286.8 mo
965.297 1286.89 970.165 1286.99 974.854 1287.08 cv
972.765 1290.18 972.765 1290.18 960.429 1286.8 cv
cp
870.358 1336.44 mo
882.204 1332.87 893.483 1329.47 906.18 1325.64 cv
892.367 1338.33 874.255 1344.06 870.358 1336.44 cv
cp
774.239 1372.75 mo
774.173 1371.96 774.108 1371.16 774.042 1370.37 cv
779.733 1369.43 785.422 1368.49 791.112 1367.55 cv
791.198 1368.65 791.285 1369.75 791.372 1370.85 cv
785.661 1371.48 779.95 1372.12 774.239 1372.75 cv
cp
724.506 1387.7 mo
724.435 1386.92 724.365 1386.15 724.295 1385.37 cv
733.415 1379.46 750.764 1377.2 758.957 1382.15 cv
746.4 1384.17 735.453 1385.94 724.506 1387.7 cv
cp
758.288 1415.29 mo
758.516 1414.58 775.075 1416.68 783.126 1418.45 cv
782.866 1419.25 782.605 1420.05 782.344 1420.86 cv
774.325 1419 766.307 1417.15 758.288 1415.29 cv
cp
772.031 1432.1 mo
781.433 1433.04 790.997 1433.11 800.474 1433.66 cv
803.282 1433.82 806.076 1434.93 808.811 1434.59 cv
814.848 1433.83 820.916 1431.47 826.84 1431.47 cv
839.398 1431.47 851.879 1432.52 864.373 1433.26 cv
865.736 1433.34 866.981 1434.25 869.259 1435.18 cv
846.811 1444.56 755.154 1437.84 747.207 1428.08 cv
756.061 1429.56 763.959 1431.3 772.031 1432.1 cv
cp
911.461 1428.06 mo
911.612 1429.08 911.763 1430.1 911.914 1431.12 cv
903.275 1432.62 894.637 1434.13 885.998 1435.64 cv
885.924 1435 885.85 1434.36 885.776 1433.72 cv
894.338 1431.83 902.899 1429.95 911.461 1428.06 cv
cp
1211.57 1352.89 mo
1184.57 1369.05 1157.06 1383.99 1125.23 1388.56 cv
1126.73 1387.88 1128.24 1387.24 1129.73 1386.53 cv
1134.54 1384.25 1139.27 1381.72 1144.2 1379.73 cv
1146.88 1378.65 1150.02 1378.78 1152.78 1377.8 cv
1159.5 1375.41 1166.35 1373.17 1172.73 1370.01 cv
1185.28 1363.8 1211.02 1352.08 1211.57 1352.89 cv
cp
1122.87 1278.93 mo
1122.71 1274.79 1122.56 1271.16 1122.41 1267.53 cv
1122.83 1267.26 1123.25 1266.99 1123.68 1266.73 cv
1126.55 1269.99 1129.43 1273.24 1132.77 1277.03 cv
1128.88 1277.78 1125.98 1278.33 1122.87 1278.93 cv
cp
1155.27 1314.68 mo
1165.92 1317.46 1176.22 1321.24 1186.88 1324.03 cv
1197.56 1326.82 1208.49 1328.93 1219.3 1331.36 cv
1219.7 1331.45 1220.03 1331.77 1221.41 1332.59 cv
1215.23 1335.6 1209.69 1338.62 1203.91 1341.06 cv
1189.12 1347.3 1174.34 1353.6 1159.35 1359.28 cv
1140.42 1366.45 1121.45 1373.61 1102.2 1379.69 cv
1083.58 1385.57 1064.62 1390.33 1045.72 1395.11 cv
1027.01 1399.85 960.327 1413.55 945.65 1414.04 cv
921.381 1414.86 897.072 1416.24 872.856 1416.34 cv
853.753 1416.41 834.621 1415.7 815.762 1413.9 cv
793.565 1411.79 771.648 1408.12 749.609 1405.12 cv
745.272 1404.53 740.928 1403.97 736.588 1403.4 cv
773.488 1396.4 808.453 1383.01 843.838 1371.38 cv
855.986 1367.39 867.72 1361.96 879.588 1357.06 cv
893.393 1351.35 907.368 1345.98 920.855 1339.58 cv
940.871 1330.08 960.792 1320.3 980.247 1309.71 cv
996.225 1301.02 1011.44 1290.95 1027.08 1281.63 cv
1028.45 1280.81 1030.71 1280.49 1032.18 1280.91 cv
1056.62 1287.99 1080.89 1295.51 1105.42 1302.33 cv
1121.87 1306.91 1138.73 1310.35 1155.27 1314.68 cv
cp
1217.43 763.691 mo
1216.23 760.193 1215.01 756.623 1213.32 751.661 cv
1218.83 753.156 1222.38 753.895 1225.69 755.128 cv
1227.05 755.632 1227.9 757.206 1228.98 758.293 cv
1227.84 759.228 1226.82 760.462 1225.53 761.032 cv
1223.29 762.018 1220.87 762.593 1217.43 763.691 cv
cp
626.485 1385.56 mo
625.336 1388.36 623.904 1390.69 623.523 1393.1 cv
623.149 1395.47 623.846 1397.91 624.249 1402.18 cv
612.471 1397.02 602.258 1392.54 589.818 1387.1 cv
592.239 1393.35 594.068 1398.08 595.717 1402.34 cv
578.261 1407.16 563.375 1404.63 553.154 1389.62 cv
552.579 1390.27 552.005 1390.92 551.431 1391.57 cv
552.532 1393.65 553.304 1395.99 554.82 1397.73 cv
556.542 1399.72 558.928 1401.16 561.961 1403.59 cv
552.299 1407.31 545.957 1403.35 539.577 1400.01 cv
537.339 1398.84 535.772 1396.59 533.512 1395.48 cv
532.018 1394.75 529.835 1395.16 527.96 1395.06 cv
527.82 1396.56 527.647 1398.06 527.547 1399.56 cv
527.406 1401.68 527.319 1403.8 527.21 1405.92 cv
524.548 1405.66 521.231 1406.23 519.351 1404.97 cv
514.445 1401.67 510.189 1397.55 505.63 1393.8 cv
504.268 1392.68 502.762 1391.72 499.793 1391.49 cv
500.367 1396.67 500.941 1401.86 501.527 1407.16 cv
483.991 1411.74 485.003 1395.22 475.417 1389.78 cv
475.961 1395.04 476.504 1400.3 477.047 1405.56 cv
476.494 1405.99 475.941 1406.42 475.389 1406.86 cv
471.56 1404.23 467.478 1401.87 463.973 1398.91 cv
460.508 1395.98 457.624 1392.44 454.485 1389.16 cv
453.741 1389.64 453.322 1401.11 453.958 1407.37 cv
442.222 1405.18 436.798 1396.57 427.5 1389.8 cv
428.25 1396.59 428.818 1401.73 429.394 1406.95 cv
424.039 1408.9 420.778 1407.55 417.897 1404.03 cv
412.927 1397.96 407.569 1392.18 402.374 1386.28 cv
401.571 1386.65 401.612 1397.68 402.443 1402.88 cv
392.479 1403.78 389.005 1401.82 387.144 1392.54 cv
385.891 1386.28 386.352 1379.6 386.079 1373.8 cv
398.946 1373.43 410.055 1372.69 421.073 1372.88 cv
434.324 1373.12 447.461 1374.69 460.721 1374.62 cv
468.608 1374.57 476.654 1371.81 484.603 1371.42 cv
498.204 1370.76 511.782 1371.07 525.379 1370.81 cv
530.74 1370.71 536.151 1370.49 541.496 1369.76 cv
562.559 1366.9 583.699 1364.52 604.629 1360.61 cv
626.075 1356.6 647.523 1355.97 668.955 1353.64 cv
682.025 1352.21 694.97 1347.87 707.955 1344.75 cv
729.554 1339.57 751.266 1334.85 772.692 1328.93 cv
790.848 1323.91 808.629 1317.33 826.647 1311.69 cv
834.749 1309.16 843.166 1307.71 851.189 1304.96 cv
865.015 1300.22 878.699 1295 892.345 1289.71 cv
917.871 1279.82 941.704 1266.92 963.679 1250.52 cv
970.816 1245.19 979.152 1241.39 986.721 1236.57 cv
997.028 1230 1007.3 1223.34 1017.27 1216.3 cv
1028.26 1208.54 1039.44 1200.89 1049.55 1192.15 cv
1063.44 1180.13 1076.39 1167.12 1089.76 1154.55 cv
1090.41 1153.93 1091.21 1153.46 1091.95 1152.92 cv
1092.43 1153.26 1078.71 1172.18 1070.36 1182.54 cv
1073.64 1179.89 1075.88 1178.29 1077.85 1176.44 cv
1079.98 1174.43 1082.2 1172.38 1083.79 1170.02 cv
1093.55 1155.54 1107.17 1144.26 1119.14 1131.61 cv
1143.18 1106.18 1168.07 1081.34 1186.54 1051.75 cv
1190.71 1045.07 1196.49 1039.23 1201.46 1032.95 cv
1202.49 1031.64 1203.18 1030.1 1203.18 1028.13 cv
1201.11 1030.63 1199.05 1033.12 1196.98 1035.61 cv
1196.5 1035.35 1196.01 1035.09 1195.52 1034.83 cv
1201.71 1024.4 1204 1012.77 1212.42 1002.73 cv
1218.61 995.346 1220.93 985.221 1225.47 976.52 cv
1232.36 963.3 1234.33 948.914 1239.75 935.276 cv
1245.54 920.707 1247.79 905.217 1247.88 889.636 cv
1247.92 882.608 1251.8 875.387 1253.42 868.183 cv
1254.15 864.945 1253.26 861.517 1253.69 858.205 cv
1254.57 851.497 1255.85 844.809 1256.87 838.706 cv
1256.91 838.667 1256.3 839.328 1254.73 841.044 cv
1254.2 827.078 1253.65 814.097 1253.23 801.104 cv
1252.72 785.589 1250.61 770.706 1238.81 759.426 cv
1238.77 759.412 1238.71 759.387 1238.67 759.372 cv
1241.74 773.876 1245.69 788.216 1247.64 802.93 cv
1250.04 821.11 1249.33 839.539 1245.61 858.183 cv
1243.66 867.973 1244.97 878.111 1244.56 888.099 cv
1244.21 896.723 1244.52 905.495 1238.35 913.443 cv
1238.71 909.748 1239.33 906.039 1239.39 902.362 cv
1239.6 887.933 1239.5 873.52 1239.78 859.088 cv
1239.89 853.481 1241.46 847.726 1240.99 842.238 cv
1240.24 833.547 1238.21 825.051 1236.97 816.422 cv
1235.8 808.189 1234.7 799.925 1234.06 791.606 cv
1233.77 787.787 1235 783.771 1234.85 779.915 cv
1234.81 778.698 1232.16 776.523 1231.31 776.805 cv
1222.25 779.815 1223.75 772.188 1221.76 769.849 cv
1226.55 765.603 1230.63 761.819 1234.98 758.347 cv
1235.53 757.905 1237.36 758.94 1238.67 759.372 cv
1238.66 759.326 1238.65 759.282 1238.64 759.236 cv
1238.7 759.297 1238.75 759.365 1238.81 759.426 cv
1238.81 759.427 li
1236.64 753.736 1230.92 742.804 1230.25 743.049 cv
1231.09 746.004 1231.94 748.959 1232.91 752.311 cv
1220.3 747.228 1204.59 747.49 1198.36 732.775 cv
1198.82 732.493 1199.8 732.105 1200.47 731.437 cv
1202.04 729.874 1204.95 727.592 1204.61 726.655 cv
1203.91 724.727 1201.42 722.08 1199.68 722.207 cv
1191.38 722.815 1186.25 718.982 1181.94 713.362 cv
1179.54 710.23 1175.96 707.509 1180.78 702.993 cv
1181.39 702.427 1180.52 699.093 1179.41 698.495 cv
1176.68 697.037 1173.42 696.375 1170.34 695.491 cv
1162.73 693.308 1154.79 691.626 1152.96 682.539 cv
1152.72 681.321 1150.98 679.797 1149.67 679.626 cv
1141.94 678.625 1135.83 675.089 1130.63 670.109 cv
1129.45 668.983 1128.95 667.222 1128.13 665.754 cv
1129.91 665.061 1131.86 663.587 1133.44 663.801 cv
1143.61 665.186 1153.99 666.194 1162.28 672.396 cv
1164.07 673.738 1165.97 674.955 1169.02 675.095 cv
1167.71 673.618 1166.63 671.853 1165.03 670.708 cv
1151.19 660.767 1135.29 654.639 1118.31 650.435 cv
1105.07 647.16 1092.02 643.356 1078.83 639.947 cv
1060.81 635.29 1042.34 633.288 1023.16 635.515 cv
1020.3 635.847 1017.4 635.457 1014.52 635.401 cv
1013.99 634.653 1013.47 633.905 1012.94 633.158 cv
1014.22 632.858 1016.07 632.935 1016.66 632.173 cv
1017.61 630.957 1018.58 628.559 1017.99 627.8 cv
1017.2 626.785 1014.51 626.023 1013.35 626.6 cv
1004.34 631.084 996.055 630.625 987.995 626.068 cv
986.987 625.497 985.05 625.335 984.04 625.886 cv
975.061 630.782 968.219 624.026 960.201 623.67 cv
947.283 623.095 934.508 621.344 921.581 620.874 cv
914.838 620.629 912.537 624.038 913.915 630.861 cv
911.035 631.263 908.232 631.916 905.456 631.996 cv
895.793 632.274 885.547 634.108 876.669 631.962 cv
869.341 630.19 863.531 633.428 857.102 633.542 cv
851.348 633.646 845.683 632.378 839.947 631.9 cv
838.022 631.74 836.002 632.147 834.026 632.295 cv
834.588 633.869 835.151 635.443 835.775 637.186 cv
824.741 638.231 813.084 637.874 802.12 640.721 cv
786.026 644.9 769.641 644.237 753.664 648.5 cv
745.648 650.639 743.754 652.526 745.028 659.176 cv
729.101 666.599 712.89 668.445 696.339 663.383 cv
695.98 663.977 695.62 664.571 695.26 665.165 cv
696.17 667.685 697.078 670.205 698.35 673.729 cv
687.248 676.118 675.796 678.582 663.671 681.191 cv
665.709 683.784 667.235 685.724 669.181 688.2 cv
662.779 690.222 657.403 693.488 650.474 691.044 cv
642.995 688.405 633.547 695.516 631.8 703.806 cv
631.562 704.936 629.591 706.297 628.188 706.762 cv
622.223 708.738 616.062 710.107 610.19 712.318 cv
606.625 713.66 602.1 714.604 601.891 719.96 cv
601.844 721.176 599.317 722.602 597.77 723.722 cv
585.057 732.919 572.501 742.341 559.481 751.108 cv
553.225 755.32 545.905 757.99 539.381 761.873 cv
534.714 764.649 528.159 766.405 529.716 774.136 cv
529.957 775.331 524.973 777.693 522.583 779.71 cv
521.224 780.857 519.301 782.453 519.29 783.747 cv
519.277 785.494 520.855 787.145 522.329 789.932 cv
520.19 791.394 517.003 793.575 512.939 796.356 cv
512.969 796.205 512.627 797.902 512.285 799.599 cv
510.793 799.313 509.301 799.027 508.051 798.787 cv
499.517 807.782 490.834 816.998 482.06 826.135 cv
479.954 828.33 479.181 829.765 480.349 833.091 cv
482.135 838.176 477.179 838.987 472.556 838.929 cv
475.741 842.599 476.053 845.198 470.503 846.496 cv
465.961 847.559 463.69 849.532 468.222 853.681 cv
463.256 857.525 458.421 861.268 453.108 865.382 cv
459.068 870.199 456.128 873.377 450.427 877.184 cv
444.783 880.953 440.05 886.024 434.325 891.044 cv
436.922 893.374 438.665 894.457 439.689 895.998 cv
440.644 897.433 441.855 899.871 441.18 900.976 cv
438.346 905.611 434.988 910.01 431.543 914.302 cv
428.994 917.478 425.813 920.135 428.699 924.484 cv
429.379 925.508 428.197 927.94 427.486 929.599 cv
421.685 943.121 415.822 956.624 409.91 970.11 cv
408.178 974.059 406.229 977.936 404.183 982.261 cv
402.704 981.555 401.531 980.995 401.493 980.977 cv
400.276 988.173 398.57 995.472 397.958 1002.78 cv
397.475 1008.53 394.872 1011.12 388.592 1011.07 cv
400.794 1038.4 390.368 1061.75 368.998 1084.7 cv
369.378 1077.29 372.765 1040.64 373.502 1028.6 cv
373.982 1020.77 372.818 1012.97 373.273 1005.13 cv
373.63 999.013 374.606 992.691 376.602 986.77 cv
381.422 972.476 387.065 958.383 392.205 944.164 cv
393.043 941.848 393.01 939.3 392.168 936.664 cv
388.272 947.095 384.376 957.528 380.481 967.959 cv
379.896 967.903 379.898 957.32 381.702 952.412 cv
385.387 942.384 390.271 932.68 393.992 922.66 cv
397.07 914.373 398.354 905.534 401.97 897.473 cv
405.35 889.942 410.953 883.206 415.165 875.925 cv
416.768 873.155 417.413 869.873 418.168 866.774 cv
420.961 855.311 428.916 846.787 436.843 838.058 cv
443.979 830.202 450.471 821.821 457.07 813.551 cv
460.712 808.987 463.702 803.959 467.491 799.515 cv
475.454 790.176 483.239 780.612 492.059 772.027 cv
500.183 764.119 509.548 757.351 518.397 750.117 cv
528.116 742.171 537.888 734.286 547.605 726.339 cv
562.031 714.542 576.259 702.626 592.799 693.405 cv
604 687.16 614.164 679.113 624.989 672.167 cv
634.4 666.13 643.999 660.356 653.698 654.777 cv
657.514 652.583 661.74 650.88 665.957 649.66 cv
667.837 649.116 670.154 650.319 673.461 650.959 cv
680.081 647.748 688.053 643.804 696.091 640.005 cv
702.441 637.004 709.666 636.114 714.846 630.215 cv
716.444 628.395 721.369 629.496 724.525 628.444 cv
734.25 625.198 743.772 621.254 753.546 618.203 cv
758.205 616.749 763.275 616.871 768.12 615.978 cv
777.587 614.232 787.004 611.567 796.487 610.634 cv
803.698 609.925 810.951 611.674 818.235 611.637 cv
823.668 611.61 829.402 611.298 834.614 609.689 cv
852.987 604.018 871.597 604.964 890.11 603.217 cv
904.143 601.894 918.168 600.163 932.201 599.082 cv
936.582 598.745 941.009 599.801 945.358 600.454 cv
961.397 602.86 977.412 605.365 993.437 607.83 cv
993.657 607.864 993.926 607.793 994.106 607.881 cv
1016.21 618.669 1042.56 617.008 1065.55 625.326 cv
1070.91 627.265 1077.29 627.082 1083.24 627.692 cv
1116.33 631.085 1146.47 639.427 1172.18 660.042 cv
1191.66 675.654 1211.92 690.201 1228.41 708.828 cv
1240.18 722.114 1248.18 737.634 1254.81 753.692 cv
1260.41 767.258 1263.76 781.793 1268.83 795.857 cv
1268.53 788.022 li
1268.82 787.886 1269.11 787.75 1269.4 787.614 cv
1270.6 790.375 1272.4 793.004 1272.91 795.921 cv
1276.12 814.335 1282.36 832.219 1279.82 851.684 cv
1279.52 853.931 1279.58 856.655 1280.68 858.431 cv
1285.58 866.319 1280.26 871.513 1274.69 876.837 cv
1273.09 878.37 1271.71 880.113 1270.23 881.76 cv
1271.27 883.219 li
1274.64 881.299 1278.01 879.378 1282.2 876.989 cv
1281.44 884.763 1282.32 892.028 1279.68 898.129 cv
1277.18 903.907 1270.99 908.465 1265.67 914.402 cv
1269.29 914.839 1271.62 915.12 1274.58 915.479 cv
1274.65 929.544 1269.35 941.1 1254.04 948.243 cv
1254.55 948.739 1255.06 949.235 1255.57 949.731 cv
1258.46 949.552 1261.35 949.373 1265.15 949.139 cv
1260.88 957.748 1260.74 967.443 1252.45 974.256 cv
1251.65 974.91 1251.53 977.061 1251.94 978.2 cv
1255.08 987.072 1252.32 994.245 1243.65 999.391 cv
1241.32 1000.78 1238.92 1002.2 1236.94 1004 cv
1235.38 1005.41 1234.42 1007.41 1233.19 1009.16 cv
1234.93 1009.96 1236.61 1010.89 1238.42 1011.53 cv
1239.57 1011.95 1240.91 1011.94 1242.85 1013.64 cv
1237.62 1016.81 1232.32 1019.88 1227.18 1023.19 cv
1223.54 1025.53 1219.94 1027.99 1216.7 1030.8 cv
1215.38 1031.94 1214.56 1034.15 1214.49 1035.84 cv
1214.45 1036.69 1216.75 1038.33 1217.72 1038.1 cv
1219.76 1037.63 1223.16 1036.23 1223.3 1035.09 cv
1224.35 1026.61 1232.81 1027.15 1237.94 1023.41 cv
1234.13 1031.95 1232.06 1041.33 1223.87 1047.4 cv
1216.17 1053.1 1207.85 1058.02 1199.8 1063.28 cv
1200.16 1063.99 1200.52 1064.69 1200.88 1065.39 cv
1205.61 1065.03 1210.34 1064.66 1216.49 1064.19 cv
1214.14 1067.63 1213.07 1070.72 1210.87 1072.13 cv
1202.4 1077.57 1200.12 1086.26 1196.43 1094.07 cv
1193.12 1101.06 1187.23 1103.99 1180.49 1106.38 cv
1175.52 1108.13 1170.59 1110 1165.65 1111.82 cv
1165.8 1112.59 1165.96 1113.36 1166.11 1114.12 cv
1170.41 1115.12 1174.7 1116.11 1180.43 1117.44 cv
1177.87 1119.9 1176.46 1121.91 1174.52 1122.98 cv
1167.42 1126.93 1160.06 1130.45 1152.96 1134.41 cv
1150.93 1135.54 1149.44 1137.62 1147.7 1139.27 cv
1149.88 1139.3 1152.07 1139.43 1154.25 1139.32 cv
1155.06 1139.28 1155.89 1138.7 1158.51 1137.62 cv
1156.34 1140.43 1155.37 1142.17 1153.94 1143.46 cv
1141.88 1154.36 1128.77 1163.35 1112.21 1166.2 cv
1110.36 1166.52 1107.39 1170.48 1107.64 1171.14 cv
1112.61 1170.39 1117.59 1169.63 1123.78 1168.69 cv
1123.09 1170.91 1123.06 1173.16 1121.86 1174.48 cv
1112.99 1184.26 1103.58 1193.35 1089.07 1194 cv
1088.17 1194.04 1087.12 1193.94 1086.41 1194.35 cv
1084.3 1195.57 1082.33 1197.01 1080.3 1198.36 cv
1082.69 1198.89 1085.04 1199.53 1087.46 1199.92 cv
1089.93 1200.32 1092.46 1200.47 1095.42 1200.77 cv
1089.95 1210.05 1076.17 1206.19 1070.99 1216.12 cv
1074.69 1216.93 1077.71 1217.59 1080.74 1218.25 cv
1081.02 1219 1081.29 1219.75 1081.57 1220.51 cv
1077.68 1223.07 1074.08 1226.68 1069.85 1227.99 cv
1060.71 1230.81 1051.23 1232.34 1041.94 1234.64 cv
1039.59 1235.22 1037.43 1236.7 1035.57 1239.22 cv
1041.13 1239.62 1046.68 1240.01 1052.24 1240.41 cv
1052.3 1241.24 1052.36 1242.08 1052.41 1242.91 cv
1039.27 1246.32 1026.13 1249.72 1012.98 1253.13 cv
1013 1253.68 1013.01 1254.23 1013.03 1254.78 cv
1019.12 1254.48 1025.22 1254.19 1031.31 1253.89 cv
1031.45 1254.44 1031.59 1254.99 1031.72 1255.54 cv
1025.52 1257.42 1019.4 1259.78 1013.1 1261.06 cv
1003.45 1263.03 993.676 1264.18 983.975 1265.87 cv
982.464 1266.13 981.072 1267.41 979.625 1268.21 cv
980.844 1269.15 981.895 1270.46 983.312 1270.97 cv
988.045 1272.67 992.909 1274.08 999.069 1276.04 cv
981.242 1284.9 962.93 1277.7 946.457 1284.31 cv
946.344 1285.07 946.231 1285.82 946.118 1286.58 cv
951.346 1289.01 956.574 1291.44 961.974 1293.95 cv
957.013 1300.33 950.277 1300.77 943.901 1301.19 cv
934.215 1301.83 924.534 1301.64 914.845 1302.13 cv
912.416 1302.25 909.961 1303.62 907.519 1304.41 cv
907.623 1305.08 907.727 1305.76 907.831 1306.43 cv
913.54 1307.14 919.249 1307.84 925.904 1308.67 cv
924.539 1310.43 924.074 1311.5 923.25 1312.03 cv
909.948 1320.62 895.322 1324.68 879.908 1325.96 cv
871.455 1326.66 862.999 1327.51 854.551 1327.94 cv
850.868 1328.13 847.202 1327.45 843.528 1327.16 cv
843.26 1328.2 842.993 1329.24 842.725 1330.28 cv
848.092 1331.46 853.46 1332.63 859.956 1334.06 cv
850.89 1339.04 842.425 1343.47 832.638 1344.44 cv
830.386 1344.66 828.122 1344.31 825.856 1344.37 cv
822.31 1344.48 822.521 1344.57 821.481 1348.69 cv
821.183 1349.88 819.423 1351.18 818.056 1351.78 cv
805.519 1357.33 792.849 1360.27 779.582 1356.71 cv
777.175 1356.07 773.981 1357.57 771.151 1358.08 cv
771.105 1358.88 771.058 1359.68 771.012 1360.48 cv
774.37 1361.05 777.729 1361.62 781.087 1362.19 cv
781.148 1362.66 781.208 1363.14 781.269 1363.61 cv
771.727 1366.11 762.25 1369.61 752.624 1370.83 cv
743.469 1371.99 734.161 1370.76 724.919 1370.58 cv
724.748 1371.18 724.577 1371.78 724.406 1372.38 cv
725.897 1373.69 727.387 1374.99 729.359 1376.71 cv
721.532 1380.42 714.121 1382.52 705.934 1377.19 cv
707.197 1386.43 699.811 1386.67 695.665 1386.68 cv
691.015 1386.69 686.613 1383.35 681.844 1381.36 cv
682.143 1383.51 682.524 1386.24 683.055 1390.04 cv
677.391 1391.24 670.994 1394.1 665.468 1393.29 cv
660.618 1392.57 656.745 1387.74 651.164 1385.81 cv
652.158 1388.61 653.152 1391.42 654.401 1394.94 cv
641.427 1401.77 635.411 1391.59 626.485 1385.56 cv
cp
435.058 1277.63 mo
439.601 1278.3 442.801 1278.77 446 1279.23 cv
438.714 1271.78 438.726 1271.53 448.094 1255.68 cv
453.993 1262.25 459.651 1268.46 465.145 1274.79 cv
465.837 1275.59 466.293 1277.46 465.78 1278.21 cv
461.333 1284.7 456.64 1291.06 450.819 1299.11 cv
444.882 1291.02 440.277 1284.75 435.058 1277.63 cv
cp
413.685 1246.19 mo
412.374 1243.1 412.464 1239.12 412.972 1235.61 cv
413.247 1233.7 415.702 1231.93 417.419 1229.79 cv
417.173 1229.62 417.008 1229.4 416.855 1229.42 cv
413.066 1229.86 409.135 1235.59 405.583 1230.56 cv
402.089 1225.61 399.479 1219.95 403.477 1213.64 cv
406.956 1208.15 410.991 1202.96 415.525 1196.58 cv
419.833 1205.55 423.762 1213.43 427.325 1221.48 cv
427.809 1222.58 426.498 1224.51 425.959 1226.03 cv
424.254 1230.87 421.716 1235.65 420.971 1240.55 cv
419.565 1249.79 426.06 1254.46 435.821 1252.05 cv
437.346 1251.68 439.073 1250.93 440.382 1251.27 cv
441.532 1251.56 443.236 1253.53 442.96 1254.09 cv
440.87 1258.36 438.353 1262.47 436.561 1265.6 cv
431.178 1262.81 425.664 1260.9 421.514 1257.52 cv
418.012 1254.66 415.456 1250.37 413.685 1246.19 cv
cp
440.74 1246.56 mo
436.399 1250 431.793 1249.64 427.982 1247.31 cv
423.31 1244.46 424.529 1237.49 430.806 1228.04 cv
434.107 1234.19 437.31 1240.16 440.74 1246.56 cv
cp
390.39 1199.35 mo
395.495 1197.66 403.411 1193.87 403.282 1193.33 cv
391.865 1194.26 389.849 1189.88 396.765 1177.66 cv
400.288 1171.44 404.751 1165.65 409.002 1159.35 cv
410.598 1169.35 412.191 1178.86 413.558 1188.41 cv
413.747 1189.72 413.155 1191.44 412.359 1192.66 cv
407.926 1199.48 403.318 1206.2 397.309 1215.13 cv
394.462 1208.64 392.303 1203.72 390.39 1199.35 cv
cp
381.847 1173.77 mo
385.651 1172.41 388.52 1171.38 392.674 1169.9 cv
390.682 1175.78 388.917 1180.99 386.557 1187.95 cv
384.608 1182.09 383.214 1177.89 381.847 1173.77 cv
cp
540.994 1334.31 mo
547.787 1337.87 554.581 1341.44 561.373 1345 cv
553.651 1347.13 542.074 1341.09 540.994 1334.31 cv
cp
519.631 1313.95 mo
520.284 1313.18 520.937 1312.41 521.591 1311.63 cv
526.049 1315.05 530.509 1318.48 534.969 1321.9 cv
534.371 1322.61 524.146 1317.31 519.631 1313.95 cv
cp
506.415 1341.47 mo
501.125 1336.25 504.333 1323.83 511.904 1321.65 cv
512.895 1321.37 514.409 1322.16 515.344 1322.85 cv
519.581 1325.98 523.698 1329.26 528.108 1332.67 cv
524.715 1334.3 521.473 1335.86 518.23 1337.42 cv
521.077 1336.94 523.945 1336.2 526.813 1336 cv
529.97 1335.79 533.128 1336.06 537.952 1336.16 cv
535.323 1339.74 534.219 1341.24 533.115 1342.75 cv
533.308 1342.98 533.501 1343.22 533.693 1343.45 cv
535.334 1342.31 536.974 1341.17 537.146 1341.05 cv
551.49 1346.59 564.815 1351.74 578.866 1357.17 cv
563.581 1361.35 548.731 1363.41 534.177 1361.57 cv
529.749 1361.01 526.427 1355.29 522.6 1351.94 cv
520.655 1350.24 518.711 1348.53 516.766 1346.83 cv
516.198 1347.11 515.63 1347.39 515.062 1347.67 cv
515.118 1351.22 515.173 1354.77 515.228 1358.32 cv
514.797 1358.51 514.366 1358.7 513.934 1358.89 cv
511.51 1354.3 509.086 1349.71 506.866 1345.51 cv
511.111 1342.48 514.785 1339.85 518.46 1337.23 cv
514.487 1338.63 510.513 1340.03 506.415 1341.47 cv
cp
486.003 1295.86 mo
486.829 1296.76 486.475 1299.42 485.675 1300.79 cv
481.657 1307.68 477.309 1314.42 472.337 1322.4 cv
467.685 1315.91 462.624 1309.9 458.954 1303.14 cv
457.756 1300.93 459.538 1296.5 461.097 1293.57 cv
463.432 1289.19 466.774 1285.24 470.326 1280.2 cv
475.849 1285.63 481.131 1290.57 486.003 1295.86 cv
cp
453.495 1246.92 mo
459.743 1254.46 465.457 1261.24 470.963 1268.17 cv
471.565 1268.92 470.963 1270.58 470.92 1271.82 cv
469.796 1271.69 468.207 1271.99 467.622 1271.39 cv
462.533 1266.17 457.248 1261.06 452.896 1255.29 cv
451.634 1253.62 453.2 1249.94 453.495 1246.92 cv
cp
450.43 1243.79 mo
450.24 1244.37 450.052 1244.95 449.862 1245.53 cv
447.474 1244.28 443.911 1243.64 442.885 1241.68 cv
435.183 1226.95 427.146 1212.31 420.92 1196.92 cv
416.834 1186.83 415.59 1175.53 412.734 1163.33 cv
425.756 1191.12 438.092 1217.45 450.43 1243.79 cv
cp
397.794 1121.81 mo
407.883 1127.5 403.563 1138.87 408.925 1146.71 cv
398.217 1143.44 394.537 1134.94 397.794 1121.81 cv
cp
400.327 1153.43 mo
399.698 1160.69 394.819 1167.09 388.671 1168.46 cv
386.757 1168.89 384.157 1168.23 382.69 1167.12 cv
382.002 1166.6 382.894 1163.69 383.693 1162.11 cv
387.009 1155.58 392.729 1153.27 400.327 1153.43 cv
cp
388.798 1152.89 mo
391.273 1149.23 392.803 1144.82 394.942 1144.38 cv
397.363 1143.88 400.331 1146.96 403.061 1148.48 cv
402.78 1149.28 402.499 1150.07 402.218 1150.87 cv
398.384 1151.45 394.55 1152.03 388.798 1152.89 cv
cp
483.172 1323.48 mo
481.183 1316.58 485.211 1305.79 491.317 1302.31 cv
492.308 1301.74 494.791 1302.44 495.732 1303.35 cv
497.918 1305.47 499.395 1308.24 501.513 1310.43 cv
503.674 1312.67 506.258 1314.53 508.296 1316.25 cv
503.048 1324.3 498.43 1331.38 493.538 1338.89 cv
491.144 1335.03 488.419 1330.63 485.681 1326.21 cv
487.237 1324.97 488.51 1323.95 490.922 1322.02 cv
487.378 1322.69 485.262 1323.09 483.172 1323.48 cv
cp
730.276 1332.88 mo
730.495 1333.85 730.714 1334.82 730.932 1335.78 cv
721.212 1338.35 711.763 1342.41 701.399 1341.4 cv
701.34 1341.42 701.281 1341.43 701.222 1341.45 cv
701.146 1341.46 701.072 1341.47 700.997 1341.48 cv
698.541 1342.86 696.225 1344.69 693.627 1345.51 cv
679.925 1349.84 660.241 1354.33 646.52 1351.83 cv
665.04 1345.4 683.112 1344.07 700.997 1341.48 cv
701.05 1341.45 701.103 1341.42 701.157 1341.39 cv
701.238 1341.4 701.318 1341.39 701.399 1341.4 cv
711.025 1338.56 720.651 1335.72 730.276 1332.88 cv
cp
786.304 762.935 mo
847.515 716.093 915.237 682.486 990.348 664.389 cv
916.917 685.811 849.825 720.44 786.304 762.935 cv
cp
793.23 771.025 mo
776.409 784.224 760.911 798.803 740.195 806.121 cv
746.239 801.528 752.204 796.833 758.346 792.366 cv
767.717 785.549 777.141 778.793 786.716 772.253 cv
788.441 771.075 791.006 771.064 793.23 771.025 cv
cp
673.84 915.976 mo
674.321 916.58 674.803 917.184 675.284 917.787 cv
670.402 930.383 665.52 942.979 660.591 955.695 cv
658.859 955.231 657.296 954.814 654.98 954.194 cv
656.483 945.641 656.645 936.573 660.016 928.524 cv
662.104 923.54 669.066 920.106 673.84 915.976 cv
cp
690.031 886.635 mo
690.374 886.807 690.717 886.978 691.06 887.149 cv
688.082 892.628 684.791 897.995 682.199 903.611 cv
678.477 911.679 672.243 907.415 666.745 907.878 cv
666.942 902.109 669.561 898.739 675.684 896.297 cv
680.898 894.218 685.281 889.94 690.031 886.635 cv
cp
698.244 873.648 mo
696.461 879.904 693.921 885.504 684.022 885.678 cv
688.677 880.908 692.792 876.691 696.906 872.475 cv
697.352 872.867 697.798 873.257 698.244 873.648 cv
cp
714.799 850.918 mo
709.48 857.665 704.161 864.412 698.842 871.159 cv
698.095 870.647 707.345 856.158 712.716 849.424 cv
713.41 849.922 714.105 850.42 714.799 850.918 cv
cp
709.319 841.822 mo
703.911 845.857 703.23 848.717 707.69 852.187 cv
698.173 862.236 693.268 876.046 677.868 881.63 cv
684.026 872.443 689.923 863.096 696.424 854.121 cv
701.728 846.799 707.582 839.791 713.516 832.886 cv
718.027 827.637 723.072 822.79 727.831 817.724 cv
731.523 813.794 735.153 812.553 740.171 818.485 cv
729.696 826.419 719.557 834.183 709.319 841.822 cv
cp
832.09 1195.6 mo
827.186 1193.52 822.283 1191.44 817.379 1189.36 cv
817.818 1188.56 818.256 1187.75 818.695 1186.94 cv
823.469 1189.22 832.399 1195 832.09 1195.6 cv
cp
924.258 1228.76 mo
913.206 1227.21 912.637 1218.23 908.077 1212.91 cv
913.077 1217.81 918.077 1222.71 924.258 1228.76 cv
cp
1090.02 654.612 mo
1089.87 653.947 1089.73 653.282 1089.58 652.617 cv
1092.03 652 1094.76 650.482 1096.9 650.919 cv
1106.2 652.818 1115.32 655.287 1124.37 658.197 cv
1112.92 657.002 1101.47 655.807 1090.02 654.612 cv
cp
1132.82 679.619 mo
1128.52 678.706 1124.22 677.792 1118.81 676.641 cv
1124.31 671.828 1126.55 672.325 1132.82 679.619 cv
cp
1115.37 671.921 mo
1111.45 670.002 1107.53 668.084 1103.6 666.165 cv
1103.97 665.494 1112.97 667.239 1117.11 668.783 cv
1116.53 669.829 1115.95 670.875 1115.37 671.921 cv
cp
962.52 724.944 mo
967.695 719.405 971.99 712.567 981.332 712.381 cv
980.337 725.461 968.768 720.891 962.52 724.944 cv
cp
777.909 826.207 mo
782.375 819.653 786.204 814.033 790.033 808.413 cv
786.116 824.402 785.283 825.623 777.909 826.207 cv
cp
733.748 891.01 mo
735.147 885.315 736.547 879.62 737.946 873.926 cv
737.196 879.706 742.879 886.286 733.748 891.01 cv
cp
823.705 1130.08 mo
823.616 1130.21 849.004 1145.6 866.72 1154.31 cv
848.024 1154.04 764.885 1099.79 759.415 1084.51 cv
781.474 1100.15 802.589 1115.11 823.705 1130.08 cv
cp
722.882 1038.52 mo
738.351 1054.35 753.958 1070.31 769.924 1086.65 cv
752.265 1079.73 724.303 1050.77 722.882 1038.52 cv
cp
706.355 997.401 mo
707.037 1002.71 707.718 1008.03 708.59 1014.82 cv
703.893 1010.6 703.893 1010.6 706.355 997.401 cv
cp
710.141 1036.32 mo
707.254 1031.51 704.368 1026.7 701.481 1021.88 cv
701.967 1021.5 702.454 1021.11 702.941 1020.72 cv
705.35 1025.91 713.584 1027.91 710.141 1036.32 cv
cp
684.816 979.083 mo
685.507 978.643 701.505 991.367 701.143 1002.52 cv
700.535 1002.87 699.927 1003.22 699.319 1003.57 cv
694.484 995.41 689.65 987.247 684.816 979.083 cv
cp
1094.58 1140.4 mo
1095.14 1140.92 1086.56 1154.91 1077.68 1158.35 cv
1077.53 1158.51 1077.37 1158.68 1077.22 1158.84 cv
1077.04 1158.98 1076.83 1159.14 1076.64 1159.28 cv
1072.49 1166.2 1065.87 1170.26 1059.48 1174.59 cv
1059.06 1174.1 1070.19 1164.21 1076.64 1159.28 cv
1076.77 1159.07 1076.92 1158.87 1077.05 1158.65 cv
1077.26 1158.58 1077.47 1158.43 1077.68 1158.35 cv
1083.32 1152.37 1088.95 1146.38 1094.58 1140.4 cv
cp
1187.15 1039.4 mo
1183.92 1043.57 1180.69 1047.75 1177.46 1051.92 cv
1176.78 1051.47 1181.96 1042.03 1185.23 1037.76 cv
1185.87 1038.31 1186.51 1038.86 1187.15 1039.4 cv
cp
1189.56 742.352 mo
1190.35 741.778 1191.15 741.204 1191.95 740.63 cv
1196.27 746.556 1203.93 759.13 1203.43 759.492 cv
1198.81 753.778 1194.18 748.065 1189.56 742.352 cv
cp
1171.32 731.98 mo
1180.98 743.23 1192.26 753.543 1199.78 766.057 cv
1209.49 782.198 1217.69 799.432 1220.74 818.668 cv
1222.84 831.951 1226.86 844.876 1228.28 858.245 cv
1229.38 868.473 1227.76 879.144 1227.35 889.618 cv
1227.67 889.668 1227.98 889.717 1228.3 889.767 cv
1224.17 909.38 1220.25 929.019 1215.84 948.593 cv
1213.5 959.01 1211.72 969.808 1207.26 979.575 cv
1195.07 1006.24 1181.38 1032.29 1162.52 1055.9 cv
1153.4 1067.32 1146.04 1079.94 1137.02 1091.44 cv
1131.75 1098.15 1124.63 1103.59 1118.62 1109.84 cv
1114.94 1113.67 1112.19 1118.34 1108.31 1121.93 cv
1087.36 1141.28 1066.21 1160.43 1045.08 1179.6 cv
1040.87 1183.42 1036.26 1186.85 1032.15 1190.75 cv
1026.33 1196.28 1019.61 1196.15 1013.08 1194.68 cv
991.688 1189.85 970.194 1185.23 949.2 1179.33 cv
937.423 1176.02 926.295 1170.77 915.325 1165.61 cv
890.201 1153.81 864.638 1142.6 840.59 1129.15 cv
815.187 1114.94 789.826 1100.32 769.419 1079.65 cv
761.911 1072.05 752.812 1065.84 745.607 1058.01 cv
727.447 1038.26 717.315 1014.59 716.307 987.542 cv
715.95 977.936 718.056 967.798 720.75 958.225 cv
724.858 943.625 729.551 929 735.714 914.964 cv
740.391 904.314 748.107 894.727 753.828 884.379 cv
763.797 866.347 780.048 853.05 793.724 837.882 cv
800.619 830.238 810.128 824.589 818.726 818.391 cv
831.234 809.376 843.394 799.655 856.76 792.062 cv
884.896 776.077 913.462 760.765 942.385 746.242 cv
954.327 740.245 967.68 737.108 980.314 732.448 cv
992.125 728.092 1003.68 722.873 1015.64 719.098 cv
1025.22 716.075 1035.26 714.673 1045.09 712.51 cv
1065.73 707.967 1086.33 703.153 1107.02 698.92 cv
1121.48 695.961 1134.8 696.849 1145.08 707.86 cv
1150.18 713.312 1156.86 717.383 1162.51 722.386 cv
1165.77 725.263 1168.49 728.69 1171.32 731.98 cv
cp
1181.63 727.563 mo
1181.05 728.453 1180.48 729.344 1179.9 730.235 cv
1176.24 727.637 1169.87 721.151 1170.34 720.507 cv
1174.1 722.859 1177.86 725.21 1181.63 727.563 cv
cp
1156.06 699.839 mo
1160.53 697.732 1160.53 697.732 1169.84 705.08 cv
1161.58 709.073 1159.79 702.821 1156.06 699.839 cv
cp
1052.81 643.737 mo
1056.32 638.894 1066.45 639.579 1078.53 645.195 cv
1069.13 649.5 1061.43 644.22 1052.81 643.737 cv
cp
1011.5 665.853 mo
1018.87 663.582 1026.02 658.065 1033.85 662.529 cv
1026.4 663.637 1018.95 664.744 1011.5 665.853 cv
cp
1037.54 665.72 mo
1041.36 664.601 1046.12 663.644 1049.47 664.806 cv
1079.58 671.319 1112.58 689.651 1112.38 690.452 cv
1110.07 690.844 1107.04 692.285 1105.58 691.44 cv
1099.89 688.146 1094.73 691.981 1089.38 692.818 cv
1086.19 693.318 1083 693.924 1079.09 694.609 cv
1079.62 692.742 1080.2 691.765 1080.07 690.93 cv
1079.89 689.69 1079.21 688.549 1078.73 687.366 cv
1077.65 688.057 1062.43 696.918 1055.16 700.566 cv
1055.65 697.145 1056.01 694.665 1056.6 690.577 cv
1050.58 694.912 1046.48 698.609 1041.74 701.077 cv
1036.44 703.837 1030.61 705.695 1024.87 707.399 cv
1023.95 707.672 1021.82 705.311 1021.08 703.766 cv
1020.02 701.55 1019.72 698.965 1019.1 696.537 cv
1017.05 698.019 1014.94 699.441 1012.95 700.995 cv
1007 705.629 1001.2 710.43 995.138 714.917 cv
993.081 716.439 990.438 717.221 987.054 718.818 cv
987.372 715.554 987.808 713.453 987.704 711.412 cv
987.621 709.783 987.369 707.683 986.271 706.826 cv
985.487 706.213 982.917 706.9 981.593 707.714 cv
972.555 713.263 963.636 718.998 954.744 724.63 cv
954.39 722.502 953.994 720.126 953.598 717.75 cv
947.879 727.888 941.371 736.037 927.961 737.263 cv
928.877 735.479 929.347 733.874 930.39 732.727 cv
931.433 731.58 933.049 730.892 934.413 730.003 cv
934.067 729.547 933.721 729.091 933.374 728.635 cv
928.652 732.112 923.929 735.59 919.196 739.076 cv
918.522 736.75 917.817 734.317 916.689 730.418 cv
914.371 736.592 913.793 741.759 910.824 744.978 cv
908.086 747.945 902.78 748.821 897.822 749.313 cv
901.86 746.443 905.899 743.573 910.166 740.542 cv
895.197 741.068 881.263 743.003 872.805 757.312 cv
872.88 757.248 872.955 757.184 873.03 757.12 cv
873.013 757.145 872.996 757.169 872.98 757.194 cv
876.73 754.537 880.482 751.879 884.233 749.222 cv
884.207 749.162 884.194 749.116 884.167 749.055 cv
884.219 749.085 884.274 749.118 884.325 749.149 cv
885.198 748.422 885.99 747.351 886.97 747.078 cv
889.199 746.459 892.236 745.229 893.67 746.074 cv
897.271 748.193 893.656 750.178 892.115 752.03 cv
891.696 752.533 891.013 752.845 890.808 752.99 cv
888.55 751.652 886.438 750.401 884.325 749.149 cv
884.313 749.159 884.302 749.171 884.291 749.181 cv
884.233 749.222 li
887.114 756.009 886.193 757.987 878.913 761.26 cv
875.27 762.897 871.716 764.737 867.292 765.637 cv
869.187 762.823 871.083 760.008 872.98 757.194 cv
872.919 757.237 872.857 757.281 872.796 757.324 cv
872.796 757.324 872.802 757.316 872.805 757.312 cv
868.349 761.115 863.903 764.908 859.456 768.702 cv
859.067 768.476 858.677 768.25 858.288 768.025 cv
859.33 765.075 860.762 762.152 861.216 759.161 cv
861.388 758.028 859.419 755.833 858.212 755.776 cv
856.992 755.718 854.254 757.889 854.331 758.767 cv
855.27 769.453 850.894 776.748 840.365 782.371 cv
831.587 787.06 823.915 793.789 815.689 799.529 cv
814.365 800.452 812.709 800.924 809.967 802.167 cv
810.934 799.477 811.396 798.193 811.857 796.91 cv
811.562 796.696 811.266 796.482 810.972 796.269 cv
807.528 800.506 804.085 804.741 800.277 809.426 cv
798.443 806.679 797.003 804.524 794.786 801.204 cv
790.385 806.111 784.83 810.185 782.449 815.386 cv
776.877 827.555 764.604 832.777 755.705 841.416 cv
753.692 843.37 752.311 845.907 751.309 848.697 cv
758.989 846.302 760.723 835.272 771.862 837.084 cv
768.395 843.538 765.138 849.602 762.212 855.051 cv
759.091 854.125 755.865 853.168 753.857 852.571 cv
751.311 859.025 749.281 864.171 747.333 869.108 cv
744.095 868.07 740.922 865.933 739.127 866.778 cv
737.139 867.712 736.278 871.327 735.165 873.856 cv
733.594 877.424 732.242 881.066 730.641 885.066 cv
728.98 884.751 727.18 884.409 725.277 884.048 cv
725.025 884.762 724.453 885.561 724.659 885.93 cv
727.372 890.776 723.438 896.865 727.721 902.101 cv
729.401 904.154 724.581 911.168 722.721 915.922 cv
721.878 915.772 722.355 906.245 723.471 901.489 cv
715.378 899.954 720.143 907.284 717.228 910.321 cv
712.89 908.513 710.434 910.478 709.471 915.667 cv
708.527 912.702 707.582 909.737 706.638 906.773 cv
706.101 906.886 705.566 906.999 705.03 907.112 cv
706.155 915.83 707.278 924.549 708.402 933.268 cv
707.598 933.6 702.397 927.705 700.279 924.637 cv
699.2 923.076 697.395 921.993 695.918 920.695 cv
695.149 921.351 701.892 938.784 706.034 946.843 cv
705.234 947.201 700.421 941.21 698.813 937.858 cv
698.56 937.952 698.306 938.047 698.052 938.141 cv
698.988 944.599 699.438 958.16 698.727 958.482 cv
695.193 953.804 686.62 945.384 685.868 945.853 cv
689.472 957.645 693.076 969.438 696.887 981.91 cv
691.014 974.581 677.871 962.121 676.802 962.758 cv
680.944 973.172 688.458 994.438 688.073 994.657 cv
685.723 991.092 679.868 984.558 679.292 984.853 cv
686.103 997.58 692.916 1010.31 699.728 1023.03 cv
699.06 1023.48 695.725 1021.14 694.725 1019.51 cv
694.165 1019.86 697.3 1029.73 700.263 1033.73 cv
712.307 1050 724.66 1066.06 736.97 1082.15 cv
738.335 1083.93 739.867 1086.45 741.817 1086.8 cv
751.145 1088.47 756.667 1094.99 763.355 1100.11 cv
772.547 1107.15 782.258 1113.62 791.217 1120.91 cv
808.751 1135.17 830.145 1143.04 850.951 1152.06 cv
860.708 1156.29 869.193 1162.84 878.768 1167.46 cv
885.411 1170.67 892.76 1172.89 900.088 1174.69 cv
922.177 1180.12 944.429 1185.08 966.581 1190.34 cv
977.956 1193.03 989.345 1195.73 1000.54 1198.91 cv
1004.52 1200.04 1007.94 1202.63 1013.17 1205.36 cv
1001.91 1213.88 991.717 1221.59 981.01 1229.69 cv
966.896 1224.73 952.902 1219.22 938.4 1215.02 cv
933.379 1213.56 927.096 1215.35 918.839 1215.79 cv
914.553 1212.81 911.299 1203.47 900.971 1203.23 cv
900.266 1207.35 899.663 1210.88 898.711 1216.43 cv
885.97 1205.05 860.098 1184.86 859.302 1185.61 cv
862.628 1189.52 865.954 1193.43 869.604 1197.73 cv
867.014 1199.72 863.453 1203.92 861.881 1203.42 cv
856.024 1201.53 849.859 1199.04 845.585 1195.06 cv
838.011 1188.01 831.798 1179.65 824.856 1171.97 cv
823.671 1170.66 821.691 1170.01 820.078 1169.06 cv
819.527 1169.59 818.975 1170.13 818.423 1170.66 cv
822.93 1176.78 827.437 1182.89 831.944 1189.01 cv
831.666 1189.44 831.389 1189.87 831.111 1190.3 cv
825.063 1186.91 819.015 1183.52 812.184 1179.7 cv
809.483 1178.72 804.934 1178.22 802.203 1175.85 cv
795.03 1169.63 788.641 1162.61 781.958 1155.89 cv
780.014 1153.94 778.135 1151.92 776.226 1149.94 cv
775.669 1150.38 782.682 1164.01 787.768 1171.98 cv
778.594 1170.02 774.983 1164.12 770.031 1160.06 cv
765.231 1156.12 767.268 1147.35 758.717 1144.24 cv
760.844 1150.22 762.514 1154.92 764.184 1159.62 cv
763.881 1159.86 763.577 1160.11 763.274 1160.36 cv
754.475 1151.66 745.676 1142.95 736.49 1133.87 cv
733.906 1132.83 729.758 1132.12 727.032 1129.88 cv
721.321 1125.18 716.217 1120.13 714.172 1112.35 cv
711.87 1103.58 707.83 1095.29 704.004 1087.05 cv
703.004 1084.9 699.997 1083.69 698.72 1082.69 cv
702.002 1091.16 705.364 1099.84 709.264 1109.91 cv
705.013 1107.19 702.441 1104.8 699.291 1103.67 cv
691.569 1100.88 689.078 1094.62 687.183 1087.86 cv
684.79 1079.31 682.797 1070.63 680.127 1062.18 cv
679.105 1058.95 676.733 1056.18 674.903 1053.24 cv
671.711 1048.11 669.733 1042.96 672.553 1036.48 cv
673.552 1034.19 672.572 1031.23 672.495 1028.58 cv
671.78 1028.53 668.006 1033.06 666.834 1035.37 cv
666.144 1035.38 665.454 1035.38 664.763 1035.38 cv
665.315 1025.56 665.867 1015.74 666.418 1005.92 cv
665.531 1005.92 656.615 1015.76 655.645 1015.53 cv
657.022 1008.54 658.377 1001.54 659.806 994.551 cv
659.972 993.741 661.092 992.716 660.86 992.234 cv
656.738 983.699 663.59 976.085 664.742 968.021 cv
665.068 965.738 668.997 963.443 664.616 960.622 cv
663.25 959.742 665.421 953.365 666.824 949.75 cv
677.124 923.203 686.914 896.378 702.474 871.809 cv
706.998 864.667 715.247 859.479 721.579 852.879 cv
718.713 854.669 715.847 856.458 712.981 858.248 cv
712.584 857.947 712.187 857.646 711.789 857.345 cv
715.302 854.036 718.831 850.742 722.318 847.41 cv
723.342 846.432 725.174 845.186 725.073 844.336 cv
723.689 832.791 733.357 828.447 741.117 822.828 cv
744.804 820.158 748.476 817.466 752.078 814.692 cv
752.72 814.197 753.533 813.026 753.346 812.542 cv
750.835 806.069 756.797 803.57 760.63 800.7 cv
770.278 793.474 780.497 786.962 790.19 779.789 cv
795.882 775.578 800.664 770.174 806.487 766.181 cv
812.203 762.261 818.854 759.667 824.845 756.087 cv
830.851 752.499 836.598 748.478 842.317 744.456 cv
842.993 743.982 842.776 742.308 842.878 741.73 cv
833.395 747.194 813.39 756.369 812.831 755.515 cv
815.525 753.69 818.197 751.834 820.914 750.045 cv
838.488 738.475 857.97 731.202 877.574 724.158 cv
899.612 716.238 921.552 708.022 943.62 700.196 cv
952.693 696.979 962.008 694.51 971.169 691.549 cv
973.137 690.913 974.917 689.627 978.575 687.693 cv
961.721 691.948 946.872 695.695 932.023 699.444 cv
931.86 698.883 943.624 691.987 949.938 690.268 cv
969.204 685.024 988.662 680.611 1007.93 675.374 cv
1017.92 672.659 1027.59 668.634 1037.54 665.72 cv
cp
917.063 631.644 mo
920.874 622.87 927.589 624.78 932.18 625.065 cv
944.744 625.843 957.133 627.845 969.572 629.447 cv
970.921 629.62 973.25 632.472 973.159 633.302 cv
968.079 633.575 962.864 634.535 957.95 633.98 cv
947.259 632.775 936.761 630.613 926.091 629.281 cv
923.765 628.991 921.047 630.541 917.063 631.644 cv
cp
821.913 646.263 mo
831.966 640.513 870.555 635.435 879.304 639.117 cv
859.523 641.58 841.204 643.861 821.913 646.263 cv
cp
909.611 644.42 mo
880.331 648.481 851.05 652.544 821.77 656.605 cv
850.782 648.765 880.046 644.422 909.611 644.42 cv
cp
752.79 655.722 mo
763.446 648.15 775.616 650.351 787.188 648.255 cv
776.122 653.148 764.852 657.216 752.79 655.722 cv
cp
639.448 712.118 mo
641.923 704.872 646.848 702.351 656.834 702.882 cv
650.424 706.287 645.569 708.867 639.448 712.118 cv
cp
497.922 828.025 mo
509.727 814.407 519.396 798.93 537.058 790.73 cv
527.17 801.092 517.38 811.54 507.327 821.756 cv
504.764 824.362 501.363 826.234 497.922 828.025 cv
cp
490.769 839.164 mo
488.149 842.675 486.156 845.347 483.723 848.608 cv
479.502 841.896 482.846 837.817 489.739 833.18 cv
487.895 836.127 486.92 837.687 485.783 839.505 cv
487.141 839.412 488.248 839.336 490.769 839.164 cv
cp
468.806 867.295 mo
466.862 861.341 475.201 851.107 481.535 851.285 cv
476.973 857.022 473.151 861.83 468.806 867.295 cv
cp
451.219 913.367 mo
459.48 895.479 470.023 878.227 481.213 861.63 cv
490.711 847.539 502.098 834.417 513.499 821.526 cv
528.513 804.551 544.976 788.68 559.658 771.474 cv
572.043 756.957 589.372 750.11 604.946 740.69 cv
625.41 728.309 646.688 717.194 667.878 706.028 cv
688.465 695.18 709.803 686.229 732.025 679.123 cv
758.174 670.76 784.824 667.483 811.527 663.87 cv
824.603 662.101 837.646 659.822 850.731 658.253 cv
865.468 656.486 880.234 655.065 894.992 653.853 cv
909.972 652.623 925.074 650.739 939.917 651.116 cv
960.655 651.644 981.202 654.006 1001.98 657.029 cv
998.001 658.311 994.068 659.837 990.027 660.833 cv
976.34 664.207 962.321 666.423 948.975 670.886 cv
930.603 677.029 912.194 683.704 894.768 692.164 cv
869.32 704.52 844.655 718.526 819.809 732.104 cv
806.724 739.255 793.25 746.059 781.225 754.691 cv
764.598 766.625 748.252 779.255 733.478 793.205 cv
717.319 808.463 701.788 824.707 688.417 842.123 cv
677.042 856.939 668.162 873.654 659.951 890.223 cv
651.836 906.597 644.689 923.572 639.376 940.768 cv
631.94 964.838 630.223 988.984 635.663 1013.29 cv
640.249 1033.79 644.714 1054.19 653.045 1073.39 cv
659.437 1088.12 667.503 1101.81 678.602 1113.8 cv
685.984 1121.77 691.384 1131.45 698.901 1139.28 cv
710.338 1151.2 723.703 1161.05 738.416 1169.53 cv
771.445 1188.55 807.95 1201.16 842.783 1216.85 cv
865.099 1226.89 888.847 1233.08 912 1240.87 cv
921.103 1243.93 931.155 1244.8 940.713 1246.87 cv
944.055 1247.59 947.212 1248.91 952.555 1250.63 cv
919.873 1265.7 888.932 1280.4 857.625 1294.25 cv
830.947 1306.05 802.646 1312.49 774.716 1320.01 cv
760.861 1323.74 747.051 1328.01 733.034 1330.6 cv
712.562 1334.37 692.534 1341.12 671.511 1341.65 cv
660.305 1341.93 648.92 1344.92 637.68 1347.14 cv
622.994 1350.03 608.377 1353.39 593.711 1356.43 cv
592.567 1356.67 591.003 1356.25 590.085 1355.59 cv
571.41 1342.2 552.324 1329.34 535.754 1313.48 cv
525.736 1303.89 516.287 1294.15 508.258 1282.84 cv
500.306 1271.64 489.387 1262.46 481.129 1251.44 cv
469.882 1236.42 457.115 1222.35 450.8 1204.05 cv
448.034 1196.03 441.214 1189.58 437.738 1181.74 cv
432.666 1170.3 428.032 1158.51 424.861 1146.37 cv
419.627 1126.33 415.356 1105.99 411.434 1085.59 cv
410.114 1078.73 410.778 1071.33 411.103 1064.16 cv
411.47 1056.08 412.572 1047.99 413.19 1039.9 cv
414.862 1018.02 420.544 996.644 427.809 975.584 cv
435.018 954.684 441.892 933.563 451.219 913.367 cv
cp
448.923 906.827 mo
446.258 911.269 443.593 915.71 440.928 920.151 cv
439.891 919.515 438.853 918.879 437.815 918.243 cv
440.641 913.972 448.046 906.362 448.923 906.827 cv
cp
462.489 872.908 mo
463.094 873.334 463.699 873.76 464.304 874.187 cv
462.068 884.635 456.283 891.854 451.493 889.904 cv
455.183 884.201 458.836 878.554 462.489 872.908 cv
cp
439.835 890.343 mo
443.292 887.079 445.973 884.546 449.163 881.534 cv
449.782 889.302 447.832 891.367 439.835 890.343 cv
cp
390.571 1107.84 mo
383.652 1116.67 376.966 1125.2 369.607 1134.59 cv
368.549 1129.46 367.586 1124.78 366.621 1120.1 cv
367.528 1119.54 371.588 1123.16 372.232 1122.7 cv
371.023 1117.16 370.104 1111.52 368.529 1106.09 cv
366.752 1099.96 367.683 1094.57 371.703 1088.92 cv
376.95 1081.54 381.462 1073.72 386.294 1066.09 cv
387.338 1064.44 388.396 1062.8 389.447 1061.16 cv
390.302 1061.81 391.157 1062.47 392.012 1063.12 cv
389.592 1067.8 394.879 1074 386.74 1077.75 cv
386.212 1077.99 386.618 1081.37 387.275 1083 cv
391.005 1092.26 394.966 1101.42 398.791 1110.63 cv
399.53 1112.42 400.018 1114.31 400.602 1116.09 cv
397.427 1114.77 394.819 1113.69 392.22 1112.62 cv
392.21 1112.66 392.191 1112.7 392.185 1112.74 cv
392.135 1112.79 392.08 1112.85 392.03 1112.91 cv
392.48 1121.64 389.696 1130.77 393.76 1139.12 cv
394.241 1140.11 392.787 1142.37 391.744 1143.71 cv
389.161 1147.06 386.43 1150.33 383.486 1153.39 cv
382.107 1154.83 379.852 1156.77 378.438 1156.57 cv
376.983 1156.36 375.799 1153.96 374.96 1152.28 cv
370.268 1142.92 375.724 1134.62 380.653 1126.64 cv
383.714 1121.69 388.171 1117.45 392.03 1112.91 cv
392.023 1112.79 392.031 1112.66 392.023 1112.53 cv
392.088 1112.56 392.156 1112.59 392.22 1112.62 cv
392.318 1112.2 392.553 1111.75 392.433 1111.47 cv
391.964 1110.36 391.345 1109.31 390.571 1107.84 cv
cp
406.275 877.254 mo
407.104 877.614 407.932 877.974 408.761 878.334 cv
405.272 884.253 401.784 890.172 398.294 896.09 cv
397.727 895.852 403.048 883.294 406.275 877.254 cv
cp
989.691 599.1 mo
979.852 602.621 971.042 599.315 962.038 597.306 cv
971.256 597.904 980.473 598.502 989.691 599.1 cv
cp
1080.97 621.456 mo
1080.68 622.566 1036.88 613.394 1014.06 607.381 cv
1039.46 605.338 1058.95 617.22 1080.97 621.456 cv
cp
1212.39 656.002 mo
1211.94 656.948 1211.49 657.896 1211.04 658.843 cv
1200.74 654.94 1181.02 645.678 1181.45 644.949 cv
1191.76 648.633 1202.08 652.318 1212.39 656.002 cv
cp
1238.48 635.852 mo
1248.23 635.558 1258 634.589 1267.76 634.042 cv
1270.93 633.864 1274.61 633.104 1277.17 634.235 cv
1292.2 640.872 1309.48 637.376 1325.21 641.144 cv
1335.77 643.672 1347.24 643.4 1358.22 644.786 cv
1365.59 645.716 1372.8 647.377 1380.1 648.657 cv
1381.59 648.917 1383.14 648.935 1384.65 649.065 cv
1384.8 648.396 1330.23 638.049 1302.8 633.545 cv
1302.84 633.167 1302.88 632.789 1302.92 632.411 cv
1316.75 633.368 1330.73 633.648 1344.38 635.454 cv
1361.13 637.672 1377.71 640.835 1394.15 644.273 cv
1400.69 645.641 1406.67 648.859 1412.93 651.194 cv
1415.32 652.084 1417.7 653.016 1420.18 653.656 cv
1429.75 656.121 1439.36 658.477 1450.64 661.297 cv
1447.77 662.923 1446.96 663.384 1446.09 663.876 cv
1446.38 664.103 1446.63 664.493 1446.92 664.496 cv
1456.58 664.598 1463.72 669.259 1470.83 674.44 cv
1479.78 680.961 1487.54 688.779 1499.31 692.073 cv
1505.21 693.724 1510.12 699.515 1514.06 704.489 cv
1523.3 716.174 1533.65 726.181 1547.53 733.264 cv
1554.66 736.906 1560 743.563 1565.81 749.184 cv
1569.34 752.604 1572.2 756.645 1576.45 761.699 cv
1571.69 760.954 1565.93 761.173 1565.7 761.695 cv
1569.02 763.066 1572.44 764.266 1575.63 765.844 cv
1582.74 769.352 1583.16 773.144 1577.48 779.38 cv
1576.02 780.977 1574.79 782.751 1573.45 784.443 cv
1573.76 785.027 1581.06 782.489 1584.71 780.463 cv
1587.79 786.27 1591.41 792.442 1594.2 798.986 cv
1594.73 800.237 1592.03 803.007 1590.65 804.978 cv
1588.93 807.429 1587.05 809.778 1585.23 812.173 cv
1585.83 812.57 1594.4 808.543 1598.49 805.878 cv
1600.1 808.82 1601.6 811.563 1603.69 815.387 cv
1600.28 814.829 1598.34 814.511 1596.4 814.193 cv
1603.1 816.493 1605.47 820.438 1605.85 827.641 cv
1606.28 835.72 1597.77 838.263 1596.4 844.906 cv
1597.75 844.762 1599.06 844.629 1600.37 844.482 cv
1605.07 843.957 1610.35 840.534 1613.35 846.97 cv
1617.08 854.978 1616.55 859.179 1610.4 865.036 cv
1607.46 867.842 1604.8 870.922 1602.02 873.878 cv
1602.35 874.505 1602.69 875.131 1603.03 875.757 cv
1604.76 875.602 1606.52 875.214 1608.2 875.338 cv
1612.31 875.64 1619.5 875.271 1619.89 876.79 cv
1621.05 881.415 1620.36 886.968 1618.86 891.838 cv
1617.88 895.052 1614.2 897.664 1611.87 900.637 cv
1610.54 902.322 1609.49 904.193 1609.27 906.878 cv
1610.96 905.864 1612.82 905.024 1614.32 903.789 cv
1616.03 902.379 1617.42 900.617 1620 897.913 cv
1620.48 901.1 1621 903.134 1621.05 905.211 cv
1621.15 910.059 1621.52 914.963 1620.79 919.776 cv
1620.41 922.242 1621.98 926.651 1616.49 927.168 cv
1616.44 927.173 1615.88 930.228 1616.54 930.719 cv
1620.89 933.977 1620.52 935.764 1615.99 939.212 cv
1614.31 940.486 1613.16 944.444 1613.91 946.279 cv
1616.81 953.453 1618.29 960.509 1614.34 968.441 cv
1613.33 964.806 1609.78 958.136 1608.98 958.319 cv
1609.15 961.691 1609.07 965.113 1609.55 968.424 cv
1610.99 978.236 1603.42 988.736 1593.09 991.348 cv
1591.33 991.792 1589.81 993.38 1588.19 994.439 cv
1590.32 994.911 1593.02 996.445 1594.48 995.667 cv
1600.33 992.563 1605.8 988.739 1611.96 984.832 cv
1611.6 988.482 1611.45 992.255 1610.81 995.987 cv
1610.16 999.766 1609.03 1003.5 1607.96 1007.86 cv
1606.86 1006.03 1605.98 1004.56 1604.42 1001.98 cv
1603.73 1004.31 1602.91 1005.55 1603.16 1006.46 cv
1605.79 1016.31 1599.88 1022.51 1591.9 1027.78 cv
1585.57 1031.95 1579.14 1035.97 1572.75 1040.05 cv
1574.6 1041.98 1574.6 1041.98 1594.72 1032.92 cv
1594.62 1045.12 1587.25 1054.38 1581.36 1064.18 cv
1582.3 1059.32 1583.24 1054.46 1584.18 1049.6 cv
1583.73 1049.5 1583.27 1049.4 1582.82 1049.31 cv
1580.17 1057.02 1577.58 1064.76 1574.83 1072.45 cv
1573.6 1075.9 1572.16 1079.31 1570.59 1082.66 cv
1567.79 1088.65 1561.49 1089.44 1556.2 1091.75 cv
1553.11 1093.1 1549.33 1094.25 1551.02 1098.54 cv
1554.71 1097.88 1558.36 1097.23 1563.36 1096.33 cv
1554.24 1110.47 1545.02 1122.93 1537.06 1136.36 cv
1535.98 1134.96 1535.29 1134.06 1534.74 1133.35 cv
1532.89 1138.45 1532.07 1143.81 1529.14 1147.88 cv
1526.56 1151.45 1521.62 1153.58 1517.19 1156.72 cv
1515.69 1152.8 1512.77 1147.69 1512.33 1147.8 cv
1512.21 1152.54 1512.09 1157.27 1511.97 1161.67 cv
1508.04 1163.85 1504.62 1165.74 1500.02 1168.29 cv
1502.88 1169.88 1504.46 1170.76 1506.1 1171.67 cv
1505.74 1173.84 1502.7 1176.16 1498.85 1178.15 cv
1497.48 1178.85 1497.02 1181.25 1496.03 1182.81 cv
1492.44 1188.49 1489.53 1188.75 1485.28 1184.38 cv
1484.34 1183.41 1480.42 1183.27 1480.03 1183.87 cv
1475.99 1190.28 1472.39 1196.92 1468.57 1203.66 cv
1474.1 1199.8 1478.91 1196.44 1483.73 1193.08 cv
1484.31 1193.52 1484.89 1193.95 1485.47 1194.38 cv
1484.89 1195.7 1484.55 1197.17 1483.71 1198.33 cv
1475.58 1209.54 1463.52 1212.54 1450.82 1213.89 cv
1446.82 1214.32 1443.29 1214.69 1442.01 1219.69 cv
1446.33 1220.29 1450.26 1220.84 1455.68 1221.6 cv
1448.68 1228.48 1444.44 1236.03 1435.49 1237.17 cv
1427.38 1238.2 1410.69 1240.22 1410.51 1241.08 cv
1415.54 1242.08 1420.57 1243.08 1425.94 1244.15 cv
1422.99 1248.31 1419.59 1250.75 1413.36 1251.09 cv
1405.35 1251.52 1397.25 1250.59 1389.05 1254.82 cv
1384.23 1257.3 1377.53 1256.15 1370.91 1256.69 cv
1371.67 1254.64 1371.71 1253.93 1372.1 1253.58 cv
1395.96 1231.94 1419.83 1210.31 1443.74 1188.72 cv
1453.83 1179.61 1463.75 1170.3 1474.26 1161.66 cv
1479.78 1157.13 1486.63 1154.11 1492.43 1149.84 cv
1494.56 1148.27 1496.87 1144.79 1496.59 1142.64 cv
1495.28 1132.55 1497 1129.03 1506.85 1124.4 cv
1511.13 1122.39 1515.44 1120.35 1519.41 1117.83 cv
1521.37 1116.59 1522.58 1114.22 1524.54 1111.86 cv
1517.74 1115.74 1511.84 1118.88 1506.19 1122.42 cv
1502.37 1124.82 1498.43 1127.39 1495.46 1130.63 cv
1493.59 1132.67 1491.83 1136.96 1492.8 1138.73 cv
1496.22 1144.95 1491.28 1147.84 1487.32 1150.04 cv
1475.26 1156.76 1464.48 1164.65 1456.1 1175.48 cv
1454.99 1176.93 1452.73 1177.62 1450.18 1177.68 cv
1470.07 1153.71 1489.96 1129.73 1509.89 1105.7 cv
1510.93 1106.23 1512.28 1106.92 1514.04 1107.82 cv
1511.85 1093.57 1528.11 1092.17 1533.59 1081.73 cv
1529.09 1084.31 1525.76 1086.21 1520.49 1089.22 cv
1524.26 1083.74 1527.34 1080.08 1529.48 1076.02 cv
1539.14 1057.66 1548.51 1039.18 1558.05 1020.77 cv
1563.85 1009.59 1567.77 998.333 1568.21 985.835 cv
1568.43 979.573 1573.93 973.256 1576.09 966.739 cv
1578.12 960.583 1579.23 954.145 1580.04 947.799 cv
1580.29 945.83 1577.72 943.87 1577.32 941.701 cv
1576.73 938.491 1576.23 935.005 1576.95 931.807 cv
1577.87 927.727 1580.07 923.827 1581.66 919.832 cv
1583.29 915.75 1582.97 912.751 1575.45 913.232 cv
1576.32 904.31 1577.35 895.876 1577.84 887.45 cv
1577.98 885.117 1577.34 881.862 1575.7 880.675 cv
1571.36 877.547 1573.08 873.377 1572.84 869.337 cv
1572.48 863.123 1571.89 856.857 1570.41 850.9 cv
1569.84 848.629 1566.53 847.152 1563.17 844.157 cv
1563.02 841.72 1563.44 836.991 1557.84 834.332 cv
1555.94 833.427 1554.85 829.699 1554.88 827.175 cv
1554.98 819.163 1556.06 811.095 1556.17 803.08 cv
1556.22 799.917 1554.73 796.839 1553.94 793.722 cv
1553.04 793.919 1552.38 811.387 1552.94 819.861 cv
1546.2 812.374 1541.93 805.747 1545.89 794.194 cv
1548.66 786.104 1539.4 774.479 1529.62 774.37 cv
1538.13 780.914 1544.09 788.034 1541.57 798.883 cv
1540.86 799.222 1540.15 799.562 1539.45 799.902 cv
1535.22 790.722 1530.7 781.665 1526.86 772.319 cv
1524.33 766.16 1516.17 761.599 1509.89 759.6 cv
1504.98 758.036 1500.05 753.156 1498.14 748.47 cv
1494.14 738.665 1486.82 731.715 1479.85 724.302 cv
1479.01 723.407 1477.95 722.277 1476.81 722.133 cv
1467.4 720.954 1462.61 713.351 1455.32 709.241 cv
1451.33 706.991 1447.61 705.43 1442.49 707.328 cv
1440.46 708.081 1437.37 707.539 1435.46 706.514 cv
1429.18 703.158 1423.2 699.354 1417.16 695.638 cv
1409.65 691.011 1402.33 686.108 1394.66 681.711 cv
1391.21 679.733 1387.26 678.256 1383.28 677.353 cv
1379.69 676.539 1375.8 676.897 1376.36 682.904 cv
1371.23 681.15 1366.79 679.694 1362.4 678.121 cv
1358.23 676.624 1354.23 673.432 1350.12 678.207 cv
1341.74 672.71 1336.05 664.213 1323.38 663.201 cv
1324.19 667.103 1324.81 670.154 1325.58 673.865 cv
1313.89 671.302 1306.64 659.936 1293.21 660.301 cv
1293.41 662.593 1293.56 664.35 1293.73 666.277 cv
1285.84 668.027 1280.35 663.99 1274.32 661.382 cv
1269.44 659.277 1263.26 655.494 1259.16 660.788 cv
1255.32 665.742 1251.47 665.264 1247.78 664.378 cv
1241.17 662.792 1234.97 660.009 1228.62 657.668 cv
1212.84 651.849 1198.76 642.302 1180.85 641.153 cv
1179.09 641.041 1177.55 639.392 1176.54 637.21 cv
1197.18 636.776 1217.82 636.476 1238.48 635.852 cv
cp
1518.67 701.75 mo
1531.35 712 1544.04 722.251 1556.72 732.502 cv
1543.4 730.866 1521.33 713.15 1518.67 701.75 cv
cp
1612.78 827.096 mo
1613.68 826.769 1619.05 835.969 1620.84 840.896 cv
1619.68 841.239 1618.52 841.581 1617.37 841.925 cv
1615.84 836.982 1614.31 832.039 1612.78 827.096 cv
cp
1630.99 920.919 mo
1629.61 921.766 1627.19 923.247 1622.95 925.844 cv
1623.56 913.049 1626.82 890.07 1627.91 889.941 cv
1628.91 899.968 1629.9 909.995 1630.99 920.919 cv
cp
1625.05 988.967 mo
1618.17 988.93 1618.7 985.785 1618.96 982.39 cv
1620 968.583 1622.52 929.88 1633.16 927.055 cv
1630.39 948.208 1627.72 968.622 1625.05 988.967 cv
cp
1613.03 1009.07 mo
1614.87 1002.14 1616.42 996.281 1617.97 990.422 cv
1618.65 990.526 1619.32 990.63 1620 990.734 cv
1623.24 997.741 1622.2 1000.79 1613.03 1009.07 cv
cp
1594.46 1063.24 mo
1602.66 1047.35 1605.26 1029.79 1613.45 1013.9 cv
1614.4 1014.18 1615.34 1014.45 1616.29 1014.73 cv
1609.85 1031.12 1595.3 1063.46 1594.46 1063.24 cv
cp
1567.83 1111.61 mo
1566.98 1111.04 1570.87 1100.54 1573.66 1095.85 cv
1576.36 1097.29 li
1573.52 1102.06 1570.67 1106.84 1567.83 1111.61 cv
cp
1541.04 1151.53 mo
1544.38 1144.75 1547.72 1137.96 1551.35 1130.59 cv
1553.29 1131.83 1554.91 1132.87 1556.81 1134.08 cv
1551.88 1140.53 1541.66 1151.78 1541.04 1151.53 cv
cp
1412.48 1263.66 mo
1408.79 1265.36 1406.48 1267.26 1404.24 1267.33 cv
1390.31 1267.76 1376.39 1267.81 1362.48 1267.94 cv
1359.12 1267.97 1355.78 1267.83 1351.6 1267.75 cv
1360.16 1259.69 1368.43 1258.19 1378.09 1260.11 cv
1384.26 1261.34 1391 1260.57 1397.55 1260.21 cv
1393.94 1259.35 1390.32 1258.49 1385.16 1257.26 cv
1394.47 1256.72 1402.03 1256.28 1409.59 1255.84 cv
1411.41 1258.28 li
1409.33 1258.91 1407.25 1259.54 1405.17 1260.17 cv
1405.25 1260.76 1405.34 1261.34 1405.43 1261.92 cv
1407.07 1262.33 1408.7 1262.73 1412.48 1263.66 cv
cp
1513.31 778.893 mo
1513.9 778.461 1514.49 778.03 1515.07 777.599 cv
1527.64 787.449 1535.58 800.716 1543.06 814.326 cv
1542.58 814.72 1522.74 791.098 1513.31 778.893 cv
cp
1443.43 711.452 mo
1457.09 709.396 1460.97 721.208 1469.47 726.813 cv
1469.9 725.629 1470.32 724.472 1470.73 723.315 cv
1478.45 723.817 1487.54 733.305 1490.28 744.809 cv
1484.11 740.721 1478.95 737.165 1473.63 733.83 cv
1468.08 730.355 1462.15 727.384 1456.82 723.654 cv
1451.88 720.191 1447.51 716.017 1443.43 711.452 cv
cp
1392.47 695.596 mo
1392.21 696.236 1391.94 696.876 1391.67 697.517 cv
1384.34 695.127 1377.01 692.737 1369.67 690.346 cv
1369.92 689.769 1385.12 693.268 1392.47 695.596 cv
cp
1439.83 722.52 mo
1429.71 717.628 1419.58 712.737 1409.45 707.846 cv
1409.74 707.337 1433.3 711.436 1439.83 722.52 cv
cp
1384.05 683.733 mo
1384.43 683.201 1384.81 682.67 1385.19 682.139 cv
1394.09 687.528 1402.99 692.918 1411.89 698.307 cv
1398.92 698.626 1393.2 688.766 1384.05 683.733 cv
cp
1326.63 668.11 mo
1327.13 667.662 1327.63 667.213 1328.13 666.764 cv
1331.93 669.813 1335.74 672.861 1340.01 676.278 cv
1331.55 677.95 1328.92 673.245 1326.63 668.11 cv
cp
1137.93 1162.95 mo
1144.21 1157.16 1149.48 1152.3 1154.75 1147.44 cv
1155.08 1147.82 1148.31 1157.88 1144.18 1162.17 cv
1143.22 1163.17 1140.53 1162.68 1137.93 1162.95 cv
cp
1325.18 1270.95 mo
1321.05 1273.69 1316.76 1276.62 1312.15 1278.09 cv
1308.72 1279.18 1304.32 1278.87 1300.94 1277.79 cv
1281.27 1271.48 1261.84 1264.62 1242.2 1258.23 cv
1223.62 1252.2 1204.97 1246.3 1186.17 1240.8 cv
1179.35 1238.81 1171.88 1238.53 1164.92 1236.84 cv
1152.52 1233.84 1140.11 1230.74 1128.02 1226.91 cv
1121.53 1224.85 1115.7 1221.2 1108.91 1217.94 cv
1122.5 1204.98 1135.63 1192.55 1148.63 1180 cv
1152.02 1176.72 1154.94 1173.03 1158.14 1169.58 cv
1174.06 1152.4 1190.4 1135.54 1205.78 1117.94 cv
1214.11 1108.42 1221.12 1097.81 1228.17 1087.39 cv
1237.79 1073.17 1248.08 1059.16 1255.92 1044.15 cv
1267.06 1022.81 1276.64 1000.78 1286.05 978.775 cv
1289.52 970.659 1290.2 961.676 1292.91 953.258 cv
1296.92 940.787 1300.47 928.356 1300.72 915.439 cv
1301.09 896.279 1302.71 876.999 1301.88 857.976 cv
1301.3 844.706 1297.62 831.756 1295.14 818.707 cv
1290.43 793.877 1283.42 769.746 1273.47 746.704 cv
1268.96 736.237 1262.49 726.634 1256.89 716.652 cv
1252.37 708.597 1247.81 700.562 1242.91 691.891 cv
1243.62 691.416 1245.18 689.597 1246.86 689.376 cv
1254.57 688.356 1262.4 686.926 1270.01 687.215 cv
1290.61 687.997 1311.25 688.879 1331.61 691.127 cv
1342.36 692.315 1352.54 696.436 1362.98 699.227 cv
1392.08 707.007 1420.17 717.084 1446.28 730.835 cv
1463.49 739.903 1479.97 750.35 1495.61 761.589 cv
1502.72 766.699 1507.18 775.095 1512.53 782.226 cv
1522.52 795.557 1533.04 808.586 1541.95 822.596 cv
1553.69 841.049 1561.4 861.311 1563.45 883.594 cv
1564.5 895.012 1567.22 906.304 1566.96 917.762 cv
1566.54 936.442 1564.85 955.232 1562.62 973.935 cv
1561.32 984.881 1557.74 995.724 1555.54 1006.65 cv
1550.34 1032.39 1536.67 1054.72 1521.07 1076.42 cv
1513.89 1086.4 1508.38 1097.47 1500.66 1107.03 cv
1487.1 1123.83 1472.45 1139.87 1458.21 1156.18 cv
1452.13 1163.15 1446.19 1170.26 1439.7 1176.88 cv
1432.11 1184.6 1423.99 1191.85 1416.1 1199.29 cv
1407.27 1207.61 1398.75 1216.25 1389.51 1224.13 cv
1379.86 1232.36 1369.72 1240.1 1359.42 1247.57 cv
1348.25 1255.67 1336.7 1263.3 1325.18 1270.95 cv
cp
1343.05 1271.05 mo
1360.88 1274.05 1377.38 1276.82 1393.88 1279.59 cv
1378.27 1285.45 1353.68 1281.14 1343.05 1271.05 cv
cp
1436.93 1338.64 mo
1431.1 1350.1 1425.35 1361.43 1419.36 1373.2 cv
1419.32 1371.55 1419.2 1370.33 1419.26 1369.11 cv
1419.83 1357.16 1422.01 1345.72 1433.52 1337.43 cv
1434.16 1337.66 1435.55 1338.15 1436.93 1338.64 cv
cp
1437.51 1319.22 mo
1434.7 1321.83 1432.97 1323.43 1431.85 1324.47 cv
1428.74 1322.67 1426.35 1320.62 1423.49 1319.75 cv
1413.43 1316.71 1403.2 1314.1 1393.05 1311.26 cv
1391.86 1310.92 1390.81 1310.2 1389.69 1309.66 cv
1362.6 1296.24 1420.93 1315.34 1437.51 1319.22 cv
cp
1516.73 1317.51 mo
1523.48 1322.44 1523.26 1322.15 1516.19 1327.31 cv
1511.81 1330.52 1508.25 1334.78 1504.23 1338.48 cv
1502.31 1340.24 1500.18 1341.79 1497.72 1343.79 cv
1496.9 1335.39 1501.87 1328.74 1516.73 1317.51 cv
cp
1563.39 1324.02 mo
1561.44 1328.13 1561.07 1333.6 1554.1 1331.43 cv
1553.37 1331.2 1552.01 1332.86 1550.83 1333.34 cv
1547.75 1334.61 1544.6 1335.71 1541.26 1336.13 cv
1555.18 1320.63 1551.05 1322.59 1563.39 1324.02 cv
cp
1763.63 1322.94 mo
1757.1 1325.11 1750.57 1327.27 1744.04 1329.44 cv
1748.72 1321.43 1763.39 1322.33 1763.63 1322.94 cv
cp
1814.95 1294.78 mo
1815.05 1295.61 1815.16 1296.44 1815.26 1297.27 cv
1808.1 1298.97 1800.94 1300.66 1793.77 1302.36 cv
1793.66 1301.84 1806.43 1291.05 1814.95 1294.78 cv
cp
1875.22 1291.79 mo
1882.08 1292.4 1889.01 1292.75 1895.74 1293.9 cv
1913.62 1296.95 1931.46 1300.15 1949.18 1303.79 cv
1953.59 1304.69 1957.45 1307.49 1961.02 1310.46 cv
1940.73 1306.7 1920.66 1301.9 1900.1 1299.46 cv
1879.4 1297 1858.22 1296.89 1837.4 1295.75 cv
1849.62 1289.41 1862.43 1290.64 1875.22 1291.79 cv
cp
2036.23 1326 mo
2035.93 1326.96 2035.64 1327.92 2035.34 1328.88 cv
2023.23 1327.75 2001.03 1318.9 2001.26 1318.16 cv
2012.92 1320.78 2024.57 1323.39 2036.23 1326 cv
cp
2025.22 1317.12 mo
2028.14 1317.81 2030.99 1318.73 2033.85 1319.58 cv
2036.66 1320.4 2039.47 1321.24 2042.44 1322.13 cv
2039.01 1325.3 2026.05 1322.19 2015.37 1315.37 cv
2019.9 1316.16 2022.61 1316.5 2025.22 1317.12 cv
cp
2026.06 1369.14 mo
2001.51 1377.34 1976.96 1385.54 1952.41 1393.74 cv
1951.91 1393.21 1957.42 1384.67 1960.87 1381.09 cv
1964.22 1377.62 1967.76 1374.29 1971.39 1371.09 cv
1972.46 1370.15 1974.14 1369.38 1975.52 1369.31 cv
1992.24 1368.54 2008.96 1367.92 2025.67 1367.26 cv
2025.8 1367.88 2025.93 1368.51 2026.06 1369.14 cv
cp
2032.32 1370.87 mo
2032.24 1369.98 2032.16 1369.1 2032.09 1368.21 cv
2038.88 1367.39 2052.63 1366.74 2052.7 1367.23 cv
2045.91 1368.44 2039.11 1369.66 2032.32 1370.87 cv
cp
2067.46 1369.01 mo
2049.67 1379.29 2005.83 1385.12 1994.73 1384.67 cv
1998.11 1379.36 2031.92 1372 2067.46 1369.01 cv
cp
2003.36 1428.06 mo
1983.59 1428.4 1957.7 1432.09 1934.35 1432.49 cv
1934.24 1431.44 1934.14 1430.39 1934.03 1429.34 cv
1962.19 1421.44 1990.55 1414.54 2018.14 1408.96 cv
2012.92 1415.71 2006.23 1418.03 2003.36 1428.06 cv
cp
2005.29 1465.01 mo
1975.5 1473.89 1944.94 1478.57 1913.25 1485.22 cv
1915.8 1480.33 1917.66 1476.75 1919.53 1473.17 cv
1920.15 1473.26 1920.22 1467 1919.53 1463.18 cv
1948.52 1462.81 2005.24 1464.04 2005.29 1465.01 cv
cp
1926.8 1451.23 mo
1927.76 1446.08 1928.33 1441.45 1929.67 1436.98 cv
1930 1435.89 1932.92 1434.64 1934.57 1434.63 cv
1944.09 1434.57 1953.56 1435.18 1963.08 1434.95 cv
1972.21 1434.73 1981.39 1433.66 1990.53 1433.2 cv
1993.07 1433.08 1998.12 1435.4 1998.13 1436.04 cv
1974.65 1441.04 1951.18 1446.04 1926.8 1451.23 cv
cp
2000.09 1439.68 mo
1999.44 1446.34 2000.78 1450.58 2001.04 1457.43 cv
1993.77 1460.82 1945.62 1462.46 1922.75 1458.22 cv
1924.6 1457.18 1926.36 1455.61 1928.32 1455.18 cv
1952.79 1449.8 1974.55 1445.17 2000.09 1439.68 cv
cp
1898.44 1483.91 mo
1897.21 1479.13 1895.98 1474.35 1894.72 1469.45 cv
1902.61 1468.79 1904.02 1470.31 1901.91 1476.36 cv
1901.08 1478.72 1900.49 1481.14 1899.8 1483.53 cv
1899.34 1483.66 1898.89 1483.78 1898.44 1483.91 cv
cp
1872.93 1461.82 mo
1882.06 1464.27 1883.02 1469.11 1877.43 1482.62 cv
1875.78 1474.98 1874.44 1468.77 1872.93 1461.82 cv
cp
1891.47 1484.94 mo
1881.05 1485.98 1878.69 1479.29 1885.14 1465.95 cv
1889.62 1467.7 1892.72 1477.53 1891.47 1484.94 cv
cp
1739.43 1426.18 mo
1744.45 1434.84 1749.39 1443.38 1754.54 1452.26 cv
1743.31 1453.71 1741.14 1452.2 1736.23 1440.19 cv
1735.85 1439.25 1736.06 1438.04 1735.59 1437.17 cv
1732.46 1431.31 1732.43 1431.33 1739.43 1426.18 cv
cp
1797.17 1431.38 mo
1802.31 1434.06 1810.95 1430.4 1813.61 1439.52 cv
1807.77 1435.86 1800.25 1437.73 1797.17 1431.38 cv
cp
1800.42 1440.73 mo
1806.31 1443.19 1814.44 1444.05 1816.98 1448.22 cv
1821.03 1454.89 1821.38 1463.75 1823.41 1472.11 cv
1810.32 1470.88 1799.73 1455.99 1800.42 1440.73 cv
cp
1767.37 1424.68 mo
1774.5 1426.24 1781.63 1427.8 1788.76 1429.35 cv
1788.48 1430.2 1788.2 1431.05 1787.92 1431.89 cv
1780.81 1430.13 1767.11 1425.32 1767.37 1424.68 cv
cp
1799.99 1463.71 mo
1792.14 1464.56 1791.32 1464.12 1786.78 1456.4 cv
1782.98 1459.41 1780.98 1458.39 1779.27 1454.37 cv
1776.46 1447.78 1772.88 1441.54 1769.23 1434.37 cv
1791.51 1435.65 1795.67 1439.86 1799.99 1463.71 cv
cp
1818.15 1484.96 mo
1817.95 1485.63 1817.74 1486.3 1817.53 1486.96 cv
1805.42 1483.22 1793.31 1479.48 1781.2 1475.74 cv
1781.48 1475.05 1806.11 1481.2 1818.15 1484.96 cv
cp
1763.09 1445.12 mo
1763.17 1448.39 1763.23 1451.09 1763.29 1453.79 cv
1762.78 1454.04 1762.27 1454.29 1761.76 1454.53 cv
1756.98 1446.72 1752.2 1438.9 1747.3 1430.87 cv
1757.91 1428.32 1763.43 1431.21 1766.53 1439.64 cv
1768.64 1445.38 1771.49 1450.83 1774.1 1456.61 cv
1761.88 1459.84 1769.08 1447.7 1763.09 1445.12 cv
cp
1868.76 1513.21 mo
1869.44 1512.76 1871 1512.72 1871.56 1513.16 cv
1872.17 1513.63 1872.58 1515.08 1872.23 1515.78 cv
1866.62 1527.2 1860.88 1538.57 1855.16 1549.95 cv
1854.75 1549.89 1854.33 1549.83 1853.91 1549.77 cv
1854.97 1545.45 1855.71 1541.04 1857.15 1536.81 cv
1859.43 1530.09 1862.04 1523.44 1864.82 1516.86 cv
1865.44 1515.4 1867.27 1514.2 1868.76 1513.21 cv
cp
1819.8 1439.91 mo
1828.62 1436.53 1838.1 1440.72 1838.2 1446.98 cv
1831.66 1444.47 1825.73 1442.19 1819.8 1439.91 cv
cp
1844.49 1460.69 mo
1845.65 1465.91 1847.17 1471.04 1848.7 1476.86 cv
1844.66 1476.79 1840.7 1476.71 1835.92 1476.62 cv
1835.66 1476.1 1834.83 1474.5 1833.72 1472.34 cv
1832.48 1473.44 1831.72 1474.12 1830.38 1475.32 cv
1827.48 1465.91 1824.69 1456.8 1821.86 1447.59 cv
1831.91 1445.97 1842.68 1452.55 1844.49 1460.69 cv
cp
1806.48 1428.44 mo
1780.79 1421.5 1754.24 1416.9 1726.97 1415.79 cv
1731.72 1410.09 1731.67 1410.54 1739.19 1412.04 cv
1747.86 1413.76 1757.01 1413.88 1765.6 1415.81 cv
1783.34 1419.78 1801.06 1423.98 1818.4 1429.05 cv
1833.88 1433.58 1865.78 1444.69 1867.12 1443.62 cv
1855.34 1438.92 1843.56 1434.22 1830.79 1429.12 cv
1844.48 1429.18 1876.3 1441.6 1881.91 1448.98 cv
1879.65 1448.59 1877.9 1448.29 1876.15 1447.98 cv
1876 1448.26 1875.84 1448.53 1875.69 1448.8 cv
1878.02 1449.83 1880.36 1450.85 1882.7 1451.88 cv
1882.56 1452.2 1882.42 1452.53 1882.27 1452.85 cv
1857.05 1444.62 1832.19 1435.38 1806.48 1428.44 cv
cp
1845.46 1445.39 mo
1846.11 1445.1 1846.75 1444.82 1847.4 1444.53 cv
1851.28 1445.69 1855.27 1446.63 1858.98 1448.12 cv
1860.44 1448.71 1861.28 1450.53 1862.4 1451.79 cv
1860.69 1451.96 1858.84 1452.57 1857.3 1452.21 cv
1854.17 1451.47 1851.08 1450.45 1848.26 1449.06 cv
1846.97 1448.43 1846.37 1446.65 1845.46 1445.39 cv
cp
1857.51 1477.79 mo
1856.91 1477.87 1856.31 1477.95 1855.71 1478.03 cv
1853.3 1470.69 1850.89 1463.34 1848.47 1456 cv
1848.83 1455.45 1849.19 1454.91 1849.55 1454.36 cv
1854.74 1456.27 1859.93 1458.18 1866.45 1460.59 cv
1867.8 1466.39 1869.48 1473.58 1871.19 1480.94 cv
1861.16 1481.13 1861.21 1481.13 1861.96 1472.6 cv
1862.23 1469.58 1862.18 1466.56 1860.75 1463.58 cv
1859.67 1468.31 1858.59 1473.05 1857.51 1477.79 cv
cp
2041.85 1483.91 mo
1992.49 1495.05 1943.13 1506.19 1893.77 1517.33 cv
1893.45 1516.79 1893.12 1516.25 1892.8 1515.71 cv
1896.36 1510.87 1900.89 1506.38 1903.29 1501.13 cv
1909.13 1488.36 1920.56 1487.14 1932.24 1484.9 cv
1957.31 1480.11 1982.31 1474.77 2007.31 1469.48 cv
2010.27 1468.85 2013.07 1467.14 2015.94 1465.93 cv
2016.01 1466.44 2016.07 1466.95 2016.14 1467.46 cv
2027.09 1470.18 2048.98 1476.61 2048.97 1477.09 cv
2042.99 1478.46 2037.02 1479.83 2029.6 1481.53 cv
2034.54 1481.62 2041.76 1483.19 2041.85 1483.91 cv
cp
2092.32 1410.51 mo
2093.09 1412.53 2093.06 1414.87 2093.52 1417.97 cv
2080.53 1415.01 2068.76 1412.33 2057 1409.65 cv
2057.17 1408.82 2057.34 1407.98 2057.5 1407.15 cv
2067.94 1406.48 2078.38 1405.61 2088.79 1405.38 cv
2090.09 1405.35 2091.57 1408.55 2092.32 1410.51 cv
cp
2087.15 1399.98 mo
2074.07 1402.35 2061.66 1405.17 2049.19 1406.47 cv
2045.73 1406.84 2039.07 1407.37 2038.48 1400.27 cv
2038.34 1398.57 2033.43 1396.23 2030.73 1396.43 cv
2008.73 1398.04 1986.73 1400.19 1964.73 1402.17 cv
1965.55 1402.77 2003.23 1401.32 2021.25 1400.05 cv
2023.41 1399.89 2027.91 1401.62 2028 1402.35 cv
1998.16 1409.66 1968.32 1416.97 1937.47 1424.53 cv
1938.35 1417.46 1940.39 1411.33 1944.58 1405.85 cv
1945.24 1404.99 1947.61 1405.25 1949.18 1404.97 cv
1954.39 1404.04 1959.6 1403.09 1964.81 1402.15 cv
1958.84 1402.28 1952.84 1402.41 1946.84 1402.55 cv
1946.65 1401.93 1953.02 1397.56 1956.4 1396.02 cv
1975.75 1387.21 1996.22 1388.04 2016.33 1385.44 cv
2031.39 1383.49 2046.37 1380.46 2061.36 1377.72 cv
2069.97 1376.14 2077.75 1378.76 2081.06 1385.3 cv
2083.28 1389.7 2084.87 1394.42 2087.15 1399.98 cv
cp
2066.92 1345.79 mo
2067.44 1346.67 2067.24 1348.53 2066.57 1349.4 cv
2065.78 1350.42 2064.11 1350.85 2062.82 1351.53 cv
2063.81 1352.87 2064.9 1354.15 2065.76 1355.56 cv
2066.61 1356.96 2067.24 1358.5 2068.65 1361.37 cv
2036.32 1363.53 2004.92 1365.62 1973.51 1367.71 cv
1973.29 1366.66 1995.36 1354.95 2006.73 1350.45 cv
2012.14 1348.32 2017.78 1346.72 2023.41 1345.32 cv
2025.51 1344.8 2027.88 1345.83 2030.12 1345.63 cv
2032.38 1345.41 2035.4 1345.22 2036.75 1343.85 cv
2044.22 1336.2 2061.83 1337.09 2066.92 1345.79 cv
cp
2235.45 1480.75 mo
2225.32 1474.48 2215.08 1468.19 2204.16 1463.2 cv
2191.61 1457.45 2178.13 1453.36 2165.29 1448.09 cv
2145.89 1440.12 2126.66 1431.82 2107.48 1423.43 cv
2105.78 1422.69 2104.42 1420.52 2103.84 1418.68 cv
2100.34 1407.68 2098.21 1396.07 2093.43 1385.7 cv
2089.9 1378.05 2087.28 1371.07 2088.81 1362.33 cv
2090.22 1354.3 2091.38 1345.91 2085.69 1339.15 cv
2080.59 1333.08 2075.84 1326.57 2069.78 1321.47 cv
2057.86 1311.43 2043.43 1305.76 2026.99 1304.09 cv
2016.68 1303.04 2006.44 1301.56 1996.3 1299.78 cv
1987.29 1298.2 1978.57 1295.49 1969.53 1294.09 cv
1956.7 1292.1 1943.72 1290.65 1930.74 1289.33 cv
1908.01 1287.02 1885.24 1284.91 1862.46 1282.87 cv
1854.29 1282.14 1845.64 1279.86 1837.92 1281.77 cv
1821.49 1285.85 1805.27 1291.55 1789.43 1297.84 cv
1773.97 1303.97 1759.12 1311.73 1743.93 1318.62 cv
1740.06 1320.38 1735.98 1321.72 1731.9 1322.93 cv
1728.93 1323.81 1725.65 1324.96 1722.8 1324.61 cv
1712.1 1323.27 1701.65 1320.55 1690.88 1319.83 cv
1665.07 1318.1 1638.85 1320 1613.25 1315.8 cv
1591 1312.15 1568.2 1310.72 1545.79 1307.64 cv
1533.91 1306.01 1522.31 1303.07 1510.65 1300.53 cv
1505.6 1299.43 1500.84 1297.1 1495.72 1296.58 cv
1478.07 1294.79 1463.18 1303.48 1448.22 1311.66 cv
1444.64 1313.61 1440.07 1317.27 1437.27 1316.52 cv
1423.83 1312.94 1410.83 1308.11 1397.31 1303.6 cv
1397.94 1302.88 1398.55 1301.98 1399.37 1301.31 cv
1416.43 1287.49 1433.8 1274 1450.51 1259.79 cv
1464.24 1248.12 1477.62 1235.99 1490.36 1223.35 cv
1504.56 1209.25 1519.19 1195.21 1531.28 1179.58 cv
1550.65 1154.53 1568.77 1128.57 1586.08 1102.26 cv
1596.7 1086.1 1603.69 1067.96 1614.35 1051.84 cv
1624.64 1036.28 1628.37 1019.69 1631.92 1002.77 cv
1634.13 992.215 1636.66 981.639 1637.82 971.036 cv
1639.71 953.816 1641.59 936.499 1641.59 919.352 cv
1641.59 906.947 1638.77 894.7 1636.77 882.478 cv
1635.43 874.307 1633.56 866.226 1631.41 858.262 cv
1630.5 854.889 1627.84 852.073 1626.72 848.735 cv
1624.42 841.892 1623.49 834.448 1620.45 827.995 cv
1610.77 807.478 1601.44 786.69 1589.96 767.174 cv
1579.15 748.816 1567.5 730.853 1549.66 717.307 cv
1531.38 703.425 1514.28 688.034 1492.67 678.626 cv
1470.45 668.957 1449.42 657.044 1425.4 650.681 cv
1412.1 647.162 1399.67 641.284 1386.42 637.636 cv
1362.82 631.14 1338.28 628.162 1313.36 626.991 cv
1305.54 626.624 1297.75 625.988 1289.92 625.795 cv
1279.77 625.544 1269.61 625.283 1259.43 625.631 cv
1247.72 626.03 1235.89 628.014 1224.3 627.657 cv
1204.01 627.033 1183.85 629.302 1163.6 631.635 cv
1157.38 632.352 1150.79 631.905 1144.84 630.56 cv
1133.87 628.083 1123.3 624.414 1112.48 621.478 cv
1083.88 613.719 1056.4 602.943 1026.39 598.965 cv
1009.64 596.743 993.321 591.909 976.438 591.056 cv
953.905 589.918 931.016 590.652 908.278 592.163 cv
885.873 593.651 863.459 597.023 841.06 599.735 cv
823.502 601.862 805.857 603.488 788.439 606.744 cv
773.161 609.6 758.064 614.095 743.032 618.445 cv
726.235 623.307 709.196 627.764 692.997 634.312 cv
671.56 642.979 650.577 652.991 629.898 663.418 cv
616.793 670.025 604.413 678.164 592.048 686.125 cv
581.542 692.889 571.499 700.346 561.309 707.574 cv
558.876 709.299 556.764 711.451 554.344 713.198 cv
540.556 723.154 526.272 732.529 513.038 743.122 cv
502.107 751.873 492.334 761.976 482.167 771.593 cv
471.252 781.916 460.12 792.069 449.767 802.877 cv
443.174 809.759 438.548 818.357 431.769 825.029 cv
417.782 838.795 408.426 855.046 399.863 871.721 cv
394.099 882.945 389.472 894.64 384.513 906.182 cv
378.272 920.707 371.502 935.11 366.298 949.906 cv
362.145 961.714 361.075 974.327 356.721 986.061 cv
349.036 1006.77 346.262 1027.97 343.248 1049.11 cv
341.562 1060.94 341.93 1072.97 342.352 1084.82 cv
342.901 1100.21 343.527 1115.69 345.794 1130.79 cv
347.794 1144.11 352.439 1156.88 355.314 1170.04 cv
363.469 1207.39 381.595 1240.1 401.552 1271.91 cv
407.949 1282.1 415.787 1291.44 423.214 1300.99 cv
429.445 1309 435.67 1317.06 442.549 1324.55 cv
453.776 1336.77 465.533 1348.54 478.738 1362.23 cv
464.709 1361.96 452.337 1361.72 439.965 1361.48 cv
431.142 1361.31 398.221 1358.57 389.554 1357.61 cv
386.863 1357.31 345.855 1373.94 365.709 1403.95 cv
374.589 1417.37 410.79 1426.41 410.934 1426.03 cv
411.575 1424.32 430.548 1423.35 437.63 1423.32 cv
463.52 1423.21 489.435 1422.76 515.336 1422.49 cv
530.664 1422.33 546.146 1421.3 561.249 1422.53 cv
570.55 1423.29 579.577 1427.3 588.21 1430.27 cv
621.112 1441.56 652.429 1456.43 687.432 1462.92 cv
708.703 1466.86 729.896 1471.08 751.168 1475.02 cv
760.206 1476.69 769.443 1477.67 778.425 1479.51 cv
784.747 1480.81 790.622 1483.74 796.997 1484.68 cv
808.536 1486.37 820.296 1487.13 831.969 1488.24 cv
833.308 1488.37 834.743 1488.61 836.026 1488.29 cv
848.688 1485.09 861.181 1486 873.815 1486.3 cv
885.472 1486.58 897.297 1485.16 909.043 1484.63 cv
929.941 1483.67 950.833 1482.91 971.732 1481.86 cv
979.15 1481.49 986.636 1481.01 993.995 1479.74 cv
1008.1 1477.31 1022.11 1474.17 1036.2 1471.54 cv
1051.61 1468.66 1067.37 1467.29 1082.42 1462.98 cv
1104 1456.8 1125.05 1448.52 1146.35 1441.21 cv
1160.84 1436.23 1175.42 1431.53 1189.87 1426.41 cv
1199.27 1423.08 1208.71 1419.69 1217.75 1415.51 cv
1233.48 1408.23 1249.01 1400.51 1264.44 1392.63 cv
1281.4 1383.97 1299.66 1377.69 1314.76 1365.51 cv
1316.26 1364.3 1319.77 1364.2 1321.7 1364.93 cv
1325.82 1366.49 1329.42 1369.09 1333.4 1370.99 cv
1347.38 1377.68 1361.52 1384.11 1375.41 1390.95 cv
1381.28 1393.83 1386.74 1397.41 1392.28 1400.81 cv
1396.49 1403.38 1402.35 1405.24 1404.33 1409.05 cv
1410.02 1420.02 1414.05 1431.84 1418.87 1443.27 cv
1421.46 1449.4 1425.98 1453.58 1432.72 1455.88 cv
1443.29 1459.48 1453.84 1463.2 1464.07 1467.5 cv
1475.44 1472.29 1486.54 1477.61 1497.57 1483.02 cv
1504.84 1486.59 1511.91 1490.53 1518.81 1494.67 cv
1528.43 1500.43 1537.37 1507.26 1547.41 1512.28 cv
1557.59 1517.37 1568.48 1521.07 1572.88 1532.45 cv
1574.1 1535.6 1575.27 1539.23 1577.73 1541.31 cv
1580.8 1543.92 1585.04 1545.45 1589.02 1546.94 cv
1600.43 1551.22 1612.05 1555.09 1623.42 1559.44 cv
1628.85 1561.51 1633.84 1563.45 1636.66 1569.68 cv
1643.37 1584.45 1651.23 1598.73 1659.41 1612.76 cv
1668.15 1627.75 1680.93 1639.03 1697.41 1646.41 cv
1713.59 1653.65 1729.74 1660.93 1745.97 1668.09 cv
1756.71 1672.83 1766.05 1680.21 1778.57 1681.72 cv
1780.22 1681.92 1781.49 1684.36 1782.78 1685.88 cv
1792.41 1697.26 1800.82 1709.88 1811.95 1719.74 cv
1822.46 1729.06 1835.18 1736.59 1848.09 1742.97 cv
1868.48 1753.05 1889.34 1762.85 1914.64 1759.4 cv
1921.31 1758.48 1926.67 1755.62 1930.5 1750.57 cv
1934.62 1745.13 1937.09 1740.19 1945.86 1738.04 cv
1962.62 1733.93 1974.04 1719.94 1987.54 1709.95 cv
1996.55 1703.28 2004.26 1694.99 2012.8 1687.69 cv
2014.36 1686.35 2017.49 1685.25 2019.21 1685.77 cv
2028.48 1688.56 2037.58 1691.79 2046.65 1695.06 cv
2064.17 1701.36 2081.48 1708.16 2099.18 1714.06 cv
2113.35 1718.79 2127.75 1722.46 2142.77 1712.1 cv
2151.13 1706.35 2159.27 1688.42 2156.28 1679.66 cv
2156.01 1678.87 2155.88 1677.95 2155.36 1677.34 cv
2148.37 1669.18 2142.54 1659.94 2130.48 1656.98 cv
2125.99 1655.88 2122.38 1652.41 2118.04 1650.67 cv
2107.17 1646.33 2096.45 1641.42 2085.04 1638.51 cv
2073.38 1635.54 2062.74 1631.18 2053.41 1626.41 cv
2056.06 1617.45 2057.9 1609.29 2061 1601.51 cv
2062.62 1597.46 2062.57 1594.57 2060.5 1591.23 cv
2050.84 1575.7 2055.4 1566.42 2070.08 1556.96 cv
2074.87 1553.87 2080.67 1552.29 2086.01 1550.01 cv
2092.69 1547.15 2097.74 1539.86 2097.81 1534.21 cv
2098 1519.22 2098.56 1504.21 2098.97 1489.05 cv
2104.53 1491.12 2161.88 1517.46 2186.76 1524.64 cv
2210.18 1531.41 2227.52 1523.9 2238.44 1503.11 cv
2241.97 1496.41 2240.84 1484.09 2235.45 1480.75 cv
cp
f
1238.67 759.372 mo
1238.71 759.387 1238.77 759.412 1238.81 759.426 cv
1238.75 759.365 1238.7 759.297 1238.64 759.237 cv
1238.65 759.282 1238.66 759.327 1238.67 759.372 cv
cp
f
1840.85 1574.75 mo
1841.04 1573.96 1832.03 1568.25 1832.22 1567.47 cv
1825.24 1566.01 1818.25 1564.55 1811.26 1563.09 cv
1810.92 1564.09 1833.71 1573.51 1840.85 1574.75 cv
cp
f
1235.72 656.218 mo
1242.68 654.751 1249.81 653.247 1257.27 651.674 cv
1245.18 648.159 1235.77 650.891 1235.72 656.218 cv
cp
f
820.051 783.995 mo
834.442 787.615 837.724 777.931 843.128 769.567 cv
838.786 772.832 835.305 775.795 831.473 778.225 cv
828.179 780.313 824.484 781.792 820.051 783.995 cv
cp
f
2069.59 1518.91 mo
2059.85 1520.12 2040.49 1524.26 2040.53 1524.72 cv
2046.54 1524.35 2052.55 1523.98 2058.57 1523.6 cv
2058.71 1524.34 2049.62 1529.77 2044.82 1531.28 cv
2025.16 1537.47 2005.53 1543.82 1985.73 1549.45 cv
1962.26 1556.12 1938.67 1562.32 1915.05 1568.31 cv
1904.18 1571.07 1893.09 1572.78 1882.13 1575.15 cv
1879.58 1575.7 1877.16 1577.01 1874.67 1577.98 cv
1874.95 1578.87 1875.23 1579.76 1875.51 1580.65 cv
1919.13 1574.35 1960.88 1557.37 2004.68 1552.09 cv
2004.6 1551.5 1999.31 1550.86 1996.75 1551.13 cv
1996.7 1550.85 1996.64 1550.58 1996.58 1550.31 cv
1997.76 1549.72 1998.89 1548.98 2000.12 1548.56 cv
2023.39 1540.8 2046.68 1533.11 2069.92 1525.24 cv
2071.67 1524.65 2073.04 1522.84 2074.59 1521.6 cv
2072.92 1520.65 2071.19 1518.72 2069.59 1518.91 cv
cp
f
1902.05 1604.21 mo
1902.27 1604.17 1902.5 1604.12 1902.72 1604.07 cv
1902.58 1603.93 li
1902.42 1604.03 1902.21 1604.12 1902.05 1604.21 cv
cp
f
1902.05 1604.21 mo
1893.53 1606.01 1885.02 1607.81 1876.51 1609.62 cv
1882.95 1611.12 1895.39 1608.04 1902.05 1604.21 cv
cp
f
1902.58 1603.93 mo
1902.72 1604.07 li
1902.72 1604.07 li
1902.73 1604.08 1902.58 1603.93 1902.58 1603.93 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.0.1
%%For: (\714\740\760\750\755\740) ()
%%Title: (Pluga7sas7070505500.eps)
%%CreationDate: 6/8/2019 11:06 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBij'1o(Va%cC+-o/0keBW3s#9,f.Kf5TgU\qa,rf^qj6fbY7G_s(?iH=5C/nYd'S;>\pQu6cQK[X6SE>>+1l$eN:0:\TX:>
%s0ZYo$8W7cYO+<(E%TBA4Rr;e1G^],#>seZ:G_%b[cHk"`cisAA)*"r4dQAA)96nT3+"=^W_on3hlIWh<boBTWAe&)`qn#cB'b7b
%oM'"HLan\dT15sr(,'>pG0<$$PUfV)hQ2HK_onG&BHQj(2_>q:'At[UbN#]S2'#0R2XQRf7e`='c!59\C?;)@:C#9M\^bSPm;fo6
%AI`"P>Fq;[0PZ:+$^tnb&G.bO?Q/b(2!e2qC/(JTMa"T4$qrBolo!/<i_^aK,l#F05O'o\G8oP673F_?mHQ'H[LCo0e2mL(H)tGR
%%\@Ao/q%U$!TM6'BURsV!eX!?[8@7b&YGdDA1$e.Rs#?F)3`A58kV:*:.$&7B4V.bpZR6$7r6kMi<4U!8E'&GbOli<VK_OW+6D_4
%A`H2nQD16?he]WI=T/i%UZDe8is:iVYY?KT8SREA#G"K:HrDQ)$)nuT"mVIul_UOH8E`cJW.]Qf#orHL]#R\#4H%o]`:Z_-VmL:8
%B)LJc:3@r^)1a,g?=^5OeW/p5H..\;/)6*D>Jq.ti+6_=\qZWXks%4(.klV_DG^Z)G_Qe"npL@]&^6(,ifte7EhA/2Y?=%>f9ZBN
%0c#DWe+C<+/=1\D/1nb@s7"MU5Of]2^O#4!Litk[`NTX6G^VNe(hRCS&5-rk9'c.":8`e1F2S\Kig*489RkgoK>4013XlN+2]TT4
%dsuHJ'EA'd/+oH_]O0pMQ^c6GVm05`XoJCTCpm;-M2\o@Z!D:rH'aK'POJ.aS2'oo[]If`B7@90qXoO<F\UEKHIP^I],&+>e/+.p
%?\mQ(#CjA8m]&HKdbN[O11@^J2e$i]ZY!aHDeUd&)?2qGG`iO^W-T,)[S9E^#Q'ZrDf;cY+H?YXrpSP4R=:uBW4=g$ImfQJ"7*"%
%dqiF,'%Xps_-d,Xp$^@;6E[]gM'Phe8jf-LrkKX?OmWh;Vj4NLW;Sp1Sr!srF@tXZ@aoVr5I*Z9X#*K:P\X?tphYj*$@qSN"kW?T
%HK#6EbZ6/"HYP"Sb(gd1]6O=9elG`IXk!0`p,VBeW)d[3F/fdL%HK,#s)-U6#JWVrTiOdlZ1Y>!.A&K8`d,+.jI2Xj\T(TP=+7t4
%XTWdd'P]#bl=^23"!_:?e`;]S>dJVsP+bP:Qa_n/VEBEQe?&&fe5?-181hG$%D<T&;f-g`1o)bSLAk7?l&PVJ[&<S[['W$&e4t;+
%.2\fcbLe5.8S&F["kWH.r%fT1\Pk[`-%$2P<_r"GEi[oX`,<<mB!aN\X!/lY2G4`*ePu1'l./C-,=3&!UCU];UM&6KXHr,P`&kQT
%25/R;B"M<L7#+!2m3n7V5:eQr/t]n7R4/.Ms"+sJ;!s2ViiP0p,aqiBm3Ue0>7+cr=tP#p'-@$fJn@g%20)HN_bR`_.H=D"DpO9B
%*PF=Q\kYT6BLO05mP]A)+80m9*g;#C[%A-NJ,`4[\Q[FqhJ@qC17@=KZkZ.JR3Z7+,UF`g/I<"edV%8@s)K&e9%#UCD*^5XV,"1m
%#,7;O/ts&eKjQqcH`+F&n%X;IrO:>7IkuT)ImX+\N2$%_rE/p:jr]A.gr,7D5E^JCr=dORQ@<lPZYno>`XT8iP6k[FO"D@1$BK`-
%kpI$FOV@%):Ho"[TVX3_[N*Ju4A/k/Q2UZjB>53[rL]ZY>ktZ$IX5tf?._=:Pulnhd>V4_R@jc.psDnGK)-tP1#s:\OKbg9):ILD
%.CcQj_s76pA&G/]@p3i_1_Kb6h;@(MlsbhOAOoN"[W(j<2?s*?iua^%s'P6ojRc66IffW>q+(":7mAX)3:p_0O$u:+7$B!qs*jub
%,JULtOe\Q87R03;L>;8Vg^Ro6VB9S@Cm_Tj7R!GOcfalP]UtO90CS%o]M2@B`lIq6+PfQpl&B(^BE@?%_n(:#<X%kj=9B!a@(#t7
%Ut7q,1F>k!s/Z`]HnaoRTdTVL7YQE:3%-HbH8nH)6(L$rJK]/pRH%P9-#nFid5#6oZ(\HsF?p2rG^,9SMoKC_#K^B##KR4!0M2#L
%NXA&YfCM.QYXn.*!9O)'*YF6NBhC1dbWhX(]?0/]RPWNR,GS,Q<*p]\h'BbGNQC-XpTq+uJ%aaqGuZLdr&J+:+u0unIua;=`L-V)
%>,fo9Me$<Sb9rj(7/li\Fj)b5iT38Bo5^\WN,%.c17#@`mG=3)Vu7:V*r9oCTUhK,Q4@WWg0&p'5Jg#_pH"AXBBSY*rG#b@Fe]tq
%*>c^6S3P2np3@!YFMHQ3-4M@f;h4CZ]Ku<C"UKV6*XLH$j(tQ3*Zg6eTTi(u?pU^F!iF7on3gGs1eaeu]/V+"!k>u$$gBno2jr=d
%1f$/tW)ejH@n2LsM3dSj[g(2m:mt7^;b84pj,USPN\q`@>,Sr5CkmL.BkTEXq6j\2eIUDG%_@]&Xi:7#*)-N>?gh4J!ZBH-%G48)
%M@.Vl7u'&WNEWsD5GbS%#(a8oK$cn?3Z9;$&mN-M*,ako%dTZt1"oV&L(oNJQ:B9P`a.YjCVs[S59/8A!AYA<#r(Y(W#<&0bnRDS
%]&#3WXOjM4HA_lt.G3`hg'&EGUGoEAO%t\"W@Ko^i(RFeE<9QH>WHH^b5H7gEi70D/GmSjHFYnUjotm.gWj%2<h)3lj5nL]#_Yp#
%\Z%5@p#W'bgsh\fS'I(9[sY_ci(Sq[[qORuD_<%Aj6t=UU-GBpiH\P*s7r]/FHbqW.+QX=mN#.%-^Dt2M1.s#SQ<@eO8^R!7DDe3
%6*gA>>614%Vq!8P[G:7M)fN>K`VGbHM"T1Jb4Tj-1\R>G5<WjPm;"-7Nq.ZKNQ*RKFmH]Sa6,7@>^f1&U]QGqL&=BRC&[;kE;-D/
%^\k1/$$#6Z[fmah>4-NfdFTZ7^+`J*%RJpMK[#Lk)YI959*<bq+h%Y`HMH(W[8oB%&U_88[fp,r!gZlbGo@Hn_d]!na83ACW5Gm]
%=!f9O*Hk@I1$8Hh3VBAepeM5Nrc@B``dYU+C[\'WE%V!7gGm\,BLaT.M)9NV/(Ci5Hg[J>E5S'f1s9l3o&s[gNcC6_.I=AK42l34
%dhpi,(MVO^iYK)bXsI^ZQl?jZ!Zui'if#f)_e?4a#'$.&JG+Fo*pQ^!U11cdd5(Df0l301kLHN%L?JT7Q/a,N_)I3OhaF-pk(2qi
%c*I\CS4IEC]emBkkOGbD@TqkLXn!>8Njq_^5,lh>m),8@?l8L.Ap3Kb]j@o'RSi^L'H+(<]oBXCDaS&5>k5m%=ZU7N&pLuoTDu&n
%AYjoc@U.,6k:uB+V,YIPeaKA>\Q`u1cLFm''T.&Bh2o5p`pSHJ\k?,fdThZt$EpGuqV*(<?)WOl$Sj5$hJ7.beh,\*ppV)fJu`;J
%i5PIjPVr0IT#P0.(g]u=bh-,J.1/;;%k,f/NQD80;NT`,!<orX"li?Kl=&4@P:3D/^sYhZf&!NA+5:9CH_$?mEK5Or9/]3?D>cSu
%eY:2p<8lHlV9,W@)0/sN*Mc6/h&O/06Z-&]jNFYp,qMN1FlRAlQq3K@%;EBfWOBq<FOJ7?Z.GTs_FkQ;5C9TJ26M<@I31r]bobD:
%gMt8R5/Besjf!D$?7.#<>J?ppMm4').=CN>&IE0%)1+_-c)ok&_BV^nNS@3,(*fB9/!Y2k4-eP^itQUhY,AO]l=3PdVp0NFbuo"p
%>I,Q/l2>/V.QU3Ka`YAQ![XrG)?*;1%a!sYfM!aA<R4n0PSE&?dQIFuosu_/;Fp-W5i'Cdnbu%1G,bLY!SNFaB2&D6WDplAh:$o*
%m<Vu5e`sP!+;Kg*C?M&&ME[[GSSnn;9">^k.5&p\_b+pXT&pMNU?eq-(1F=M9m$pRs4.\J^k:;UrFmS#=?(!5]2XWM#+.sg?VDtI
%`[O*@MR(6nfC)T`8fD*W58]S.GW[QHdBJU%.E_;%LL[K9mY7gW9=6/sN;X'^77hPOA$:#QWQo30b-VrG^S5SB[4((tleI1tPiA7:
%71oP%[4#`aE)M9JP?s01l7Bq],i#5"PVg17]cfE`[4%6#V4#8jRT)+i"0$:0B0"WUcV%9K2Eco=HfE'+*5oV'Mqd%'SU,`nG3_-6
%cgNjm`IY0`e6coVY`nXRT=afYo''(bVK2'BaYdudf2A8L.bCP<D(=-a6EY/^WF]hI:!L(c(2FM<F=Ph<;XJ'oD/-.HNO>`bRnC*#
%,1VhoU#T@uDiYi0;P;rt.KMM?URSTPS?c!!'MR1nb!q`NBYXIH<8"I.5EC<a]t)n.b&829MY]8SM?g+Qi"CHV$``I'Ki0%m)-,ui
%YPV,L_cruK%(X+=mWKZh+q1_cR>,\F?dk\*(&CW(?_K-34&gVYdZEDj4;h^p\=Yr#AKYZqr`GD*XV@=lCVsLDga>9(;:s0l,0!%.
%gB-c&54PK"^b]=e"*V/GpbH`adG9+GiCU$cE_f@@Il_PghXd1j+3%LhUa39dBDuARg8ML%,1u4WGROGf#_<pB`Q%mdp/"AMn=8-W
%9Rmd*"]E;6/r#Y<,``%uDTs\+!CIe!\@=uq\="0QH`<MZjE`O3c.@.bc?R5\N:csS&E?&WGNkNE2frHI?9*bbEr3Kf[F=@9s(Nc>
%M2@$-1?%l&ht3f'=QFu#_QsrSq;4@AVto5$R$m)dVto5"/7jnD[`k#$&nd[)S`Y<t3StNI9ln%4QLgZ]j^SGY-R!"UjoNJ9c?C8A
%X_H()]Oel!an_7FVl-(BD\8BSr_F!NfSb7o!DX*jHG)dc>:n+i>T%NsNa<%nf4gh>'n2PDdIhqDa8"-uMkgNWYP2m"oeWUIl@4fu
%X\q>EDc;G1,+clF!kQPW;X1)u;[:bWfec%h?Y.3AZXsp%<lb]+<lhHtT@I$B.+]tHH_hUF<pIr62DgaVOeK*Cnfladno5R4)[P.S
%IQ!1Xh3d#qn[%aAQ@tkSWtYK1>j\nR^#Z>Wd,LY+7:fd4E2!^<Pql7$k^1K]RXCO:`#WNn>HLWA/%9XkX3ZVJq`>EGC,M_0M=p#e
%\g8KI`$7,")h0_9?)@t<>TIj#!2^<*nSW7V:V&StXA<dJ,>.%D9`m&t^rnS(Em'"M*G/0"(EJ4gprbM`1(Cli"#&-=b;A]D%D7Y-
%#C=u'09p>4&sJRET*CCg/G!dsjA>`Q'-0BM;<VR08=G4kd':>]4+5c"3(ecZ2sSH^@2!?_)#&e[gpK'ngkDY#Uj7d<\3Fi);JtrY
%je3:]8Q:Z5$Zj?q.8Cs?1![p]qBVs.:ladofMjMa#n3#l([occQu;-<:R0sG;3$j-Dnc;T:7o6WIJVB/O_K")q!^Bsec38qYMP[2
%UaU@6ApPtW/8^mk%mZUjB>6mt8b&Or;MmDuEi8G>RBbrQqWV]EC4h\<;(8>$Ri"/IL<bNf[lukMldg?1O3d'?d0KG.'RD^/JT3c>
%Ik_s$3JTB_cmHRr'=KnWRR5>qFHo5LNjkk;KTcV15Kfm&Q$'[qD#pskg_@Q"Ym53p*)$T*)Iqg2gB4/da1)M<OIjHHVK%R:p0YIH
%*+Q&Z@"0*8(`1K4drC='F>f+gN4GgV`\GJ5N)/INdl>@#`%g2D[DPt_/lVf:0)0(Wc*5h1/$J7"1r[[RgdoA*VnWt.MSHZikB;AH
%&L!PZq_AU7@kUU*4E@COWU:?[rK6AR(s1(4"]VUQfIjXk_kOYhJH5=(.T]Naf%9f-J28u1*hm`h[\?)EqU(.7`AG=$V>_,Xp@$Rb
%L,(470@?r#;-`cKVq0=/]pe(G\D(jdEX/5&F@VoAPXa;"*ud$J[-;(Qr_4nRqUhJ;?%$P9^D6N(l829t'bY&@)&,d+'90Vj3dj-3
%[BN?g-*M$U1efgbDA@Pq!bXh,^=%Nek2fo`5T'N1YF^V8*qk8=8W!LC'+-1Me/i1e9j0RY!8X>NI#;*gBbXdh2C;:;F)8_G;d\r7
%Lkr#h2tc=1hV?VM)]*IjhV:)A0N$\3$A2mSc.rPAmLGP<h(aC3`A7dsrnMboF"*,clHW,[\Z%[B&'rarS%<Yir?(cO\T=acR1OR[
%;;;2-/fbM`n'\nMf1Tc$0TBV6qK$ksT=\lWppafEA4UuKIb\'\KnD10Y/Ku.R+(4jh!sQ"r8QmLhVnS7>+p>5_X#f9+QIWsd1nE<
%eLRhi:F]fC@`;/<ogW%7[sp$.$E^_i5:^HBe@OOSd9XmRHV]SO8.!V<YYbFS2j%@0p)p6$o/>L#_iIAos7JK10h4)18DfkPS*]n2
%h%@[Moa<)o7]*#3A`gMGZP3q;dD2p:C])?M1eu?X&[qpLMW14.Vg00rUVgQ.cBRb_5/sLt=<oJ#ID'P,W^"g.h$C2,Kgd!tY;?3A
%^g/"C;C@Hn2@t$=EXr+JY'*\hcal8XlaZamm_\"K]G-E*MCS7"ap<!]mk(#)q(`?ISTNQHKn".gXAO-t-VpkT>P.)rnlF7sZ09Uu
%&hSicj0(qc(8\<iXpu=ZP9JfL%4o2n6`-a;e0pb(7K:R[RbC/.RqVF`%^kYoBVXdGmoZ497apYgBs;r?5a^nGG7'%D1$m:<al>Xa
%gS1c+0Vi-<Md,8&]2i"$k"LN[>4eAB1Y0k+`NVOS0SnJjCtnhqH)Oe)M2F$9)JK&6@b<6@c`9pCpLR$`j#@BrEEA07?l4+LQsPSC
%p#;@S0\)*]Fc^M)e5(5I?."Xq(dXb-CiEX=Sps8`:<n._X1O`iMR\;bn@;bA'd*7]PY!]EVQWX^Zj.7=T//RsP.V^]F=Ees0G-)<
%-;ndK7JJ3hDI$0b1Q`=*0_Nbb:Yh>a&G*q!@PI4pl^hCYhV>f)f>_#ggb%jUNo'8p4sORMR:n=/0f8S7anYT31q*P3hHdkd]D.;V
%Q>rDL5J[ku\:GqbpABLR27Vc3DE[RcmtcN$8=3($m)DmDgl."88gL4B7Q<+X6)8dQqUD10.b7tH7IO$IAte#XQQeVWQkXFn-YZ>"
%,,19eOWo:k!5D5Ih<O<SbL335W>,pj;N0BW,0NNp2"!DmD,/4>[`M4uI:8GRe`%-`EH"qVW#=/iVeP"`0SVE61TP+3N&6e,q=i+?
%agc.D%=Lo;++N<M\E#5GWD#IF^FN3Z-'nR+M<2LZK,_N-BdUG<bi=[dWV\FrDKF3Ir2O)XVcie/+cEop(S-h,a_uY.m8\eRo@8'^
%Pn*c)a)<`,%:r3*PK:g&40<R62lq^G;:F05Q=u>S^,4?KlX?Vf5#[>*G<MtX.nfMQVg(D`l_QTdUGkS+oP`o"!,]gV!5Yl[cKWIc
%b;"Zanh5GC<K?Y9[i_R;ZH`(d*XLUHG'mGns&nBs^lu*sL`AaEC0ud;?4iGVb8utMNCq^fA/]gi-SD.0che8*#P:e]R_k;\@:hV\
%&AlEla7=&e^fOk#i@EjiVT&QO6@-<Un$AB.Y02+j'7XlJVsi./-_\T52*QFCNRI:fjT.>o<\Dc(\O[]>gj>sNA[jos+[8WO1HnIX
%V@O19TO7Q^d2.g7T3_;is%Df&5jt/-!6d4fHj3oGQ3C@m;g;%Gfe7uA&![DDEMT@D@m@%_m<5;@fKVsBn(CJA1qqLXEYt4K"<cS$
%#Pd]diqM@(MhA5jHgoO*?"9)uc/E$cF[+L4G^"KnUZNS#s)4EL+44FaW1*Btnf(/"rpoPkoqYp1<<"U#BeQk(>=$/pY899#Em+#^
%RkQjD]G*;T.e./Dh*;DUULM$j_c8O9mOIK$ehk-TQ!q7Gk4i+aB]aR5;6>!=8(_X[N&63d1VO\D=Qo1Mec4gNUT.@uNA_TP?_q)A
%LdjS*MK]\W>o3qL:WbQ-G&;=Y..nmT3K2[q(n).h-G0:MUA3nB\^oQ+3DP?e1*UG33$Z[>h`;q9>UV0'O^9T3ms#C+i%0%Tm<Wm`
%`8A=%U<BYMef8c[nR6`9rGV2MiTMbts7Up0(+Zjhru;.;ScD@=Wg&Ec7uUZ\l!u=oD.DfQ$7j`DSaJ)P]TpE^PfEbj:O!aIOAA"H
%_Gi0hk+2-NXaL$8/IL7;1VR@Y#&n)f4)a0BfDoLfB#_5q3>/QYe^A1O@fdLhTNo0Z*BY_B2VB$2d:ms2=[!cF>is:9*Af[O"j9RS
%:ZqI1s"a+i=5:go=.>LSW&Ld9kiXs&pX=./]!cfIAL+mK"UCCs^?u*-*B)6<2AoX'osD0uWPH/-kUqQ)b`PeuNLGMifM$?r>9U(d
%^fXFQm"5B>Q\Gm(T%hY8YKlHh2VEL0?laZij]X`\<l/=g85Z\iKKrY?n)!CFqZfe#PUbXZne?GAa$tQ><_ra$0>(Z?O2[FMNHVj9
%rX\1:`bK#EfT4!8W_ki/L$`;M\8JU?i#cn"5tU6p;K66AGG"\oh%J</@AD[[%hbh-\e`"mqf]GIS;UP]CO_#>_t&9iJjVOV\OmR$
%@(F$HCpLN+>"9FcN##8lVdU8h&;.BhC$[dR<n'#?EHA%iF:e2a4KghTV;2&alpQ=kQ-6Ikf8/BB/o((=7D7/.cC4E$6hb^Ta79mB
%LX#Na4`$DmIS#E*)(3,B>D[f#1P7#*Q]+rU#G188mdNdO%>_S#haJB.mWI4mg>P?M,&sSBcT$_aoh)-/Olt/Sh5GIf@_a+FPc7m>
%NX3X\'-M"/dM([d+\eVJjKqL[N1@DeLBQ_-`bCcmRZ*EK5GDVV#+U@3OIt+Pn#\?/R+RjW7)i*r=52@UQ.t7h),q@Fma9lkRb\9c
%B:\NC1A:$n/lc17[/6-B@8qLa[V;V0H82LOb$3Y0YR9ajhL[>dQ1+%.r;Ht!>V&$S)n$V/X4/P1/e^`4CgC:8:l?U8jaP-fZ*LgO
%QkUKJWH<tsl):&a?"UR)Co:S-P%ru-L7Ig7iXLi9fV#QfQ)gHJQlpA"n++DGeATg,gZ:Yo:#a?+LnKaBg-&#O:#?&kq"d%tMBHD@
%P*s.ElrKfYWPi?:QDT1YCc;UGQC"8bYgtEGKY"BFJ16\8>HF&.KE.f"rZX*^UY/-H+fSKkf-7!?DUpJPQBW67]+NM=rK!o15j^kk
%q:ih1"6Fojj"s>!T32#qnBP,@:e,XQX&!sgUKh^#OU%b/EO<>fjMKm[A9b4eY`^aOgL5GjL)DgWX3/X)G%7)[P>YT$*PK`u,^$`5
%Bgm@1Cb%4m8c=:=m28oVZ!gtp<'8)YClhTFCi*,jm@W]AV:)rl:KPRVjkh6(q]Zp$^2=AaBfBiJ%1)S8lsD8D3[I`8K/Ej0e^Yh4
%oc<$Ue><jCT2_uYg>TYqnEa4s_i_pG;LS)0CNi51\UJdJ`Uk!n$7#f/AJ4+h8%bda%'8(7h(b[-_<RZd0`2#p?78l!2O'0g71KF_
%A]P^R2]Lnu)YcdsSA2P#)cKaUULEj].N(+d\n#Q:)F\;h;cB!-UUA$*DB(OVN#0)D@/a^tEt(g\W9k4)G=R@(j'B2rWrG(EX'G)f
%VH3\30R"gim=rU'qb;HDmPDOg5MN@:fleY>hkU40caJVDnVb.fC3NZ".H`>,IO1*e4"$s!8r;&"_OVMeC(Cp3+-,j,/2D$8592aC
%=m32+\pnps1PE5,%ZG*\@BHFHB`6bhg/eQ)-nYa'@8HoH:OAa8aEJOZ1OPeNgpuX=fO^Frf.,$i^Ul_KZDfd3?DI(:*R0Y3eG[NT
%"`a@]Uq`&YE+tqhhe]V.'<A%@qJEU7H6[-somb)LDt7[&rd(nK-g0_:C31r-T!DY<f>W'B'U8kVPd0k\hS.\;nMr2o!eO)&lR*S@
%"=cS#:(6C;\gTL4aMYV,d>tEcYS-9WT"qka&Q]Ud[2ZMm4CRTeZpr=\pIrjr%/=F&(4%L22gb20dWJ_j)STKAfrCUoNJ,dD`_pN+
%*3IlKmO!s?lsPoZb?"GYrh2W,=kIY\Z`=p5)2)SJJ/u-"1aBOd-06Xa#rEo5%N`M<XD;J2T[0$orNmN/b+39VQ7mY1>g74n:oHU]
%!C6@cVfLGY$+X,ffkcD>1=urLW#3Zg?t@S2:h,aU](B$W'QSUF"_f8`:jYcbYH%Y.K<S"b1\;`>S6j\HSZge^835G3HI"H*au+?3
%ohE51Ybj\KhiRnu7PgeH'sHR`F=O8Irg3ol2e.%jH+@k!d`$Du-5bICYNTUW+.^i:QAh$"7_VGh9/=&!H"=&G*3RRn]Y'Bc^!6k.
%CKGh%5]W[iWEgg2^6pIq9XP]-*PA:^.8t/VAZjq#mM&a8$?Kl>I]Q:g[ZMU1\8M3!X&8+nIKr`.l;XjmY!jd^C6KgpNJS,jcEle)
%V?P:d<2UD.fMS2sc$JE=I@o*ER8Tm]F9Zo'F\]NPfn1&UAL`OMq*9sTAPUBUeEch`b1*/l&@&S-HPOZGjVn?SFfL6AS,ZQtc_ZZ(
%o8o2F1<)2U)e)mVW"jOBMXk;e^D`O>Ycp!@&ulhFTZb$)i-Ls\OciSogH<R2Jan#/lYt/]QKQ=XCY9oDqt&SS_*E'!RWVT4>XtF:
%,RY*RLocA4^KeFK?WaAZYG67.FP<_5?J,UtHjPEM,RX4C2bKW<4^')n.+YT<)>-8E[-*_aTF%i)2/HU+lDLPJG*g_`doi#OdCBm\
%?7ROFW[a`HDkD4_27>LLmI[J?^^:na;S>OlVVN>9*IN63%AEf;71?Fre@rj:6g-0-Vc`nCOWI5s<\OChN'OG,GE(a!]e>O.=EZS9
%[h2-Q=i>>V_WGu3k[@hPe<=?U;!2HE1IW(0P5lh,$cHWlkKrKMY-6haEN_8&>HRP<eP''[.8K2`h><":TSi!g9W&VfT?Ehi%7'.;
%ik[.\O"6EL'_fdQma-7$L4o#W[*"+?Gj%la<4gqg>VE#j_6KY.M#F$Zm:Tqd$8S2;bVh$tgsM2G^>%EF'bECS&KB[85@JN_<kG)r
%gSgMOnNph]kP?2Ff_V&))^QoC8hJ:G'`Mde8;m'MP_q>E<p*;s?>[)uXhf^f[9M%fp-;Ee'Xc(r[;\s*Ib68C>Q0-'oqSHUGmJis
%#$E\::rS8D<DE_*3r[d0P(#k/k56huRj1%\?GrX^;JoRRle!#f81]B4okRPmGM;m!-Gu?Zch=.I(,)iVbWZH*g/2Sg4\9`PcKiaT
%oYP5C]<NH+rG7!R@HWMGkn!c(j"\[F:GS[&p4A(sjhIP4IagK>\ijt<erU;#L4;V'6mLe_--BPOI<B$+Qdb8U[;]N-7*8n&\TUha
%[>?:m?"5udaB%]F^r?.YR.([$aW^hZm8q#'!`jpU8ER-o7m5n6Qg2t(/n`f5.g$>?)760t0s/9-kro2Iq:t$$).`R'5.Nh/$8=)0
%6%aJ`Y3pbsiFa[+_[+tm=/hZ>a6/pT>i49+h)q6JM4_(.j#l4GoP&dIh:'CpiVS=GqpF80DQUHP4^UCRh:jR;>F9iO?4JcnLYeL:
%)r?5/[5XT$G+Ig>4.dV`Xu/:0=kKs%r>FQR%ns<ps.2GZ0H[I"I*FcV>?tpLelj`/-!FntA`mAUm^:lrS\99]ZaT-eL[4'"c\hNl
%k4.,i[<>.aBL/%>bUgquS*g.J00/4Ui^1(Whe<\lmIU-dhLeQHmlYuaqd+RGNg@eZRbK1lB6u%Z;u-.[VpF%kouu1LX![]qIp$!h
%."#0%DIoj>q1Y53@<Su!9$8p&$K$m<3r.5XmprT,<dDH-RQGGkT?E:i%jTsQjbmU2a4fhMa7%MG[-?0<f<_Z'qXiuAI]Khu0=U.p
%J!`B(Hr*b2GTW54ZqTt;G.tI`FC3@sT0((DX4\Bfd<tB4_RK?KouCtXlVZieZa\["c<#nBn,f6)o,FShkA"^>/qpT6Ie[cjr,oW9
%X3<\U]\&bSgr\t(55G9[k13SAcYZk*>C$*W/R'_hY0K8f?!3?@cVM_^0""IACpUVtjtE#hGKOBD]ChID-QbkLSSa[YbNheE*O==G
%3kMm5jXP;cWaPV+1UFO([JJh;`^8VCnL448:Yp_:EkVHpIe@RBe$=,ei![m.X>WEg4nG7-^p/:XhKc;?5h33r`LOE9$1r(K`tVl%
%m,jYOeOP=?o,jH(`krU"Go#g7bEs[O[iGBWr`NZ0Ip.90nP]$e?eG.NB!X['>=?<rc1u"u2AWClo<Y?@U3BC7=%_@WIHArEm[3.k
%bIR-ue18#ah85N8(<#Rg"8%HjDKG:.o#H^WI+3K1GTXWf`U$J$qgABbl/dtc0RWdPkFK82^%rq&r%*2:?>O9K*u9(,8!XSsaN?.X
%*mgS.a,TiNSp.bJ;T.<[X^<`-Zh]k[o0n%?+6r[N_i5;(Pi`G<k+=e=H)FCD1Xe)ua(#$bc?[01=DKh@h`/fkn"0,"q/3b-d0W!>
%R*X<8YEuNI%sel]0ria^@ObPnAc?CV[ZI\KS@S#>dm'=6=\\P44/oEc*4>6JO1*f6X4Y(,RL.KaVuOJV%rFguBg4B7lt'.=%YCW5
%qku6YIdS5(gc.#iTB)bZF2<h/T<<9[U+k"aa3J;jGZulHXY,&QJ7W)"nlt!_W25#*<WDPYojr=8CMpVcI_+p9ioNb2Y[4>Y?qEE;
%*&_jQn*.I@jBd2rl,VS;UBaRJD1\(II7/GXc&8!Gep>":@:Pe)bO=^tpNsGXOZkA(2]MKeJma&HH$'E@.pM'ZY*W@(O%&6kVgW@K
%_:FMc>V"4mUFPg+_&S8IGQ-k#a6e-%Zd0oGD#/<ekK.?5\5^]oIbW.$Q(Q>;e-)\1?[18!h>5gYgS:mTYi3?G:WoibRiA!3(hme;
%e6c@48)Ef`3quIS;7u\o-shHBV%P74rTM_j*Kl[`+(l*6N@2hsYJV/%$6MA#i;?.nqsqX5NL!.,oXMg/g6$ci\%_Io8G&mC-]dhr
%fuIIs<5LqpE'/@5S,jc6>`4EGglkCg`[$'E(O_`"1&M?We]ms1_GThP+nG:f@e'1'kFXp1D#Q>>\?K"<0:-%4!8K_Z3Qf*aq-pV5
%]&Cs)[g^O7PFCcd[(A5[X)+7CSCaY[UItQ3q2)HO2DV-+Z1c1b3Et=4InD`mV'op*VsP!j"8_Zh)7>06aYn-nk<L<tl)p^$q/Z1F
%4WaEi50X9.4=D6lYJ>#?T@l\bqE7'9:Z(cD$Tdl7U9Tj9+F5=]iao.cbB"r;h]8tM;9J4lW'+R51lGOl2oCaJPk];PGGs6fC^_+5
%KAi0%Uc3^EeX]^[%PP^uc@1)2(r"h_>GYYET$oorZ:Sl4c<o147'=7!+@2^nj5X52/75_HB_kKiRe+5/@9bi""\n_FXF$Ek^1aRY
%s/0KaWqnEDqXshe7)S)<V>E0ET]mM25;[)7KjdfM@^u'>aZm&S0_-&L)^"P9,iS%9b>l^HAVT2;iLH#B@jD(43Y0.Z'1`2i7\NK%
%"!CTroRbmZqR;Y.b5d$<f!d-kUK,jtF>9MUks&@*5"qr!8]Vae1)fg&#!PS@WeQ7hOZV=uh<B`MZ2X`j,%uR(&*fa8Diiu!Zh;(%
%N(hr_4VK@8l>tfgr/!]@+:;0/m[*UdCD,gfD64(rCb:!QHM3L1cBjM`qBL@Zp1:A1-H$'>ZT5@;9ZDrOlQn*JcKgnK_K#J:akDW_
%IrBermJ@^)DHhLUYV?cV_IYYUfoMG-^Hi_pUm:*VcC5*\Tm<'t*g9;XpM$S<-!*:u'XIGO_eo)[qE^Q_pOSY#leA;l=Bmh.nh6X8
%E0AE*Nhbr,mI3jDYe=&mR,;&8mJjUm=:8^ZZ-RDDf5o9f$<s-_IUr3(F8Ke,BWJ2fLDt84@@d)/R]o'<9(C.l<drmhaDX#0HlFn.
%ep[("/,SnnCY7![Df95?2HtN*;qlse?B/"\k=jL8aB\1;>jkauaUu-#Qqb^^?_Wn_e(:_>V=OU5U<JT=lcL'RXo"`npQgQF9!h:?
%>NueMJ5_L'qs7W4s8CdDHMP1^ZuT?@3@!#IM'0/fq^1DjWK,ddp<4k#i>u%6oVM[Ule1]lj5E/c"qI6dcPG]8Wtesqcb>MB\+b.G
%I/_%[;Yf"pAURn`W9SG(/r9?[Kq>a^@?Wg/r>0ha[&X');2-)[qjKtf3uR1%4F3mG]uLBT0.Lp'HL=)6DiiUdE"Tcg-]gslKl>#X
%K)Fa9GtME?L1OPXcL0e>?f.@MI*%/kPdV/Wr9\Y+oZd<2)4_K4em)oVYp-fd@UXFC:dXO7lD'8Gr$;_X^H?d<fVir,=Yi@oO%E`%
%iSi34?P[joF0G>i#au:S=#po>q(S"\rT`lh+[9%c^Za'mrK/N^3[agecHDD@c]c'_S?P1`i,$uj5Mo\:J$sWM*7NN+$lrj?AaX#O
%SdbYtdiS*5,:`:BG@<YJfDD9]0JJhdeVZqo.UE/7++%u>3/%H8s4'cK>19Om9\d_%Sq$_tr"6,O,hH('I^i0+k4u^ianN)rS#,Rq
%2G]gng7*EiT*$1Pe(K`rJacG1$co^<kH,5dFRY_e/1pHNUcFH=)oiD-ZF9>dE@)8sZeW_%Q.+%Xp[$:sn,oes>VQVYf500dMoDj#
%^)ZE'4KVM[T+7V8dHu5oZZ1#oP\b11"X1)4ACL+TO7FYnF?#GC'0?46T7NXCF8M5f6JhZSbs2*pjiQ%%;a^^#oBmmV34EsVc7$Zb
%4S-!Cq92-=EGbO%pPZ3"3qD\TC?mpL80k^tpe`^-QenpI`@--S/Y,C=^B(/_]t;Pe;_:c%4a!IoX^$#;):Vi^3V(>7m<.cVK^OKD
%`r$M=1nhd4e-CTr*^9AXY:[Nd;-l82EH8Lrr4\8_9$)#5iWgie6UQd8/q!.pnDjn(Y.L./jNb5mFG:l=nkin8LM[Ig_2e*eD-$Yt
%dI-tiqXSK7kD1tPo7n:*B'i7joI,b#n]!nD\!(sdZCa%4qj"]b<g8VVT$:N%F:IZ]f$^V.fqY)qn7/\IFo/5GCX'hkPMJH*qQaB*
%lCZM(^O(R=8Q\,J5<W9r]%M?qB$9?rL#\HiV9>oCc[JjXUsJJ2rHMY-H=,UC3a)KYEL%1ihCe"M3bI#Y7h:)#(1umKgnjJXaj-4&
%S"m$)Z0>>J\OtC7-).sFkWN/,qlmNW#fKa$F?_r.l72baod<+REL5cbl/]n8/fto$B(5>1@6O06Z:F^ej=:-2hm=/JPh25q?<?pK
%P/?>g/TGsoC%;-L@\3L8p>BWOa&N1dcrr(eh/08G(M6#&\bCPorRLc!k?YFAMtN'7/JgY5[u(Ff3Tls`^2j'W+5A)P@_OJ=DEm"b
%?@4B4[=PCi1.1-rdT_"m0RK6QHgo":bDj_,)+ip;]r@5VLtPOu3b\!2lJ0:F@hAJ$`lZZL7_`*/p?!G[H?`OOIdlQ_+IrJEnb%7@
%aC38m.,A]XSE-9cdPB"XoCf*KdF"_9I3eE3X#od1%Vf_3fMNhQrq#^m.XCQWYb(e[[c?'WU4\0t_NER^1TLBX(YOeCX:,Ta!p<dj
%8mpf*Tj=<-6MOH"Mm\86Y1`Nu-9(5c`S0U`#1>oM9$M`?@#cXZn[Q9'F$AB/oA]"IkA_tR[Je]9bA?;s06=DkMVODTHBJ<B[6!s?
%2?KZWY\QHG&)q*GRq#UrpKeTs54#bb00b7j@b%A0?^:2YC9Z'OnY!S?P0i*u39s.G-'ITOcJ8WHG&n`tr6E'WJ'X_kgQh]YPO_DO
%o<#Q,aB!'M3JMj:BKuVi#VNkq?i$:Bq/UULfl5O._o9KI31VWPB+OFNVtt:s'Z&1[pU$$1QLe],DLO+;bZk`KQ2N_[cBeV=ekH))
%f)9`Ic@/Ml?0LX).'/j(@ljD=8`ANi"[RV*)[m')iZS+;n`+[T0sCOdG"t&jnjn4hdpHlHQVr&H%kE@eX_KaRs8;.J+htd==I<e^
%,\Pt&B5;\YUXN^FD&q$%T&%AB^oTYGYb%]K(Mg(0RCU/WT\#r5"IVJQY7:@YZTYh>3jZ@U)mcZ109@XB1;:u`_FHcmio%cd_j<C=
%a]W\_7g%ocO1.c$XC#T*kBg!fY17YGbLGEl$En#kDVY4)B+T#g<^&Y$r4G%rq8F_U\`b;"[s&0dL]l9MZ@0Th::?k0[G?4BmsHuY
%][+6EHK!!$Jk+CS1IIbR>(q$`.oB,jX7LSmp7!>/a]QN'X0AmK^ZXceV6m$JDj4!)ZS+7ij@M/L^Ae$1?W==d-]M'd:g2`SZX!1;
%s#jdUXhAEGkd"hshs`Dim+"q8]\_Dh*d6CB<u$\Kb\pM)/^e.>.W)HM'u'(\"N.?n^#`5s+kLp23tDOfH#.0h6%,`BEDh:k325<X
%UN^''_J`ZQF4L(V$(]nK["M0Er7--TmW,$3i6lEJ#.t!f'[5er*TW,+5KFi%HIZ$D/53f;+29Hkl856*e&d_&6k4LZFltC-=eEWH
%AttOdrdB8J^K#U9c>V%S(6D>J;OOG!-*4Dk[*a?0FY@'I)sPlRG4!Qtj&TBobm,Okha7&0P@N%/`MuH9kNu%!h"nCgHAO4_BZP!=
%*\G/'HI=6iqeB+sBm)Eos"R)A:SV/])h?r`->(J[:S]MtcfS"F2'.#0QgL])j%<p_J!olZKekcPee>UlFoDpiV>8;IA'`\A1(p*2
%lTBW$&&c)H93HbNeOCP\)1#NGqmG#1qtp2UgL#EjUXcRBH\\I\Jo;-umF)82P0ZeXo#]a`[)4UV+ReX8Mo'K2b@4oIEHK^&dIW`4
%['5DcL4.M$CQ%@>/\&$qq9_G']Q%tVI@!0>+-eKNZE=asj]>N'/!6ZhAV6$GeIP2^Y+L2IrDCZ(Y;MVi>Fg(i1stoDLu9C_>RrLY
%:Wc=!\S?%N)]qkb2S(&+mW(k2Ioq6($FB_@k!#LdRk2Aide5oJUMhfO$MdG_e!mP_%!fLQ0@[;>Uf!38EYg7,MqW!X2!#S]]>Mok
%WE0M&,bpt'p&1CB=$W>$7VOl4Q4TUu_pJRGBoThcfn9.H2t,F\\Vm7n%5d5hYO63XI*(3>Yu\7KdUdfg2Z?qcd[pD^ZCO4**utpI
%4aXI0iOJE;"_O*\L1%cC5WZ4GPf3B,iITU.rSfgT7*eG4^\j5S4`s,lf'D!IW+sk0ZX6l[Q@6)9Qk?[c?,&R*aD]rt23T_mc4/aG
%rGe9;%8iMGOis(<mreo3'cqccX6!.C?fjAq1beF$-%F31<;C46PA,Eh^AKtRpIG91"ckU"Sbldm]bgB>?nZ?"'TO!d/mj@1442GF
%rK8Z!TBP&+fm2O2Ep.u0VRmKu]Zk9k7r&DW,CB5>jUVmu;VsW7Ye2!jh<go/ce3bA[de7on`EO(7CDG?OU(RI@4&`Ps1h>]?"lOY
%.%VuS\1HU0oisFWmm"\R+2a1Em>I*VO_ZIS(H^<FFa6ZPBo*i"V8Y,mcUNWFmaNf]Cj'B,jia-`XDJu7r0O`C(?,CNQ*mH52A.&-
%-"=g`.`'nQV/?tgD=06,V,!G*O+Oj4[p;2hNYXj,Zo7>(k*F;.V=7o4p9$uVI=_:H3O)o)pZXF-B)YBl8)AX'=C[WbhHPIRaCV=,
%-YMA^aX4m,1W'.+B>%bE$^Z=%]`tJa>=P3V5,[g.aWUBj\%Za:#8$+.QgNrDqT^K=g$>Zqjm0Ct.>BuJ@6jAFm&-sXV8N$^l:p=-
%e>*U)s$Wt6mJ;&l4H$W\-2iJ.Nd,s!TSmg[!eVO^0rS&4m_=TI_KL$ChPm*r_K,BJ4Pk45Rc2TchA)*<jk=i'ju<g/HIIb]p@ft\
%2fZpqGQ8W!mBW`bhlg,(`PdbMX+f@!hKhs#8-+,I7(.AHj`eA0ULr.lF=Tb_S$uVLRXug[nP$LMPoe,^%e\VH0Gl+HiolnW_$HMu
%-0LDa/)ZCfr7%<&c_HrV;NGf'CBj!LNlT+<NllDfCuNPYK>gX?bO>T`g:TgHNU*)/B>%e3.Q"M=1SRbbhs`PRUh=,HAs@(GS<73]
%"bRTY:/I]Q_aXP/SsF/Vq;uj6<'iJ1-_>]V\ECn>i$!Y']V7*u1Rmr_GG-s`>$8%!1t&('f2$`4.^t@3m/lb2b7*@o"SEM!ji46'
%&Uec1e%7hb4k\4+k%P@k"YU2])7cT2+d2D.aM"6k[A.?E\f3O\hBhW"?b_\KPiI)'<\!i.+CQ[:*4A44'[751TPm'H?C'kDld<+a
%V;eW_dFldAc&K<teUP$hg3#>,ikC,NeUA=*]IcX'?JkY6kNcD(Z:Xm&,bAe\V:I]=qLnD).7(]unRmI1`5%:anNr#%',!E]HEDSq
%6;8cU!7<*\G-)BWGC+;]r==)k1r<\@dJ*61@Q1"8oJ9[S^Y57Xl)0.eeddfMK:YmpFR3nY<\L%'ld]YkD-Y,n]^.[d=))$l[0&'V
%Fk%I=h($dGUd4s]2_Pg7caafhm'aB!Ielq8Uu&eET6TM?ANZl9AF'bCJR@CIqHb&*$$m\mNX)%?f,o-"';n"XP`OP2O`92-OchAi
%QFiLFDKb+*9s&k<oeVnF%D$X>(g0q=`C\#a6VclL3MWa?B8b%28_Dl+In%]6ha14:JR&fM,lqrgdPM2%PLG*NX(O:8`V)/%@*$DQ
%8MKr=piYS/pd9n@+mT`$4rt&_hDRUhm"uKM_+oV)6[Q.L:2NhGPa/J.2jER>*]DLMSBFdhBkfIoM5BmJ_qG"ZWXG;@eafR2nBTrd
%^:53XHfAnX9\8RKbsK2.=W!`][iXR2#1VS*Fm%i[he#s#qm/:mVoJ-]JNi;B/8qufjBg.Rs(/AUo*G3"EBIm43.Q9J_qoJWlm2j"
%%ZZ>;58<OsNc3)m4G1%k!)RZoQTOe3XPa$a0XHc,Mm63qeN36gX2$MINpR`bR`i+oN%[?'gUNG`9Y:[JVf.Hd?R2MjSb1c1SNFm+
%B0T$fI$Tdc^[e^qqL-ahl?>Y.\kO$k!ABNmeI//n8%h1Ad@EDC&5p^iMe9scI9Z[-E?2\O>@\_o%"^)LnEOYn\dX1L+'@fFmu+kD
%7GqbZf+ZZrMi;6%7ZJ%$MS81n^]2kng]QLQhsuF@i6CPQ1o6uYDIE<mhmFMmVX7gWN+iN_^g#C7^o,NV,47lQn2%MWI9ORs1;Yt5
%?sbcahpTcP6_D`f34p??=`0nd>[][nNPKUpFZnM;D*?[[m'nPtXkIUCP]9p?\g(M6*U_:Rl"8oMWiI08?9C?s_emG\]$3(6mVppc
%F>MlFDr.p=2r9[rGB=/bF[iUBr/>@;W@\`CA0eugeW%G,)_L:nWlaNafrE$`Cu%D_LFH6(E8st#PK%6e+:rOViu2jrN\^$9d>l]p
%?JOQ)QG2/iH.Ru(4_'mDaVI27imUJ!j&V4;K3"I]M'cFd^1q\?\B4?l=IWuc1!-PX.J29.dN'nm:l@jpcqV*8,qQemeFJ;s_ns.\
%:+T0u3MrjHE)bWR3d,EmSW%=VCqU%DRYHej^f>@(kq1V<5Wk)pY_d?n7llS71_]]]]%P)hct</1mL#EA-D<U0TO,HeB$1?LgV/N>
%F&Z3QfM]3S_U`S4'DKE,]>K?#>FDP&.<+[a-V0C:Qa5AlEkA(e>DRMIC0#2c'n[a,hU!Ri2,5\G1]6YDbHqT96IQ-BD$$>64Vrd%
%-:Th\!jFRAR04k*CuG_D88+:&Y<'7l*p^?>0q*bKKk^[OE/S;LmSHIXW*4oDl@+&+69'Pd620sriJLiF]bQSW(G11HMuf$ZA3`iU
%qLeq-KA^_a&O<!K,c?'Y+kct>=`b3:;2aU?Q>.!QiRmm]%/'.c(WfJ@7=/+L>TkB='KEO@F[<DIf6(dg>06FL:\&cUBI%S3WE.(H
%DQu`YWtm`mC3#+7I+:P7c_,9Q,akh3&_*hQ+2geXcV_$:+>Yhd4fb:+kf2E[a5_&(O=?om,^jr\]*\sR5XqKK7iKsb4m&cfXV(u,
%)d-3_,Ft]L,f]LWU[&#'!g4O.K-hrgb!?]_"$P-G!E1\5%9V\deT!2/-mZltRn+66PN`?;Sk]TsX.'t,a]h1hJkUq"Hq4@\LnMYa
%W`G1A$E]JFZ,$982j&R`\]KRCk9e668f(@*n4]NZ/I-qr9r=oeR@msANpit`;@4Oq4jrtm\2AeqU*`MoH<'7.RN15:9pXuQ-)Keh
%Xk83Y0JS_i9qH4,$$@+fFjNoF0T#AmO)Q**LIf5_%0^R8O`8K7+3`pUL[\"o#h"9W"V7tU&g+_2JV:fk/E"T,/M-<T:C/4]Jso[#
%+s@L)Pme[s=NG%ZS\WAN(aMdHbBUg[".#_8H+6GqBg\@A3YIK>U4!:[jWnktA4MfOiYdH:#ok(SGTG5d=/1HW;'f3u&N=n[4SV;H
%e4*[IZ\dFQ'=,DnEGVFgGdp>B)4NJnBjT!Ai?e[/G`Sq!0S#'>3mdpqiK1ljGn.#Q]:c8n\N;@]83@*-QQ[Rdq[k/'Oj%+$UBK:A
%n)Ak.4P'+,Ws#e8:L]M7=alB=mGl'.nn9`I/d)C3DIc`!H<h1hO0R+W"sBuM1k9*XL3gWUN?i<QS5;<hPbY">octu5<_"bm4W<Se
%2Sa)iGa^+%6U:Ej>]^$/\JCf:@*uoqafVp"CncHa:C77EE<Jic!\uH83b8QUe.,m0fbj#W/M:_//9gr^2W0cM2K?+R"<g6dasS$Y
%!9Tbf@pNXOq#JKg9kN,]!hJD(bM%cA+<D[-*;TXrYfW:'".,]-O[Nm$NbRsb:T#NA,!lrhbU*[0+X8;)%*Oi;,c\q3_GKKJ^J&M[
%1kaA@AC1`V--d[%7`#W.RdL!Dl9u8bYr4F%.hJEjP$c_$3(qs4!<N>V2di`87YS\cCbcpoq8E7jUB!'7cI)5S*r4_^'!*c?>_=^t
%rV7^pQjF@`-PD*.k?7fg`%#;6PHZ4X.PqH65%\kD$o1r'02<YbBK[<33;4XUOgMc6"'12H8.sik8]D>'H]Dhb8^4X+&_sP0Zq(l,
%FI%Y/K[TYFA-,dM99a9LpL83>G'U/^&qPuL<mX[nFF:4n$XTi^Y"&`Yd\03C$aHLHR<)Z&d.)A(KGA)-P'8a<UIj3l3c\Ir#8bj?
%]jZ]F=N:H(glW0/P*dLD:(iYf#Gb(kQJkruH@Q*=i*]]8Z47JZl1o^=TN+$0n@<C&EneMi*^g)J_K799URFa9nlQhdd=uRLPJFRL
%s-S4;?/i4cf^4V(?YI6rd:+7l]ubfo(fNj!7#?YXj(@W-omh7E>)::fFJsm=YZfS3dDn.#N#Ch.gOcQCSEE/e&II0%H':Us2^4(>
%TfR"QKERmKd,KS>C_P)%)otE=Y![P+PHW8j0L\+*FpuDT@"C_+OU6LN;d5j3<_+.@,at)u+m'OlLf2i+>F*3R/6+5L$D5ViB&aB4
%Q7Nq0%LJ%O]P?ZN710Gg.(XAj_/,Ve$1j)d60OCqn<b.H-ouDC%J&7F8d!0l!=jp^Ku;E_+U=/CB#$5,A\m4WZ(Z]'iK-GSBV9n_
%"1//'d3B#Jk\gOX,O<3c@4A^fj\8k8,VNG]7(n+##R#.O`@UK33*Z)&$"^>oaFGXs@\aAJKe+S&@5[77s,`T[]O)Hf,%/TZa;5bQ
%BF8W>>NnQD`/?83Sde8i,Lb-E!uRuTQDCm8[Lc"t^ceUo"`t0aJKuhLC\iq^]5=^Z:r'+WQ9?%Ic0*'f*u?2!i=G1<*)M1q".I^A
%G"?^m&WDBOEqRcZRdirE_>;W$JM]js7OR3r<f"VK%D.:,NFWn9"(MoXOAQ'X:(N!6VqmO=Jg7!AOiRl;>Mr?!@\actVA<]2$QHB8
%:qHitOHX9!C;=%t$!RGXJg!C;%_6[lI$2R+.1q)fKq^KR@30(j%P)CSUk'dIKg`@Xd6]IuAV\Qm9K2On_-*)PLEJi([\H:X:.>Mf
%PSSj!+AiMX@$)-HN0&*mO=2=u-*S,&@/iW_(+9H;,uam/;MY%/`*,E0!TJg'B/"*$XfL*:`H5M?Ci\5>Ijl@Z#7Ef#PA[(^8CBg8
%&ioK6fT$,bg9q'ZI4W;b8;>PRYl?;j8s8(`n?QKG43S9P6m]2d)L]H9TnG_tn-4a4#eT#@hrY-(i+8Ad:,F4MK+X32&HoFsF^QVZ
%ZV&0q6$:nm%ie^\,ZN3"?VPI%GSRGqgd(@(*EWQ`L0"$gDNXR`Z=)X/fUge\\2&Tr:OWrBC6DqYK]u5P8<h1\&Ihkh`2o-VLd`TR
%37*B;"rGo7R8%>R0]mb^jcb\nMoY/<!!W7M9SB:9V%Fjojc-*.^UQnB07#=,8:Idr(E@04R:5t6Ws].N'Ik!_#;j+,B8bj<q/A6c
%e@bjF1;EpPOKr:n=A\)\nhM?QZou>V!k"VM-3L61WB`)@j<.ZW:H!E]/;hQt-gAQZ@Gr\M[V2'=<&m"fApmd5(,Q"*/p?4[\1/8N
%+Mp/4CP%+C23t=BZGm%]2$"3gm5p+@clt)(!)U``!gD^&6PgAC9W'-<8OQ)WXTZ,X;&C:b(V#D_S&I?DSkD8)!VI3&8oV"#6RN)>
%9?!YGDQsooP)bj0UB;o`C^$-/V.:=oq*)H8E#'IJ$X;G<r*oU/"mX`<Gp4:TX2R8c3Zs33$ZhmG710o_"XS0'"m!P?+qKQ94s'iZ
%bU$I:fem2dcnrNT8P#ce]YMl@XB=i]+9VdTB9Cgi.:YXf-mZF/U0Ss';AAIH/@s%?7+T_QJIa82a]G2aE4][3Btakl&P,4q8P</f
%E!:eRC_#E"[SY&<,*F4VK/emn:WFbQa\b@X\BDn)$]c)jL0[sm4gT)T-M??2$ADfLW[d9^,QcHYAcl23gE6ZUa>hg[Jur`>(SN'b
%q,"*pqkM\pR=has:)tg9oV`'p`$7m<nB,H7@XdDt/:&T78/bDWZ(kqVT'F^S#^H)?9"#7_cO2E[W?iY#RA367VrPS>B.UiAP44MU
%NhIlSLQj.W\q#I<[!/o+"\6"XNekH;"=9\="XQHP)$l\P)_)WW&gBf=(=?W]cPplRJ.2fGGk,om*>3m*,$>8Z"\&-AV;W[E#[n6g
%Yf%]$2j%dOBjf5;ZtpbI[U=e@6JY5H?'#D<SdZ"\N+m9fS%^i7J0JB+La-eI>@S6g"VUNp*\P&jMZApm=6le]]3r7A;<>T3ij]8N
%+re?K2;CMSAgN5SA+,j[?\ekDh`UZs%(-J._m*eD[n-j>PXumQ+V1!:$?$V0"_C(KAt\L83cjcm0PUuO<A!2q$8/Xke1,0ZKVB%6
%?q,gt0VNq24ZM1?d$Cqp3%>Go5OJb-`PE"F_doDQLU,+]6MB+Q#*[t7><?(VZ]\t=QY*F%ntBKe(4q/ghG!_,L^)Wg#tLBC%MAt1
%k>G]T>O]qb9[nirR13K`Ll!RF\u-RrQ5MNdR/i4JBE&FNFV([:aBF]&LO^XN#?.si,O*s5UF6\C6@/Ld9H9DWYQlURII7[:]Ft,D
%P>?geKm&;2=Lga%>_j]INoT&f"*J!m)N'PJ_WW*\VJg`P[(.1*5ar/CVq;n[eRs.9>7ll8!",+)3NscR9%\\KT=N4u7-B,9=C@k'
%XTR'ldK`K)A1bnf(P-Bq[@+1u(riCpHk2J.GX<kA7@;+RXC'Nh^5$!ud.SJM%nA[3LC7qIf'tC8;Ibik<7g.g6DfNG%mk?E%pkeB
%Zq[[!4>pPL_]Vj0Xq"4_A4f*r1-db75noo]&PV9\>2MRaqCo]$iTN8B(9qrLft[[_i?@!T@QqF6Z7@om_P9\3P>qbA+?TekFM,PF
%F[p;q0^OfEN6>@)<bBDdn8O&FI&VaaP$Pd%AhY2a\5WSV1'msd9J@^0,RFH^;pa(tp3)R6-LV/V,ocd;Q+2g_@DV$_n,`>EA5m;@
%!<_/`=Kb$.fa'?;/gNG$nK`Da.i+:K7(H3>o9&1od;T]JS4)CR*5F::lNGs^3L4%ZR!$-Hg3gC@b*#)q60MU;`o<YtNL^G7,KY5%
%9I<d"W]'E7Zk;Jhg-#S!<2LA8Q30X5W]2L!9_OB_o#>A^jm"G7XWgn]X&d^2GdIc_U-PNB3RU/TX9(@@0\c6LBHOAla,U=J*9*;a
%[=a*a;_2@e0#BZX-'O5%WCos!R=LiS=?(s`TG@P7Th1;e2]]<P;'i2te9.#+$7h^QjTNYP_O>P1agqaBbs[#2%aNZXA2-X:EC^St
%Du^g>8l1_rl20*k_TsQ*$V(B7Xd1]MMB;ZaHo7[G`3R1Ti!cX'Si`qW/?+i^#Y(4CC'O8SJ.KV=B*f"uM#K@T\HqA[aA9&3)8J6X
%<^k.u&X<Vq'e`mHcfj)QSI:ZJb(446;*YLO^d\F#;8c*YKrB]]L?5>4UX#N&78[_B;i$Ao3Y9l&A2;&ej(0g@;Vu&65irGG3U-n%
%1LLZE(^o,*#F8sAs)qZ_%'gG=;N6L<_lT*DHFaFfN+8)n`8?<mi@5p)5b*S:!*h=cPE?u23Ag3`)!HpPgGjijZiLY]]**04EE7T%
%9ns)[mNX5P:%0%..kDRMYZld$lSu8p&R?A"#@;8?=[9WN*#oq(Hp!lCVN-_9VsCBc)Zdq:(D%R'^gi^2V#uNn8W/^XiZM;+.YcH4
%]k%?0=:Yt:TtZ1c-(Bl;Q#%V)7H1\V5c&!b:N;=fL^R0H5R=NCAi1aU+^#!8;[3D@:'"NP?0lI1bVir[-pTX"U=^HIF)=<.A\d7\
%98R!peu,;A=H[]@0lX?$"AIuHR"18b,R>,9#*^s8.Q6HV&GhuUZQUHI$!E%I!^c+:/2muKV*ZX3GdS+l,CO;]3#lj&ge]jPVb-eT
%-ro6(7D-*[**?nt]d*YP-TlgVK(:01OV$^R/-iBjdp\rpM,sg1#Sl(H_N$Y>X!3]ZdR8mHOk2o6$"jZed1sfdJS7R?g4l^@E7cdn
%3Ms]@^.PX\@f^t:+IGbjOgRmK&fmsmS^/VdnhqskjMGiqcmlS"8?J!W,6USLYuq+i67@NS?PkB'Aa@DunkkL1ap'/5&j(;6:r?=q
%)j!AJ6(i71eq[(#dZA9@KPS,eL=?EQ3sI]1`-.6(Yj0;:+BO:gf7j_YOY,$'Q\S6DZo1!%2DV?T_R0H4K/Y"U]uPsO,U'#'`hoLD
%+393@Wf^&<<XiHmW$[[[(:ilf1g,,rMcn)#i`dPj%0+3Lh9i6#+9>lTqa'T8(d'7F1F2<g&3]2j3:hc?KLLqQ"bUYhLJ)V4GQKlH
%p*k!3&pD$l/6U(?$Z[G[6Q"?3,SE-b7'7'T$&MJ#$JC(R`KpUh5M8nQG]]D]]?05`-\I;(+08>3A"ZY2P40U$#>TFc.5I:W&oeLs
%-8I5fHOrUYL+onR4q].]hSCg-;ji_2pk[rbZoGub\ZHEZcqV:_QZDm&a!3J(>gP'#IusGWQ\Bf7f?spI4J?a?Zn/24^k2U//Pp^`
%Irj&"e;OR#)+PHM53*:X[:'pJ#RCV?d48Q(^94ScNPK-?ZenE%'uk@r(XZZ(Ns(`+lmg*gJYEV1Lkc$^%$`4CE4O$s1>,00f#2C\
%\gsR\BiV;cP6`F:N_V#JR`S$N,aHT!)EL2QcC"01P_7/80eAk7+T4Z6TK46)ZJ!4BVZV`8C@/i8i$g8Ol*u^P0p`E$1Fu2=_iab+
%c4W\@F'b6fCo0d'`k[G/-MU(PG9_3uM?.Eea;ju@Eb?\Kj*dAnbC3Wfb#eojU^4NQK)qeQ6W^O:jKW=f)0!Z6p'1]9L(E5J+Z*9#
%p]mKZVp]9$*o$[U-Ci^6$j-T:^CaO-"Y=_3:Pg5n.L.2K(?K'a"9uj`!<UT!CC2Ah!0XA`4<L^_nCS'U\A08<LM*ln6SKNcc<5$"
%(a>86mYRa/c5.Z,C*Eu&A-/(d32e*"O(7^cKH6_?A#uUb"Xc?/7@m&>-joQR2)8W;JcM9'^mVD3i;mhjCehjZ9YrCnD(2fG#QV+u
%W1j:V?DPi6a]6IgC0Xl2qH##TM]si#D&LYHQZ$UJ7Ak()Op/.LTKab#4B(H%js_*T7NI!@Ar"9l/g=Z:Xn]\2Y,d2HWl<q!#Ws))
%,TJl'+pubM^9S5232q!b-obaq!SFlCCb]@qZ1H8g5uWJrLe@i[M,9VErbr&COljGl%g'"E@Rk0#g]IfM+rMnZ4dqb^Z.TYl[C-\R
%m+J84>o\o8I90$GMRp_aO7W(,7^H'F"kiK2$=M4!n1<XfJ=pn"*`A(\SjKI'i?jlO2VWDd-A&2H;GeMXr]),CU;rN=[Ge'e:mB2s
%.!>T7_W@dsoX!3"+pSH8Ik9Q/C`QLh+q^g;"k\dCTc#C_e#eBl,?mT6>[/,p418,t`^GZ"J/:3P%Se,`K.%YhFl6!k[^,X%`!Z[`
%OZBCg"bC?f:CP@aGRfq"`J&&?A8g)Yg.g#CJI+'L.:)F#kt@Jh;fQ)thc+%>!-'bm<CTTJKZ#GX(YhQ@F\$2u:X\@RJN'6e!/ff]
%3cL(6O[o[;^8k$ai1W3d`_@Y[Z!m)_SrdQXYqZ0RC*5&=G9^nF-,VXb6D;h=!G<0-o*q<'3J9YlqLX?)')<A=-'u\E&K@a#4Mac!
%2Weu/=TE;SZQ"JN"2;dF_I?$!j.)pXaPoM^KUY5GJ_CThPW[KP6s5&]+j18#":37;2[7FVYS$^$1_()@@$_Sd*dB/c',US>^e"a3
%=&"q/\Z.(a<1l$t3u\0L0_]9[YRb]aY$-J--Aj)]F5Wu6JL,/=h^;i/$WhU]2IZdifn<\ImP;)?W(%(9:^+a*dh0S6ZqL]C%e@L/
%M0$H5CQMt9Etc+?,0$KZ`!pM3K!'/7-rgf>SJ!<P6\[5kFe;ON^9NIcQf*`t+.,r1AkD.$[R/1JADeT0`1[2J-#stlFBiD<_7"A]
%<YY>o+C.r-q3XR8`I[/JBC=er*Ch2qCe=I/7<8;<`E"6o%FRf:mfJ2*%tS\-g%%js!Q]3G(^UaZ]`q(f;5fB+=',,(i&?hFXs7JE
%NQ=kSL#&Qa&tB%Hh2AOuDsQF!cm!"8+s&$E?'%.egu8-dWl(!A/C]ZpW$B.;.Bh;(WIQ?.CC&Q_k302'I5lQip6rmZ#+Z^3Rp8jm
%CS<5D3=C$RQrXbQn9+7>PT+tbW5FaR'F$`01Pe`ciOFgeWmo#<0q&RZ=dRlG#g[Pm?N</fZ6`t\fk_Vm>#k%aoBeU11FY^+#e?B8
%9I[O+RWYmYeAc\YPVRrR_#-h^i?02`D/Ai!A\#61]`8rq:p#b8Va4cr[L*cn7Z7sAnu9\a$8b2hcX<4I`g3Ad(H22:[.l!.'e)mS
%.%135Kfi`lW5A3-M(+VjaUg/e'ep@"/kl]VTt"cubMPRb0GTMGAl0j6=i\*i.0s4uLRjOt[>[DmdULVcq[0c0f30Y%kJ63S.dV@W
%><_>:!fdi'&2AapRiK2M<Q'DTkFc3jQ&B,!C;V;`PKO^//k>b/1o&1`34+43'"P&X/<V,lMR\%lLe&P/>cqD!A>1PE-F4"_F-*2@
%=ZZ@,/dXL-$<nQ`%Qlf$jtI&8!VOBUh7SE?bqWAA;`I#kUI9YIa%OOW,r$")G/quRF5)FK6o^Q>!5omKV^k[Jr\J12&K5cpTaWOi
%Q[g57.M9&ncT,h-PD,%f51\KDb10e]8B9b07i+%<guJN8B_&Z\RH$r+\uC3X:c`Zk2T%'K($0C72WD>8R^Qt:Gm1\YY#O_]1nQpU
%;N3+%nQ=Uf<^B05iVV:>FrW*rP^m'UNim*lW`:/a(N;MWS#I/FN+6*9.)i>%KJ,>FKbUnpY!A[\#Fm(uCIi\XP"C`5.QUonM=*o4
%4j5\Nq/dhgkT/r#Wp1$'c34K5+A*2a.%C[`4E\gI*i,Y!W.6*dW$4[/'PR]'T,`\,60*HpU,k[Ka^pcQ<S5S:r'Xs';1V,p"q/o\
%,re:_,^WD6`+N\V2MMZ`Gl:&%JYIb3jdI_U>.M#-bL1?UP$Bc5EC'`Y<M5N5,q!$.U*bCpFLHg+4Kb&o'_`_[j!i*1<f\a?>qR]Q
%TtjCFi]"CJbi@rP^ikiT6MQaQjZ>AXoJg?2LlA=#%sA&&mfCJ/cPs>>/68IKo3djA]Nl4qE^Bc2&e>Qm(WIMc3BiqF%Q>i7%8CH-
%DF`W8V8E=VkW75Pi&IN1(T>^epcQ=tWYZ!W<Q5?L"=?cXTBfrk#+DU6((l8]S/tMeHb>UDTaWm"^/4XI5cBi3aZ<btTq`Y;0e,^+
%:D"=pLY"+[p)I'd_D4,Z1*pW]oWk]<6)N(nC2[W3WAp9'RK[jKI,%C,(=tVE2X:iTkI:UP!6Z;ZS<R#F:u$4=(+&ToE56&',2Z*'
%mWi'hW@]h0(TEM><oqWJNnCjRY`;=f2Y+6#o3=]_d%k\60(.0_BOXGo8m-J;8p_]c@.X%Z_DeLJD$+3<,!oWo3DagR170-$&?dTa
%Ad.-^#2'I8/O[^'(,d+h2X5)]?h<kLJIQ!MTlNqllah<oP,VV=CT?\D5aR1F+G:G7^>"3(2A1J-c$d#:,XTfe_uXTu&R+;u+VZ[V
%MIj>7G@OW[a]ETN+^Q@A6@+u3K+hK\ifJ2B+>9]igk?$L8DIoH]UN+coIkX29\;"O3<2p.aZQ9j$_'IgJ3p<s=o'1pO.0^DD]`p9
%$+nAID$7=p<KiE5n5p=:.V"-YEU^3:'q^,D%f=GJd>(P,bb<,*;0PRYC+?P"<)8[361]Mio!=Q$O!a,\n\D1@Y/[`EKCq23J]&lb
%?he4P+k]_Adf;E]CAD>6T&3IE('u$6?H?*Q[&Sh5"<XUP+jPn]++U^7P&mr2M0%d2K9_*AF@)KDR06Z>^=Jqm!XOT(g3fNJorP?X
%%ON+GLQKM"Ym-juZ4jIIJT<s<*Y>.*PT/%;!E;7D7<,$g.P60s&]q,ol5d?\:gbF)4Z\nC%cmLZXWk4!QPC4A!rX)AaSFchW[Z(9
%"di*7ODqo$W\tZN5a]-%9I8R^Aj[Ai/V*dM8Ckk;]rh_$@/e'=!VUA9Fh*<c>K/MD?I.04>mkoe/i$<N(I!U7]A!ouT_3nN6Rj:h
%BptK-,kaB/=Y9#KUT7UIaP!8)[&R:3POmLuL*;Z_rT^VLN[Ar+Uq2`Sl`lcHGL<Du.8\e1'nf85W=I'>637:JST0Js$s=3s[Sj[b
%ok/]t>/=5HgZB1S^W@FG---paisZo"`20op^ecI2gcS$!$K$0g)lt[`-NkJt$1[%&7!SB,a&^#J(cKNWdMEic>Zh<XH%NF]_B`"o
%kt8,6jU)S1U>8`ADo`\*.KjFR^_;(,*,(#&YZ/:]=p'u/65;dH,3[!HVi0%^>9$^>8!+B5qHSIGb^lqZ9:KVfPl?6rF'1@C9Yl;]
%jaCYTWFA+_=_G1D/g6sO`4N3Vq)/p)q+*p]eO4;6i$M)O"CES`=:2?#icM)n6=8):!rd_FeGq3uGqL0e;]pH%a&ca_$;kA&*(b3s
%IsteiNeA(Bhh$B\#$_6dQ/@UX].b8-P1Uc8\@a?"M-qR\j)L6I$\T)X;:cjP%eH\gG+`(K:*Vfced_tn%)B.1)8lY/TrV4!E'RF2
%3ZNH5fo&*8MGm"b^/1(K-ClR57;P<.\T09E.pTAnicBi1JD(KIE`&,T7PSoKL'oh$WF_oc[)9J\9_a&N$TJYU7j.Y6WSB@qP+q4+
%Si&2KR)KZ[K&p24WldX@'sRAsTGYR3Y#MDQU?IS0`"<jL>$%l:ns%B.Zbta[FiZb1J$*ga%eDAJr;`u)d\\9s4maNI.Pf)5>KbTp
%)pnr^X2pgS\C:n15&aJ3\SI*I5Z&A;a<c/H/pngN7/0:Mf23>;3K\ih/)[RGN^CIPklcS@$(@m*^_Wkn"_'u@.m/i<qjM'kq?HB%
%=]V2tVuT+u7Kap&*gbji3!J<"!$[rH-28Vhc_8JS3T(0-`)RB]2E1Fe1<+Wf9b-<OjN&EZXM>[Wj5,o5]8Wpj/+Q)eM4JdEj5(Eg
%*t!$J7#8-I:AS/Pjk(K7^+.:E%7%XCV49YI#GB1/m[Wf\,K_8lctOpL%>15Y)s-a?V-AHS+<]W<"dX<78Zk(neIBQLGZp@4?!T_j
%HB>7(hh0LB(7SJo@>dQ'U2eW5-Z?"o;9>Y[;A"_;9K<lSJr^14B#&M;Gth!TaM%+$HA>Fi(-cmCG8C@q<=QR`6,bfUY^O5`%7CH2
%QfTACWsX7V^1>2NkIJ1j&fb<<ndC=S<IC*L6D<g0HMf<!LXY33P)WM304$rWqXBm"7,PQ_&lr.K16kAGMFA7O_t=<1;%8'%QQRQ/
%UN;!(6M8M%BGDG5cFp0.5GUJ;jd[Mc.9%"<ml3Vr_\-&%,I3UX&<rKJ*0e<7.%sE?eKp)jOISUW!`:SD8I5n\5U?-i\sc*9^0lWA
%..U;o:pRjX;)]2DiAb7b42)&BE-e+!M!1>)bD<Z%62LbMA&Um/%dXW1!RoJ.HoC9gY-&\<#K]04jl6o4;@Pg'MHr-u_?5?5AB.a_
%fhr7jIeFq!\WE6^AM@]He`-[(.<M4V`<H'\58Q>3EDS:Jo2AL#T0\.1X._]nX`<ckf&`]uDrNMW5DfKA!BL?XjI>J>'442eQm0[;
%!nCse8>>YN8t4N!Yq-!m<HoWJ+1a8ZfM8)kUC`H_[[[HLAHW9)3O-1A&:Hg-<Zb/'b!6>6bZ$'5)G,6SKpWj=_u1G\.10><ioe@$
%5RE/4JA[*PTu%2IbYFDkgBa.O,XiI]5u\s#\5eqPY#IJD1Vf@H\SrJ,U;qI&:q79q%4$gcY/72Q_8bMG<;=@1(Tfq1W4fF#EUG$#
%&u`d7(PrBn+JiQmJAf/@Ucu.I[Y"\qbBq;`c;l)-jXW'@n/;p-#W4)SJkVI;M;X+K8Qo?-,'So,NN&#T[JkD]L",4^guKY+bNTV%
%jsjGb2$2iH:p]D,[L-_U^&Vm,;,YR,[o>Hp;-m!>Ld8@o0[Z!2+sU<13Ij?39e,<Q&[YQT#+-/e\co@[f.Kpg*QPDjjc2%qadN9N
%7GUrYLWDtFm+>^oJFE)^m2XWH,MD/ajjUMf6"j8bZi_UjUp',i?Tfo*LV%tZW+6(Jq9hI/%2D9aKfk0p,(7m?SsF:<+ij]t:Xah?
%_G-P%i0ZA=:lT$&#1al*2OrOM;(P]VO'4%<c4jHrGqb$Z^`+L"$bG%unPEBj6j-a2kH!/62uS.#TLtDVM0K;opioi-i&DGY8R.fG
%7pUfdkiZ*9W&=')fr%/0&282q5!S)GfC=X3<6nk@H"tXI+c^/TZ41M'((5LC*-$,H]%K+Tj'$H\+4MobGg55=]l<YN:H0/EU;d6'
%C.(Tf/T[nAY;0&g8hS/!Yt`eJTOjA'kf72Kn42#faipQeE0fm8o<U')h"fZo'd*MfIDD16pkl(i$s6R!#>#YQ$Q?Gc9]2pgj]Z#T
%F*903l07.t?K,mi94h#F+Jhhd3W,s5K<#jk>_id__?G9CquA:@g;C=/Tiu!"6rh#W6V"=f_K=^`4BKX6(DcL)@(.$_Uf)%n4qq]S
%1^YpiW@KU2TSj_:+20Bue_hO35k/i87&k>[?[M9A)OMW9`N:hU#cU?Oq><c"KmaL__?-8-5aI[O/g][+?_QPuPT5iS^>.`+5&TDr
%'(o*jl`!(Fo%CF8$S4JL[L&(oA##FQ\uF-f/3`^N&h[-`M*tk[9j`)YL`E/?^p08+;5&Zm/oLRWI1G2l7lks%+\t6hJGV?s6/j@*
%?QTO((kCT_pRk=Tg^"G=7$/%I2fOlc_T//HFj,do*T7]-JCG=nam-t^6L-_/ZNQIA5KWu_3[c/Uq9BiFoE\2i"e;""h-<`g0@A&'
%HP\T,NM1C6AfK&n*@93KJ./kiPji@eGZoV:,l611.-Du9:blJMjT0i(""nm1J5g/ifg=iuA#Pph<&bPn%SE&_!A^f-[WM1BZN&8&
%R:BB[@p=++4orhqoV<JlQYQXTa8FJ6H_3t&?X]'CAL.3$fR^hT:,B>^A-G.Ap2?c$&HpspACC$9dDjDm)+c\hK2cV(qBSA'p2PC*
%DjI=Zo=,"$>H[n0L5VkKo@XV'rQ@(5_<cP\F@:dgrB$I=@Wd4rDCSl:p[a,ch&Z[@*q:/i"hQ$iM!/B`^rThWCETE?"u)\dprbsD
%#T7,QI.id@a`6^hGu4&:nj1SO=suX;.>[R=:@hPSb'$50ZU!HiX-u,PGM:3AHP\q(J3MdY:-D[!ocVIM*,bS0?8Bm7_a8g5)O`dS
%""=2J361dAZ:3Mo"Abe1c3)_EcICli7pLi-ia8;J>FZuRaJif;=at(+[4%RW/frG6.Zf)o&D\uI/.e0oZO[dEcC8j/L'7[.nSQ[-
%R1`2e;2RFs.`4]CKOq*nLe?+?)P*Zd,k3f*QoD?Cr;PfHhgu'Kr5c5YU\]1LF_d'7:,`pH%Db(D4Y3pU?=^GoW]D:&GGV?:?PRM5
%BJ$>caODXXEWA>Ih9V;I@]$nf20md/XYQ;Q]>F-8D+)_f=u'e8LbrL,2QO7sS)6FZ(!.C7Z;E%adX*76R!2qU-mX2;mM+:<1c[_C
%&rqYLB;R?gLFM@!HB]*ReKZge>'%a('goTZWRP,:><uYNL'B#./^&r`f$BucH,'"p]%tq!bJn\i6(mR!"Wjs`_eF2`leflu;oH]d
%af%-u,ZI;el;m[&/jN-IIYhFB^X"k;\OK$INZq]CoE-Y:el(#C3CnoWF?4r[#%blrEHh4:l+R-I*%TF(6%pELZ%)UqfHd.8b8P5(
%paeXJ2p[%diNX@["Rb+N@k9HRBDs`@Po^6$e)a#lZo_FrJOqPN5BG&liVWJ!h=\ZLPg^c$bGKrIiTHCEO\j`aiC5>SSh>\8A94HJ
%%sN)Q'N:9J.PNmm9?sN"$pE*!#[=(-)?jY8kkAWZR[!cB?dLmhEk2S;$e5P4Ot3Hg3al78/:I6(5uP/fQfn#(!JUTl$gm<%5/8\c
%-mEmp4Tn2BU_JWSI?a62_$_.("Ui0L6k/38r)`E'6k!VpVh-*-j8;o<r#943bbM,9ped,`"2n\`SH/jl;.1!p<BdF#JiU4Gc?[r"
%]UZaTC5@sJ\]Qf4gsJdjH+S>3?(">-0&[e;PeVLRm(P)HM@Ij<rDqm1#>(p"lU6St)6,<-..A'QRQc#1;J@YmV1"Eg?@<9@-A]V<
%4DeAbi\//o.:g4=kBa)"Ah'NW6Y!?E:rag4di`@I@)Yh?Y!SsHCr>DHbK1]?EKk>)U\cW9W`[?DYc4Si-(#sr=1FNfI)Ckqo_tN_
%9I?G!#h>gOX+fr7BGG*7d*#7O\KpM8PTh&CFO$_C(!R/-Gm":r;B63BU*:iHcZJbk7ucY</0br")7ZX"ZRFK;qoh>Y4%2lN/=M4V
%_0smUGQMZ6i;EEK4qlOs422@1;/0QAb!_l<))5ao$T,2?]n"9+98TBso]K<Oe54;G#JE`ccE)@@#']jAi!C/8befCEQ8P7=ke''?
%ei)>Vc>3@8&W36i]rf,Z#W8t3BkTnW@`ScJKK4nO(LPNjP9r&Xgb(*J?S,@EJITUG\AKu1"GD2_q/i[(.@Bo%9_a[1KUS.$U=Z,_
%Z">gD%_Qo`Z7%'L6GY`?#WW[8DK,FYXW)sA06^WBpfnb'+cCbIq7Bi7n.gd7P0\f@#bXS.L"[S/d-)ZF./HhBR2++9`[;N'SefP,
%,0eVMV,c;<(@ZqVT?4lsSE#S?JK-6=?gF2RHUgm6ai1FHlK=p?GArmt1u.,lY^:NB5t[T$IDG"ij`HVi1mqR<$eZWPcq/S2;*L_%
%IQe9Y8!g%QYotg_9A<-oB$F[?CT-3;J+Q!?4ELns[pPi@:e/NY(,:;YTRD?lf"!$Fdtk"HPTju)=dC<M`;,f]rDqonTL[G>3j00#
%!8R(/FJ:]"BoT8Woc-/kr#nM75?C5RB,0I^h=U:CgmQ7!S#EKFj$lnJ6k>s_A`5:VA#FjpLT9"YB/4pRoZAf%hd<bM]0%CH[C;+6
%]F""a^):"U;K+Smg"RhIGs&K<IJfsjPAf)r(M2V:"H!CD44"0Xes!pt7[B"?+XMM;ce'XbjT7#-7_)]J++bl9d3P+NTdW!,EDeY"
%&1k&L6<RecrGI.>5fjRm4`m3`)cYr<;N)6?Ge!L1=%m$"*#DpXeA/aibmUsa5'^UD2^DKpUZ1:&iZ,3+eSZST#P&j?^c.dY*=?H]
%efCD%WlH'cW<aN=8et[aWcF5r?6eNa"s3.s6E[:Ce,6T^W.q4]mLo;c[6rT:2^]gNTaOQ)XZ&1Z2LOTGp.C2193OrE`A)SmWqZpg
%)q2*FMI$9/\2fkaTmgucfbTNg#Q<3c<Ph8?F9ChL_hB>/M5!`J5oN_N&iYnS,]K^`!.elIXS@kq32s_IR>%.Z.5Q69@O)YQ@/S!L
%,t3g([I']m9(BG)fgXJW?")%B-`JSp#WQ1?8[<UHW"N3T*pR@9.u+&=8u\GMi3RL:40_=#`.iqu@;h4p_rp?n_1!mQ8U)>cFJi3f
%h2^!:7<@qEF&a_r25"UZa^ktegGJJ,Ys09a1oTU1TnjI^O@j&X)N4mt^P"S]/'DG_*dLS_V0YH*/Dd0?)D3qua'adQn7EgZ\`8^$
%0P9&7kd3t#@r/A/F)AjskY4E+i=A^+*;-d<8ueM/NRWF6'bX?!I$'4>crgm.?KE-:!PLhM$NZol30Fom4/Sf%>%.(S<kt;h"^m#r
%,@[B<;g(>SFp<FSq4:]S5p&E6=#CK/$ZZh+#^,&o;$P.L8L]LA0aQ!O;kO*ckB5A;,8^Ng[EG-4fe[71UD$h3Xhc@hHARbOjf(oJ
%8"ZAql`"FQU1)!kPI1.Q&P[HtKX?PZeHcA_^nTY2oXUBdT=6[`Y&Buo9Ui.()l8%.PCHp'S'd<cE%"Co6:__-3aosE8o]AP@AU_D
%f>5?fXSijj$!Rh\n),;ol1qpD+YJ7ua;0?0Z>a41J"Eks";8as;l*grR%cCHZ[oZDheI;XlSB.Kp`e^D!UJi6e6^;pj;$%Sl9ndN
%FCZR/e8e@4A*3BY1YL%2;bCS>J7)p7>a.1T=E;$ERaZ`a][F@n7Bl;G:]bQkA[)ljikr3Od/t@4Z+,<-BD_;+!<+.E9k<7jr@9@g
%K48e$T9AjX0Z&g8)uMb^8bbJG_!<Z*lE<_]X(9D4'j`YeI,E$2=_L:u(;^gWRT0,CMV2uO[(q]LhE24sfaOLg8R*h&<get.e.+@.
%9Q@'/$%2u*&X'->4693i"+kC"T$'-<!7o^=5_=-9E@`Ie1EP`$%'&COdsPpkX9je%^]LX'*;?CO*7G+CO[nq)0a!=pN^D.&,Bmm5
%En#UK2EnY*?#_$cn/5@k#I[R.2^KVj[T7+$>V/2faFbPti`(q!Jkp6AE('?Z*uA+e6ubuF6kgc#Eg\9ANZX0.U13jA3b;o_p+AsS
%7QQ;l78]o0&c*#AOb<@JP!ue6(pY4"[Nt^0Tljq)2M/?'m3mMsT1i&NLL\^plTsFc2:M](+fO2U`jgW'FO*h4AQ<&p%'BskXD36m
%JHu/!#Pq"0]\a+qpLX_%.Z6ZRn;st^QIKr9JL0g@5/Fs_d5>T@loB:\krUIt='.!1./r!bjaN4I^N$WedOWN8\>@$(6)]<F9Jq*N
%k*7tdAI&J"\[NO5k5XM]WV>JA-QP@f#YAUYTMX,[J-7I.HDMkb)b(:h^#RF1++NJUrkG$46g7gZp>%0bE0=euETd[Yi2Ojrf#lWf
%Po0?PfBOSIR.#o4"i._:,_XljM[O5q>DQ%PK".$t)P9&^XYOrPP)sFa7Oke9W>qaj\G>)/LGdZKiSC7`f9qV*kYgfTbGcVF=C'iu
%JfkBYH0\'\69RSOqr\^/7;aeiPjaFq><r`-\L3N*_OYX/!&TY.[0B<9V"pf_W*$$>B@W2r3SZOl:_k`Er#\C6,"=E$2q215@T+MW
%V,.p.q0uXD/ec=Ae#aWqm\tBRj?DgrFjoCH9WmKI\<Y>_3UM^U5>AZ*#T3Im+tf\#"F#pJO9:r]0;5FsAKI)QiB@TXRboiSPW8hb
%2E:CfO:,\k@iTU5kKEmlMljTVo'HbOS]oE,5a/O#q4H4%1IK+:VL$C4i_!V%9tprjZr_,GZ=e6!k,g;5OY9cu)ZNO2m9'f-;1lnd
%U\CNLchhctMU;Wf!i9f%?U$0LY$NhA@s$Ek4g+k8K4\"?bJ<LF[&pOY$K-f(cY=LmoOgVQ-'uW7KBilPTOli6Qp":dl!J(OV#L=L
%.B_G_`!A[lPZg0""Dg@JjE+hg.K$]u\pD!1/-q-u`%Zu_*]UQIk7OAt]7EoUB+[cY;HSrGG4\N.MTC))R.O+^7s-!u8q%moeOg(K
%G@bLdX#-b'raD4M]X]eW9JaPR-S"K_ch77)10nbP6-;C_bS;lP%W93XQ\*g*`?;+^bSeRoQ\'IL'I:ERTmseaAEXJ;JHT.EL=ICl
%U'BUO\=eF8TteW^D=ZB26-QI0k^W<MAb!n-s,ZJn_[R=kY\/VGQ2"JOJQ?7#.eQQ+GEK4I`/h!AiX-DX*hb2\23\Cs;0GGHF[cl'
%N^beYdE`Kg6EEMJRY9o2$,GG\/)PkO(qWpP)dRW/p[h5=gM>C7LP""88YXBh4317j1h"R8_7r6`i3Y2:6Vr"qjIChtPp.G%hZd@B
%/Bj9jO9@gm)A;S4Pr/0(a5?O;OYdI+0tB/Z/,<Db%>FB]l?#h2fr/PM)C%ETb)!T*2WG^CfEBT@O%b0KU[6$,r-S_c\dW+g&O2Aa
%D;#fZm%:(aXa)S2RC&b!l4sp%0)4gekaNXD#fPZ0f\%EAnR-7UB,l\+)+@`#?KX3dR6L=3BCBBlp6jf8J)W_b/tuGd>jMU3T;t$P
%q/]b_A5bss]]80tV1qLXp@5\W?]cJe<\09WIFGN2bMU)AD08Z$Z,?Z3N!]iO'HMW$EB6A8AF8/%."\.M>[ko#,d52"@o1_:M?._;
%i583mL:k\8Umsfn#FVq8!JN*O\mR[Xg]P4*2Bd[.7S=s8?Q,85Rh9Be6s>?kSgPbL(B?B1Z9OK,$4VSA,<3]_:s",UK9/XlR5L_u
%MBdN5^QYOCeqXtB"7Z84_J^+N(@>P:/Z'";g*_PbmJ<\;?#$aZVPp-Cah11o5S([\k\?+ODr&?[<*CYOr7p5kRsJ%?IjiGhb__o.
%KdT+_he?48:aVu0SRV<B&V;2Zb)28m<Ad6N^jN>3Ku@G[R&0[m/JE0@^Uj!9GYHb@n)_(sSS3TB=&5q>`][GW:"LIk]u.-+W0ld:
%)mi5<i/B539!,K@s7d^kAOM7CWVGJQ_ZCqiHaWGqH).q4'*M&JX1;V)'r.Uc^WJ%p+UEUh5.\!BXC"FTmU$[6>_\nC4a`Bf@ok[G
%n^f+5K@S%SPc12MmCF`Q`P@P&hBYLcR82fkMM/f;JUApb69?ElIRe+n`ng7,T@<@I*lV,DlRO(`_@3[!p[--%!.Y\e\nu]!JCB<4
%!emGGbl[Dq0c9\BdK,iQ7/KOO4t//%MCU)8[4#J]fq2Zd4OR>U"RSe-\4kQc%54$<l2qmj:?om.6bk%ET?1UI*SURM!s$a4F0&@r
%S_,,ToW&N'/`gGskHEbo;":pOH(&Nh$oPm5ppSGa(sCool-7::7go=5:!o8?],(jC#^ScfBQN85&j\`ICKa\+)3MHa1i-$iLaUn-
%2CIKDL^M:X!*e<+27.DD2/HILQh+*J/qu[OAgd^m7LXZrAKFm/-WruIBh6?^0J;#Zm0dTFNkk@,nYs+-,uBE-C9'FP<'170'Q?OE
%.&ZR6&h>hdRYY)hR@3)cJC;tqH4$L=^[phbh]0O81Ncs0Z'M;e_C^@(^h7q@?u$>IOo+i30WB?`WH%2OFFs<U+q9SDr'B9U&AffF
%?!;DXr`MHln&l00@h'>_,/AsP3M^R;R&.k]'Sm?;$jS6J$dhE,>(-VHN:-B4g"c*?f]nZd29uT6hMuC/#(N@(P[JDA@N@kj'RcPU
%&MQ(ah$&?u[2kq:_fK!C>SRIgcteIK+HHS%'O;10Gcmhd<0-f$C"!oDElA#.CK2`CSJlFH=)fU@7K8LQ%IqVc*jgX=gi"af1(U18
%iZZW[Or+3ajce$.,1p1@>HS4@=ftW84,3`l.'mbe+8,YX[&9e>ec)F,EgDsbf=d$+WSqt4!f+)Fg:1O,'JTp7^j.u\__n&AA:QO7
%',cHhVq)WCHc(;[SDhEF:uH3IQLZheHs2>uFEt.aOXP7sk[QiQrB0f0D>7PEQ?TK$6aLQVhG:1.LURa&O3,>&4r*bWq8@0oZs""'
%<iKl\V#@%)JS[!U0"M/7?1(CG8\:hbe!I-D(6XLNVP.8h=.6sQBjQ<&081e4:1Q6Vqk]BV=j(2EjCXi1_=j"9f.=q?8<"n;:J7)$
%L@C&aA*u4QcU#52l;`ajUM^AuEf'C?/se?T[%%m:6-Tp5aC!:;dEP7>+OYVTp17Xok9CPFXLcoh*:JU,nLFt:Q3&CAk0ER/PIO&l
%?k^A#c#),"$CXY<XWn_iraL2;.NiHJbVsM&)kGh?*apUC&aGK9O^7O]/<-E_m`3sgA;?PG-5.c_fqiRXnTr^0.\;UK-2@*+l$3pe
%`geR0%&IP;6H>cGioN?/WB^Tb`8*O+0nLN2/p^ccg3cp$TP"Vu9)ac/\aV<e!+Cs%)<-kc#Z,h0aPjaA[])omAsLnZ,IN#]XIt\4
%HO7XRY=':q`"rHdT5R=/QV^pX_aN+p3d9?Z0$@%7Ak`Zl(6$F2KM</(fZ`S7?][`'\kbO<>.8ED1^^F2UZ7%)iM/?TdOn#f0ge(/
%@7K[Ji.<)[e^G\A6%fsSXU`sT/":3#lpPs#jX$r0lLd4>gnh:XHh=+Z?uV$o:&GDp$@J1?GsVR@28?3O(hXh1c.O_ge1/&YHHC?Z
%L>T_j`n/g7o:-!^:;r>*h<2\l9_Km1g[s+^!RORV9q2,#.GYlZ+0eN"r9=4(Cpd5f@Q2q4:6V./rS1DEPs$s&&&$m:W%DZDWU8Eg
%_#t>H$B:49_4`o?3XCM32$9OD3NcD&4#:?gKR6V_<S,J_HQ3p<J7i+N.6f0hL4Q`V1k;Oc^1,$%6A.8I6+ZWeNjW-mE#k9A`hjCJ
%(?rE\ZtYit1Cq+'0jHHH=s@-r0nskC6;n&L,=euN^$bjKZ)pQl*38Ea6]5d#F6KUEcrA\SP":)O(DX_p@#k`[`7T-s6O?4%C5)iU
%S7tt7iE"_fXV[K>Cr7OT"$HM6+oruGpb*m#=$28ZdRs%dd4V16psVVi;<Ws*g0M3'8/W'7?CpF6W..rCP3".RfQLb<qY>cp5un&#
%cFUXn.K_'D+rL/=Pik6*6nPua9#;Mb)WE=/FjdlEn#XT7Zf:Uq-uBVDO[e6E[1ED#)HoE8:pYN?oNQb.=J4HV2RJaSnN_kL'$:Kg
%<_!U(P'V%)7R=Bh9!ED/>6\4R^IHuT7!lhZW"g@ncb*GhF=DZfg"<sJ^8DBA*D2=N+nIZ2H"MH5rS@0uL3@\:h'J$1VC58=:O?P)
%=tR+mgIk*d:^b,?`DQjFM>dt^Fp]X'cN&N!(#0(pQ6KcAM)VD"KT^D)<NuOVfQh:Jkr'1:]dU&(B1`;!$qFiEX,j+!W"-'JDh"Mp
%'``tp_KJ<qG*'CgjF3mVlFQh";[A\.q#s<O0<igUV%Oi2"Jn-VF8_34Xm]h@lT+[dTVpAL/7_kQ%4h5'q2e%j)n:0O/%G5NfQJ'M
%)6/MdI^l/1aLU94#^(+6#=UD@HO*VQJR2a+WnIuC3P+XqFTqeJqF^/SWGAC`\DgT29XsuSrnR<KSfQfb(PPdnaOBeJ1e)tAPq+t8
%mSQrcm\^b8(cZ5m9)`pCD4eB)A1u:lpb]aVW9*[Bj0X)g8hDSchNtCKI`22fM7@O*pAIp7Vl<17/>C1ZYmBZ@Y3P/Z.eZ%*=,!_e
%q:'.VF-.h&p4.?NhcO^>N@;RHVTOa<bb^:>9D"4(^&3Y1^<rZc=cSck*+^Jm*dFL=ZPtdSn#gFq5L%^Io,MAp_ft$Q,25'mOJ9!C
%op:HN#1.q!2U<aC,?3p8.2F^%T"F\IOIk1H+cX[38B(!p5E?/qJ^?-2[.g+4@I`6:]^<k];SE`078g.5V7&SGl<3@?W9;n&#Yi2V
%Lr0IB`rSL0nq]Hf0/0Pij;;k?GBIbp66TYggPcAkaH5P$\UCa(3++7dlLbKbWlS/IhUV3Ea<4kO*!L!1a8$o*-><=!CRpeFSWr$8
%M&A#ro.l_-8$r9VUiQ*Do4\7fmfJNBKHa`n.LOcVqrc(mGTpP3@MR#+Y#eFs*mi:Vn#W;Y2Y?$PBAZL<\Z*H+jZUtsfNH+['*AB<
%UPFV;pu"nXn!C>3(#(5JAf>IP]Fi-0nW!%@Yq5u<=amW/L5.X;19Oe,Qpp_s$mdT2'ieFc"/Di]Hbc#K-DO$-</c.D<RjHfbSiWY
%DT3Et^g9L>4J'7q]FoH%=566nd`@4K0pP@G?=3c)>;lnf&-N<4d0))g+p@oU%TZ5g.BR*W(I"YC0cN-5R]<Y3h*TY;_eEh$?S!cc
%k_[Q>`(sOt!+umldsf.l?5`Qh!+a'E$\&0DQl?Y&Zh6I^EsX$Al,>^VGER]e/8^P@Q.M'ViuM;OV;fD5AV$b<N[!+9j/ksfLDYUF
%f\#\.5aYCb"O>lMrEeMs\JeZD!Y;f3K/>^k-,?r#kV+Tt>[^'jr.ql?/f0ZDVcgVTLT%gRIpY;6rk+>H!usj#DA"@R2df6DFAg-K
%9#*q%l."UkS'&`Q+$F`\8qM*GLH!oMNiRe2n*="U)pngEjCS>$W4^u51@=ihnKC<-WQs%W4$E_%*j[GppdlY-)A)JL+kATPaS"2H
%_"FQrpFWr#.fAM]838[8<A%t<1fY%gEg`f34\":`.[\k*hR>XU<^_eap7->_+=:cV$+HdI(H3LrKcV$%O#'grbW%o_?(pm+OM0a.
%cpuJ?;Bj,.P0TO/;SHb`-kq5BTY,F$C[rpRoQ(uP7lo,[DW74U]qTGTc/N`aMJ/`$>0Nd&hZZl1hq4@tn$5[i*^h"Ap,]I'\,qBY
%>El@B,#iY`B27)lHFTcM&n=K8#:3,G$@UVnj$2$F;*;T)]V0Uu^$m(2'qacr\8'YIkL;(IjjS"T88$T,9Xap-881o+@Be4e:s'O=
%!1qb94N]Npiop!o>P3s1L_!0Z!A=&&`\9L,+UMO6*$EgP$>qH#MQ:@C<&B4&NaR?sFLQ.to@Y6M&K^iXp\O1;l,"ddL1!7e#uR(9
%?gtI4.r^1_UD6I>^Rn<[Q@sG@\u%\5Z.BQu-ELI&-#ih"WIrFuE?ZqP;bTHK2IXQHcu2>e&/RWPb[hP!!V#](danDFJ(&5n6AQ<M
%J]:IOYgV<KG()5**k)\Y`GZ'e-'l.=aYjuJ'!Sh>8\7lG#OAF1'"NlUC2!*[#;rUYS(Rd$4V!\pn2n;2NOEI1q5,^MpPVIN+/;3;
%V:0D*c`-n%U9m;)bNu!C!K[-sl9RM6kgg,fI<m^r6//4XMl@pF04!N6&TZ6[ob39:-\g'sS^&JL".hG][iCaHP.[qt#;G&NaT;]S
%UTfrX0:HgS?A('E\PQY)O>)Q=O9bt9QM%W[Ck47/*K7)M@3IbF15I!G&n-E+M&sJd?>%#&cT(QN!+i5YU)d"))##(s3I:&O2)l/'
%c3f#J85u>2N$KGnN\>SfTRfbMG<CU>XI%5/:C(D`&K;3U!IDmD!i58-(%>@fLoX$O.k"'eoYT%pC`l[ah"+G(Zj4P^0I>eB+MHG]
%fis:n[;5,T3R^U57o0UZ%Ba`rDT],>GG&ftJVYbKW?;rmRSVDeD0]B7]?Lii2O+/=HIT=iO\5!J>d[[jC[L/IYP;baGX]W2)r*95
%YT'#59F4LL/q$Ze(:SXM)p9arndCX#%*#ldn4!KLKmrTSbub./C3^l,32/rQN`+&5RQs]u5$*pLC*0=*l:QcVFqrPBk_]MbY#d!!
%LolD<ohS-,mi[n,-Be2Q<:p2PK9Ji"oIfB;UVorH</rnQX;^Zka12Q!hjVfa?Y6L?b!)YL+b3#IO"125O@-AHjQqhc.sR\U8Or[Y
%#b,JY!*]B7b.kUc00,pM3op*mEVuO<Jo(E/PhhClPpkNgbrDOV!p'!@5_%?P\%XN([Bi2*\s,p&P^bpl9OZ*7acFp$ARL?i\0k=+
%7"t/hVm01C_.X&"-.0BfUm,<aRg2Ug#I=&(78\P)<2rF+802/]H[4g&U13>Y-`r<[U*=J(T'_OS_Uk+BGpO$_*GK70pR.&mLa-_P
%.$d]28s)Yc2cHcP,kVh7oV9:E'k8!W^cP?I=DQK=:Ce1lW)d&sXVa%O/13-KT9oE2_@r&(PI#O'OR!;5aZG_nl=CZ#%gM$&:Ar*_
%iM1PkBQGeBUH"nB9Km3[&8>BYiD3NTim#K>_lNT)@G_.'/t#IiUJT'O9G@Z[M'(SH;;<$.QV%&)La4>6W-kJtbb^qR%;e=:/YrW[
%8MB;=/4tGpW)_0-+0"/U,\/n0dp#E2VK(G7akaWcXmYps*g-su^*>B#?g)fBa(K+"Y2(Dg]Rh<B(]7ZiQ\E%,H+%G0/Fq5Y+IM2_
%CHR3YQVOPSbYo-+3f*JD4Qr3436LPeU7S.??2r\+*Pp)Te8\1DV_&Rl$sP5I3;(DiIJM-/O#0g"A)ms"Hb=2A.k?k]=*tX+^"uIb
%0XJdU-4pNK"IQGiN8q@;brY[S0/!4N$Z%=ZDk=/0:GOSY07A%h^"Np0TW%=8"X]cV0a5_[OYI_gT2r%qb"b@oHfj*m?Tbj=OHJ81
%pJ$57I_T$?e+,k_4NTftRU8+A&)OS'`l8af=bc1"B:)ZHYmDVo0f9+)d]W?2T3Ui4+7>k<iN);5I]h%t/SGGneVWi:0+t\PZ@$]&
%5@,]Xdc49DrT'47q'-,pP:4.\CT=!PY"lj-+h*P8Y]e<DGd85u4=qngQDs3j4Y%,K*h)W1-`<&#o6%?rhc0Z7W@,C$VeT[Xr3*<J
%[f]T,X^ac"O%,^?YlKr87<j-C`kageEcs%uin3?XV9^*,ah*Sh3p<RGCpB4Hms=.WV1@a3-]V39?g-.A8.n;FkPtFrQE$^*hq.Tu
%qgPHiW%%B%GLmLS<Mi6C`p72,3/(7(<;D%;s6jLc9s2L1-geY;W8^W`6a7&KVbq,nbE9)O/kS9nAce1,rZH(@(o:T16%<]"mp8A;
%8,Wa+iR>,;;Q_08VG+ET&Y3b:po+8UkckjCe3&^]><RkiU7aM,5(E:;2k8#`($f6II[ol?%+,d<_T]"hDbJ&7h@Jn@G:$W;.G%WS
%G:SiN>UfB(/_@i0Y6s!@ihtq9S_ZUBR;3E15Q3D&8Yo>T)-iR0,WNsFD[7:X6qV>FJNp=0]`FKY9j;G6a*0\f):M7#hl^G0oq80P
%?^b]CW=q[$.6XoMhNn9X6oSKHa:1[;KL6-!;?(F[@8-(rl00;%!Er5-B3JWW`#JiUc,hL3a+_5d5c:mO:(Hul?3+nZ(:-^Wbc+=t
%$Rbf=;-VD`HgiW,%m"&SQJctro[RG[p9c:PN0LP!`ON2?^;`hVnQZ(sIP!.,Y9>mtf"i5bZF)qmi]3Y].H%6gPf5^n.3:"<jpL<r
%Sp3TLo)nGlCK`0)9!g8YAWR[6:Ef$NOBY7PN8I)3<AnK,(=Jf3$<D[KW&DI.I0V>4AL+EL@B'8cc/s?eV=$m_d.A4[mYF%K7<,WZ
%?/.uZ3jZ`EAWt>BR5ONpl#V8mWlGdWZ7+(3V#iK021h,@0PUqXkul[uIW`5`>LoOqW2CR.2"`j(3%dD]p9]Qg's9Xd*>76FcPn]h
%$ma5UR6V^AiU8<R9@9O&OI[n_%6AEqg71ZE)u^jk&1<n6)^^,BabXCe;u=u>mE'2ndS?ZuV#^8$KQ7ZMXZRpoWdln>cm<EDEMdu"
%Y?qHf0hJ7UbrY69Ff,F?%af!aZ-lOcR+J@_HC,<!%lQ<j0S,'K+1\#Eh@@dB2FfLlkrqlC<>7M+nPbnqEl@2u<O=JY;>R;=8[m:%
%No2q?*4Ig(=[Lt/=Y"MdQ^RE2RT'f\BC*1$5GC1]Gbj2LPIEgBfG(#H!p/iX/j.]K.?#oH[M,Q?SX+^*coF6MUch.;Wn!lp\"iEt
%0`"GGoplV)*:5mRTo(>!C(bZUh#:&u&N)CML^7L9$87!W!YrLWITHu?GZ,q;mtMbLMS1M=NXFOiiR't2L6f.ai/hX40><BFe":CB
%-]&u)@"VCmS$U7B"?n!3E[iEt2VNJ7`jt"C@.4t4"tbMfm5a$K1t8=qeJT6!imgml26G+\%G]03<N0KCc5::Xd5ua&oHcG(`lW>q
%%Gf0=)S'.Q%[SYT'B.tAa6Vh-<PSF2/uTt+QWD1553!(4+Lr)#Stci2p!pAOd6M5V+]Q!aa<->Ker"!-9=FEAQ1'//5.-+FK_l+A
%dVjslVp_i!9MY_eVj)S@B#fdQY_@5G:6TDqa-P#IK#=mLQEW@aC;l!2AR5O!Hh+ehCa9TY;^+Mqa30-beAYd`-j/!2j=ts(5_f'B
%?/MDG8mg,u,&@tu6fg.V_'O&#eWl:->c$i[-.g5?Sf5Y*.l>]+OWiO17-BIZ"j=?$*==qso5^>Gg9ecNH.4?Q0'k[B`FSU5)r</=
%.@I1!CO(n`$Yio?gT=jBXmMLKqJ"1E"$]l3()s/T(^P&+h#&R[W+5)C'NOgsNF'ZnVf;"mER>TA7Y*C>TXr>=KqI3V9;7A)-/_[X
%XNI%7lE/*US>]Oc)[.4H/lXK/[P11h-b?nl3,TaSRJebOg1^o'fS84LLE^==&]5S'94?dcot&arKn-<U?DlQO$$(R%llEsS:^?!O
%WG/r2RY\m#+76#]8LtuL6I\M8EZ,"?^)TOF-[RcBL952*L20Y]!B[Bo)Eg(dSDqVYbF5].^/\J"77@?H!T',pJo`+7Zh\2BJ@lTI
%dq9(E82o:4Z`),o!t;jE3rt=TgjBgC]i1"qC;+S;&cK)+kf*%p^9CY,?7-[Z(D4@J`QGQ+(l)3X;bY:iMR#[#n!q.-!K.#7bl3#)
%Sqh5Xq8-%a!H2eBl\SDVNoc!0^rJNe`FGYuIqQ&@CITAa8Y(Ip[[n=q"h;)i/j=0KNX6MG3']\1j54dtd\:h4E9S:+Z[`\*R[/_>
%g'FHDWfD'SFe=(20QS4Kl`/n!H;8UNVlBoiEXm5nk>%30o;!,7'5sKp=du"#S%0HC?qLe@J<%o0qblZ$ic`qEbH[<re%"gGZeM^X
%W:W_X(8A>'$c:Dj::+5Ws!rn59C=<^nXaq,"c'<=.SF0<UO1F30$'<fc_M1R#6Legjb/6#78!P[8(PMM7n8U^2uEOf\1TbX;T\6q
%i6c-c[L%$,U<3nPqR+M0+J*>sKRutc'cTD$g."-^[)Vc`JSg62J_>0>!\)"580j>NkG_GeU]Y*grC7miF@W-;fe&Ee]]-L;gWX=j
%^tTn^UA8/MGVQ/Hb<ZeaahA=,@M:WU-JS*taXaWu/CtQ72fZ"S>14[iiO7f(r&eb#%aBY/#CmT.Be]YcOpXl%*YNK;.XE+2P>mOc
%:,HD%/TdqS=(O:=31JS)Te/\P@b7sqW(8i>G(6%Vm5a+c`o7"LpaS!HZ^<B=Pj$:?>T1\YneIK;!qili"CCQFC@Hu`E7iO/.Oich
%h/Nd[8O(L(Qdb?5'j8)0Q[:^qWEZpkVc5.WYg=a[pdZ,n!Rb6b.=#?"EWtARJ]Xnq\BhAo.$ar4kGSLSj1OjPJS').''+J@&(5PC
%KHr`fh/Nep&(q&`e%JY9JiHJkD3t^F+kR-_G,WaFSh`b`Rj>9)8a61G3^.(ih/<c-)M/G7BtJ-@9rIk#gA,6`_Wpes7G&ZV@Q4!m
%)tGQ%"WohFm[(Eur=^F/mB>YuUJCCRUF\,iGV%K:G/#1BYG_1NBl5+dgt&E/<J/EA.98p`&G@`1Z!/*;T258gM1@3A8MI8Mqt9OU
%6\(N5mC,^Ynt`H09+0B@1YhD(p8R8O4s\)?Vjj%]?o(=7YG25f`RH;^5'O`(BMfbi(A"+hF'57<G[Z.,iN(pfQ8G62"u:5CDu$+n
%Hg.Gq+3c)Y&[_$BQ*K0%J.J$pNq/PL%KHR/E.WPe_kTtAL#h\!c^bZr"Y*me:GXYUT?7^#109<tY)5q&8lKct0q)GJnH"#&+MquI
%o_B"t8?L'G,,Kt5XUToO/n8H\TWK*fBm%iKTXlAT#.*Z.g$1n^%>gdFFRMZnpD57SU!B)LoR+N;HC&Ygi2a42RZu9Q%#J$mdfr@^
%o"jKl;QG/_[4"l9NX*TN7Aln.\s/`u35#YOppHq6$!94B@NX5BTGq[3<<.)"BU-gEY514;4b!YTC=tJ;pjTm&M$+orY0!3q+l#lG
%[,fQ**9(#FDDF"ZHEi#O%Ua_qP_:AE[lA"CBOB.JI_;@6D!8=m`C"8!:WX11/W9V,PltqoTdOfX/Mp;sd::rU?.=UGgbXj_GBUBZ
%l/WFPU.B5.?[<S'5,q^Kp)TA0o$XC<<L&.i^/pIo0"T5\Ih&uF>Qr_H>)5dU=Bl:]eTR[dM,]4[Gcqds$\#UM)es]?>Ytu4C+B[)
%jg1*F1h`4qHfsPR0OPtQm@^U[I*aS<XP-Vl"C2h59#t!V:d_f9bUl<)]N,_smTE>#>3&@+FJ\^GrR,?n%p8eu*)#3*)EF_IEkU"d
%Gl1ub`XF`p-XDElf2@^7S/35^ao,7YR2)^5kO#Wp-J,((9m,qjNiHJ3K/k#fdq#"p`YN'PK;%%d2HhgPq/]9U/j7JFqK'oieh+f4
%?4Eb@Bo(NRj]e`#L1#:fY[spdi6m/KnJ$A&%\9JK`F_!_fdQ9fg*"u=q`T,;&!_VSj;empV?%[l*(i?9$J6%cBN9dep,MUpdnBup
%qcTb1rRlcmqKo,Cr!%33^*9f%C4*nQ$D&+>V(+LlYqk^2Ce'IQ1UD9]k+b="OO:=5D+Ar,m&S<:I<f$hE<,8pO2O=)a;pNaa,l=X
%h%$e\+,2C#:"R`?iFTAt=hdJ)Q6FtE%dip19-M3Hg"p54E$5I4aY>?0g'+RhK20k":j$anN$a"[6Ej,@jc`QR-P"DtTrp-g6D`8,
%o1"q&''M_mr2F`cS=!g\3s5Q-1YfSpR1fEG"eQ1XRp:SA%$Xh:h(lG>,NkUp`B7/S^P'MC"Q7[7J]tn#`HKpYIZ^>p[$6d3mYPHV
%p'm:>VB?G!Ganr!m3??ns"7*n!_A?bj.k;8Hu,D8M)AMh^Fo\e(Xc9!k$N8MMO\!n!ckK%m-pJ1_Ypsa6p:RMd1ZOmMG4'`)2_JK
%V$=dc[?qNlI_P:NER7%sXh+CoFj5CF@!,lU;Q00Pl4WlKkGmLk6Q\N"_CXXdI)328q.:$Je0gg7K/rB9l=)N6QT=0q^pc01bQ>(3
%s*\d+aLhml.'ZDCMOb9VXnkp*\ZR1EqXZ`$^W>WProLKb5@,BkgPeDC&@A:4.QKQgTj/VKauL'A3Mdi6$#<RPr=#"L$EL=].Z]2G
%4Z1h$N//VlYMWjOG.HOaieI)W:dsMfMUq`_WM1rH1TOb"jgBUsk>g-c=A0pnDe5HI)\,+CXm/'lO.<?]`9f0q$I1A+_#@K(EX:Su
%<5tqM)9uc,rBFc1eDqeX#Gn-\+5qk35dH@CHc8T`Dj5Vl)R#GNqef2+o/jn5_bRRBd$ns]ZFbkl"^T.I+XPu!.i;Et'=pn"?4cgJ
%qlZ"<Pl?tuE1LGk!`BTD2,0BtqbVkAHdtP%I?$l&m%&rh5='Zg;-U_g(**]ZXB,>X2?5?J`EmOC"hrO&N$-J*C_X1ePddL#>0oN\
%U9^"Xj((l9/K'SqBTp+JEV;Kph#NGS613I^!Z!Yobt?ZIG*"42D97]=)82ZBj6.$VQ&QdTNdk#8\T0LR'_'3WkUr%a$<g/J(TOE6
%1oc>3N4q>m-&p$CiM"t8^+gbgUK.RScUGue#LiImb`biTd]<//@@Y+NKJ=9pMLp!RdLFUb7TmfJ*i^>[Mm^#N'(2^MUQkCtg55Z.
%Esje[5q1,_WrqrB?S_`1%,JOG$b;Cngs=3<E(lW-ZiTm%k!tIW.J;&63V7MD1.m2.SK`WZiQLtP#b&:A\D5D&q1r[cpA%Uh+%oEA
%nldl$oiS`NijDn&JSK95qS%.o8DsBDflK_/MtLLWZ"M_#=ARGo:EAnh9)JB7oG!j=^p1*'#j'%XI";?LXb;.-Ufq9i#9:s&[6Ad_
%\U@L3^?[StmI*M)"SmYMg,ME/fqPV)-tBQFR/bAVNR(M`7ZH[(-E5dZRX/0Pc;Xqf?H=aQVs/t?h5<?1P6e>S3[$=FOl<.Wjq+q,
%'M@Sb?Y+V0nS^$boj-U0eu89m$#u6hfUsbudDD5rCk8;%63FMCJPb`iD<O$Yl2:?YFns]?C]RhRH^3c"]>b:Z'Y-+[S6u9q:Eo15
%<qKZN13j?JFS0qdFM4WmPBTb"OECCp"8\4C33m!fa40D7c[kd>Vc:;jJ)>N@c=O>9CM<.8kRCSDl%KT*!WS!-%4iR5.l;4OPNPgK
%nTuQ7nFc<sTZE2.l*;[.c$uBmE(A@?$[2M]PG`M*h#JC.6U3j&hO,$p@&.)[hH@NV=u`l/SpCbeSY8(ELlL44*E8cZk3>oOl(`hP
%R9q6p$pn[m4d]HCK5rsdU=;:XhWeWH)!A'jj-G-]4I;>JIS!5,/(a'6WSB:Lhnh,B7tsDGEp4&aW"k^V$X/cpf[M3Ec#7[:0DNC#
%]29qYej[hu!oF4WR[>n2qNC1JQ,HkX$tTSmcU\@9%H,I_BRssVX.p4&%uY216=a.D4k&eD#=3@Kq$]OYaN0=9qM^be%\6bh&P@)[
%M^.VLaoX<O%aL`Z@B)d]^(3rI*H>ACn4&bL3KK&lmoQ))\j#G*Md6kfD<He:lD\K@$Y8'KNiLd%+WNAc;`ba3;.4q'H3Br54?I/A
%?h0Lg0:D63(kXbm:9DPJ[Z)UYPBu*IE4h"nScYHcO*)"M%gt-;i^'2L.?fhkG*[_#U^#@q?S;RAn]#7dU&aht[]L.?#O"?)<s6;S
%b=&ba=^kZ?58A_43l*(,!3`AOeV*X058q8Z;0[i70,Y]PZt2].0'gMHE4=-71J$-A+J:8_eWHb;.K]>"%uba:3nYJ>hJr&ESLcQ-
%EsgB,6f=Q;-&P3]=nSf)OD;30j-/C]5=n785t"KZ?N==H5toPZ[Hb!;K\D2*A^O'4/)CB74DiTgopo&M#R.kEjhPUHX[n*7(!&7\
%p=jD:E*@s40]E\;(rAE+e6i?c*%YHh+82XVI!%`;/]C5<(n.rt4Ui>AAimk9Op"4;OfNaTCmur"Im3_AN[Mqeb/j>i.MRLg9i,YP
%X78hW(jggeiu:bHc`V@^>SNjnST>$J8AI?O11KPtNX/))-U0,9CC3PB*VD\r`ei+^61,)C5WV4&$hA:5<@"VeF&hR=Yu:c.@s=^V
%d)NN/.5G,f6(r)?>76k&%FK:HiPAkU(\CFO55.\=_KY44lrBT`Aa/Lq_n"!E+CYN/#3t?m]VW<=`5stf[HD5Go0ORU024@k4IXu[
%V9,>VE9[&p"]-R",FB*B1$p+\?WUYf]8B@LSsU\;64Vgu.lB]6ck9$M>,CT-\g)phZnGu&5o"T-Zo,^m1Q/m:-8`=jHc0$#p@<rA
%kELPV<&K1UaR6HGl+Zl3-?-pL;5@ZP4LT[JY&m3]^Z)`^VTGK8"7dV$(TH8XLS8QB*sQ#n8FuqQ4)]t/AjGL:6=F3*B&MgLrJ=C=
%A(0k#9@82EGX.t*o$e%ZP$4.0r4;QlIZe#tFd63i)8]ag-=/3V^0=T0>pYh8$Pk5[=hq3Q<*@ZbTiSR6("2"&(?a7n:R"M=FW2.]
%<AcOs)J^kO[44(Ak[_3^[JmHufHBW1XmVlVO!!.7`ckqi2MGT7R7=+>B3E>+o9ul0-0$";+B6`4IHt$7j6d($>H*S`Tt#<WN3:?(
%k0_glIq(]5=::23M;jA1H*lhj:aY.(lR5E]f:.?m<3&@V'.6or`%.LP#Ip-qHKJ,h+7K\B7:jW2fu6skjJeb@4itms?R)l:=8hRY
%53egBP)+S.6T<faO#B_8*$;=^\_T,SYoO^1F`NpRrKK4a-X8BN\B5<J#b?I.W3,A#;44ca+\\taF6Ncc(@PiemYi0Z_'tWQ-[k>^
%@Q7/1&#V[u]r%b<C_D;?fc[.A+Bf@rh=@f^HL*E!q\mlgI%8msGTqB1P+L<Aq?i1a]dud-kjLY6ep)`Z?)aqEaN+&hI+iAcgpQCC
%M_i[_h[t@l<^\N3eaVb)d#TN-i?/U:0R^9<mPK'MT7FP_h1;$s#Qc7;R?eAZ]_`/`7u2K\3=:<fA6JViqLo!#02ah#@oiZbL:d'2
%'c3C'))gQHMChEA;;BYN^JZc`j\%=%oFN!oMHN2m:<247lf?*K?,;&Rn3O[KBft"CaZA0sj=\I,U%3<=^N2`gLGkpcmp@<h2Wqqa
%FjdTcqQX*Y5J'rjnfWeN$:MN1K]&1[MI&,V[rF;qMh1qLWs3fV;h5rI6\j6>j?iB6\0-Cg!(DacN//_6oONdG'r%?7&^g@"lV`U>
%U2gXAk\56O6&/:&Bj^dXjEdiK0iaTN<_]%KXLICc`SPpX^Ka'VT-,\+Fs$48=HI.k0N^RoW%qZ*#TbIcG"*nR4E8::MAh5-ksu]k
%$baMAT%Gm4cfpQH#q>h,aT?9:10->;Jd=DpG#kSA3a_[4"#f=8PM&r/Y$+r#=K"7hM90Kn67tNHJhj6Bede9^]%U\JbVMec1Le+Y
%6KRB1j0KXcE'?dRecr5Em\F"go^W`$q`*"S%1clHd4HNIPS>OlXn>tn+gc#6pmqAPZYr)\['N[id4!99?]Rb.>GQOHp3"Nc]fP4@
%OI]`je2'IIAuYbl:PAjV+'fa7MUnidnUR?N`\;=nWIq.$fD9MHW&#lB8-q*r#YEtT_GjRW,=>Dj,cIg-c,tjU=I-&9cIZR?*H?Dt
%S1K]),-(&qb*(Ff_)`%UB_mQ?4",$?O+`gbnu:Zp"k-r3@[:!AP1kre]>C$G?*$cZhYE]6]X]7is7GoRKh@?26>a$/1mU#gXgGd2
%oE23re$i3!-fT\Ppo&l"::rpbN,$!:-"@KkR<>)75#[T,cG*RbPrf!n1f8FS,RiX1YjJ#qc)cNX)n?Q-d>r!-UUeq'i<0q-hlrId
%:`=%$s+ig<$YOtrWtM[MXE<\J-U/0\::<i0-O.FTOm&3qka3l7%rH4l:aesR"mGlo<gr78W_s7M88I4l7e)mAX/+tp8^Ge#?V/;=
%kDGo*]_r=@7(?IB-I-'_%,QsU]C\Ksk/dNJ;a'%6_^/>T6RFBna`_O8U1lU80kXO$O1=6.r4=_mVsA1[j.p)&Xh\)+L[<<)2Ff\5
%EQo<EX][>-"%<'p-Ylto!l93*oUAbQlK.`N^G.+rfhnVL]pJ#Q:bN9PKB=XZ'V<41De_r]h#fC$@QK>`[e.0pj.7F,E)G3o7]6AZ
%7^paFkUO8)G3.`G4;DV0GhD+L<!e4Md*O*XLC<&e"T+&[SYtO&XeUjM%B:YoOf*0B.a85tVHBmAMdd[lf2![Lmi_OmobY2PM(qh:
%*DDf=^3bQN)$BN)TfLjeTdnVQ0Y3jV(?RbiG8VCY*OsW\rcoDkmd:$:iElc54b59f$JbtKM9JDW&AaO4L9[?aFs@?ZhFiBh=pkoe
%l/RILcsi]G%5MjTge^m..$c_8l[PK[(F$p035WBR>5>^h?+(O,_[c(h*s;.=$ICn9i#X/W,4Ha?J$.;\$P!#V_HltWVHeZ5A)K#I
%l!U]C/jRAV%87K[fY?:-ba(+5A%+F`J;G2Kl-CH`Pr84F.2'rq,3bNd".c%(YCQZQUhpa`h@m5&arYbp;d%/8f_"4pEn/N)[J9"G
%/"aE<.<#ZRXMuHNYl?7=2^(lDn`U:H@$CXVe+Z/KQI":L`mMaeM0!n@CcWKY19Q,gH>&&^.u8/a'XL!M=]0-7TCF'TXJ1:ri;n/;
%fhuJa@,&W'/H(cP?k?-2Zc/L&7`sjH%MIQtJBHim7j@ks(O5]n4VpDSXK@"%[9mG6VAh(-;'uPOKn(6$[R<j16%7+`<QUM&mNQ"G
%ZVUZj-J,"[>W61Qo)"\oN-[o+D+!u)C6O6gcg:d%!;2bV(mGXNO_r;_l6S#ACV]5B?p-df_W1kK/m"qJVI&>tNO"Qllm_4gY#q?(
%mc(_?>'rh4.bWPk.Nlj-D(*pgL2(S/^,R=(r/<DQE@'H3^To)8e[$ns*,rq@RuY!i7rn0u=#po\1!aFGl-iS1Y&`1]oGTWb\C5!s
%b,_9&fhruX]C\1#S:VGa'NL]TE7@t29ckIoTcoUdir%C!ZT.h6V*2^V7d!`?*/2=57nC?fad"^Ol#4\OE%_u`efB%)RCtAoBDW!'
%WMrHd'L,$D-'Thrhe0l``7j?d:FNm`q0IYa+/;O'kQ@j\G6JH\a\%u&96qr4;:JZUB3R!#Tsc0aoqQI'J-qhJa(nV\&j2bk]L2d@
%<3>4iJH-h)c?Ei0PUMNQ&=]Y>I%S']VPFMI5a<Z.>,W^9dH*1cO_5I;#t,ME.&s>k7-R,6%E&7<pIIrN.$;1GjK2P.mAE#3!sAEh
%*Dn>R.ZMo\Bdh)ZmkfiS%L3IOS@.0"l9o0oAEK^0DOJVl)J&7Q"O#R#;fl^mq2/7+aAq84<QIn9q_T#noW#4@G_PJ>@L63af/r8^
%"EWUN#I0g/6\%dFK;[-m!S!X'?r&fV7pWQC.SF0(D>?[o6OQp`$iqtZC1Y-omuZth-*WGFRYX*.0hNLU^7tO"0r1Sb49C--',td-
%;tU_siVtJ&P8TF7WlB^T6$b!k2dM4,QW+3QE2h\a8P!SQ/j2^-"O]h^I#SrR0P0&W'!''8h,r3$29lRS>)C%sM;mue9%3k)2Zeb+
%gkcl17b0e!83'"3GRgu>(X@FD!)FVHK`--!1i;pr3S:LUB9?WE(2Je6>sWh]97^l>'c/Hbggr0)\`r].IdG@:ra>KnGY2:9m(XRP
%I50Z"Q3js8m&3U"&PAd,,k2O4V"A@NNioZQ<LPcj_""]7bA#h0LrKiGn<nhQW2Oo.n54KhrO6tkr8o+?q<)m$THpo2<[@Kl>Kc,h
%lIG2Vr4(iG3t_ZO#_Go;G,)GDS^Nh(/$:pp"fF,ekmF*LcM&$n[[g/u:Tu7%QqW$1M3&hAn>QeaPi.!q@4n(]#_3e>?I)BN1o&Xh
%FuGTnTo^FhbG'-(iHuk^#)(g71;Yr,C(PEe$Sn2Wd:KBD3F[gXi9U&Z!U2ASE7boS&aOWuUbF/`pCh%u4.Dh^WZX+(d@=JP6ZHLr
%\_A\rYc=Lo`(GGX$)bbQ>?pdVfrg2GX4-$),O"%2qtXmt!>pg:G:W6(DGFdMGBVkd)kWP0hdcPO2-O_u,@%'-;phNCrg8h+hkt5d
%:B^XqP=5u`Z3%g+hJ?a^<f.!Q#K:^"P6soNO!YXcTk/0)qAi)gB3=UM[eDM\DO3?0Yam>s9!RX_6>YkT%)n^lU:1^1l1ZmHnI8Pl
%:(qS(!MYm9klC_'cKrk-IM4T@CalMW7ObejN!RQSZ/m9@J6%578I.IBM@R*FTQ$nskC%uUmW]Rtl$EA8_7-Y^BlVkg;LMgH[-el_
%WrLfQIbCZ@`grY=+1=pCh5Hstr-^@^r33_]hUd(fmq"[3Ak/-1<lhDWQ.jA4h2$0l.!([G]_B(@gP_0$jmd7Vs#B=k27,F3AK4d_
%Y[mul=M;Z_.S(H`0ZWgP&+,$nb3OP7>16]lQc3[=m:Sh!UQq:B@\$lP'e?nG3V?`4,nsnn_'7B_L]ROY@0s4LT7"h\ch,"9^if)1
%OPUT0Irt0PIQhJ"AV#GBAE:8CVi#.C*_%n&PoQHtFO=UlQB24%q;JU=7H*9pI`+cl.h;/((]HV\<GM+t(=.<kV!\AR_#J]l3Z=o[
%?<FgPRkF?pp!,b*FTasGY_ijLeEh]L[M_MhJ"5l=#[PV%D$uXZV(0G^R9u27gp4[OneIt$jaDksS8&LjMF2lU_)&c7WS1jp1*LZ`
%Bl_/grPs3LK#A'Hon./ji+/gq\cY*M;HFca&F&:=bu^gZ/7&Wq,gP!mP)TpT*M_E1C85/ai5;:>eC=A8em&\N([Dg<nJ*'p(t;8[
%OSSD0A?!`\fTtF)P*\XX03)Pk!Vq2*IA\F+:L]Kq6a4,rPR-CmEJ;+L\g3>H/u_RgJYp6S'+)4!?=3*dZ(C=-RI*ubA(Oi$S1\HB
%rcGNA2ZS^f`+g^HV#KI_aDk_?\c),hc$H<HQ@VL_nXl_Z[n*2`CFWZhB@."&SH?_u&th@Pab9mp2DLZsnbfZX6<c=9=D<IHe##YY
%:Fc%_)J"%FH(jQUVBgujL^NLF\4dkrr'Qs*M.Y<dZ<U*;.<L_t)X&B(aKl5\HqH+$I:0+"=HnGjbSC-KmbZ(/MWTMhk;1%HB<U9_
%q%,[PA"-Tp$X3b+n6IR>d*QT*)s"aA9hQPBo@)%"daFSfT0b/$0_+c$n*6m7N;G*@3>ep#T&V[Me(s:A3ks['iLsB.k__40SmP8H
%ZC]$MO\\Rlp%/61X;FA#N%BltI)Fm"=amJ;Lmi+WfE':@FW.T;<([00"W@")ikMtI<YAU>#?5C:IQ,$?jT17MZY,?Bq@k>J_]!\r
%]$U`]h][N#q1_4lnl=U1`I!\KMBE=*oeW=0p3Hb63sIC?s+7DOl,r0<id0Rc"8coa0gZ"f"ibH[9T4IF"KYqr2+<obc]WIF,(C:L
%f=YIA1"9l3R2]c\s%F.%L:5tBW`g9p6SRUS<ZM=1.9FPn^+F#2hmpo(=cH</#X`>>$>V<]*k$]Z4'HR>DCI[[n[RHmnDU#.jnDtb
%-U"5_kXSgGNT_X$13>^V8+R).$.%Q;%tS;SVu]u!Ze+s;RNp+tk:RHoj4fh\S9X+b'ME`G;A7mkCs*gW@hqXbb%P+,Ch5q_>ja]B
%oV?k8eC[OG1,O48RdVbArs$!fhXrFr=XOOk\"e]R2iu`7Jh@qLajm?/<Z-tC?s(QhOU8J1n\HGBY!f("?0e)m*/W%hO":0("N3DC
%6qIn,jkhrJBTR#tGaFedb;sLd86#\9q7Nc'd.;Sh4m#EL+EEtDE'KuomNJQZBgRXRfM^Y-<">@6i*W.5<T0Iq3g)YA1pGNVW^P)&
%,"?]ZH:#mg,mi_pZ]KW2cP-u0%CPN.T\9Z$W]SStc*tqAfbF9<.eub5i.C5YrHKg\e$:ob;^a7tGH&X8_SK`&:baGYN8@2MH^<TQ
%FOb@D9._;GE.upEH!0^M#S@N^?0GpO)%Si&+B2G$jq5d8W0Pf2hQS+[qI!]$p3(264)d+GP@QerOUsG@qoX8*R&"Voi`)GTN+RPC
%McDHM]Zqi(;YglJcjSs&><=b:([pi8O658<=ST\XQE=A>l6P7m3u/m/!H*C%[H@,ko7CO2\tsQ,$H,J4[QbDp&1h>S,cU8g_#3WI
%RYEMS@tjF+hhBr/O<0d.J^qZD&408u#DU&QC8E&_\R3\dr.=j.hNf9Vq$SQ>'-jI"+1M,"'eDbodE#iE5&oVZN2CG"<PW;`Jb#3i
%'u>XWGGQe"dK.&D0'"`oVeQHe9mSRd.hu>oBE@Ju3:D'3-PLH""a[lps1ZW:PFD3hMPpo.&16an=/k`WeD77Gf2AuJJh`*uBq['5
%KqgCn4X&.u(7N37HM1!p@lUF&q^TcDm/pECBtdAfFB8c830\bZg\q$=EM([g]6\&`F2*(L(&Wh.>l4KQ4Du+3<L8H2G8>+.``'eq
%\Luq6&g"AcHJYQq/EDm\jNoh]DPL0=?oTF$O'jQX9%pn@NMf+T)$fs1X-cg]OF+=s-A`&3p"qG$/iBMP*iC(L'W@@2g$A-IhT*7B
%fio`]CV2=\WZk6sUAf2Bs8L<rXtDr86h"`*AF&CSlbu\#\)JLYXX<%f$GU]`\1tCm.Y,/EP,Pma\/?\TnOcaXIZ&#FDa>&E(dmmY
%(1jr$#-#0aL9a3%Q?MR_9BJ#u28'_?l"TV&+;f8s'B7/\>%hBBeG&'l`N]u5ptfJ=q\c75&4+rT1nAd8A5rZbg(R=3E>Yl2F]("1
%<ZE[u=aTTceW^kiU+GUCMg;8\-P'P5Ne]uW\XrqsXXFCR0'fQrpZ%3/gqA"7^!9cWQ_tTe^i$L<Q`W7-.'_%Ym,^'.LniJEHi9(q
%e+V4GZU^d]rUmNA<5rP/?XA%Q#LrHC$8c?Q2&ge`0"NUVa*^Gbs2_;ZQH(ob34h3XpP;V;bnf,XXl3/OMqm?fW``c?Q]CIEM3Nf@
%jlDSMgX-!])7CHD@EB6%IQbcE4(G%^npMf,ok7['`KqEEYEeF$@UAPgf?M(cq>5kjV'l<4&H)N5UN^*PQf$ACm2T_P2Je;kr7O/4
%ck*JZIU*E(l$&77VV`#Ts5WI?1S"d\OaPJVo3pNFm_[O?o6H*U)/%,gpP=JSOUq2\NPN25A_;)'S:1'p\OjVI&&<tn>&W;uS,U(n
%mq:'AZUr8G,VEOt_[NjiQ`Q@ZZK![AM!c7.H`^?7VGGpHc:H[@;?3VOEP69_J<fccrTi?9rEb_/J@7Ot]_lu5QHAPX_HM*+YINnh
%8r12mca;\B>SVF2L,B/u3Vo?(''WS\$aL\-NfiU0Hk]^i!h^`f6n0W'VY27frZ02F(;iS+4Va,2'CDO;mUQ!f1A6s6G7`1YNW2Wi
%#R[<Hs3eUH7A"GDBf91M(u5jfeJX!Q/L8h5rUJOsk6]-a"TtP/5e]`Q+(2U"MHl))iR]Du5*;!CHHtCO+`c@)7)9]8BS5KQ"Dnam
%G&R>d+J+0$*SW0=kSBY,DlP$JmnTbRM2,"[1>Z]]lun+-S07*4oiK9/Y)/uOK'oR.g$8Fs[>.,YjhBt5cPEnqI_3E#7EX2_0/a4d
%=:;0\$EF-LKDXMBB=U7kLY]!4`4G@435d5Y)oO%'6"d3"e[T>'ZP3/LN('ODn$?eNUoLNaWc['s>\eQbPVa(ROA5'6Q(S3=cFR&6
%?(+_Tn]M!)@qpU2_MThJrYJY\E2ju$EVZI?i0YW_+rUfR+la1F)2[Ro]4rr(c7%(pZOAVcX&V?"[B!?_?%t<WF+]g=[9He@g+I'm
%=%C'YTF^[Iqtn,joI>M*(UPY[BgAss>h/27-%`_glbH,8?*?):l4XPkb_UEBV3\a#QB)Dn9A&paN;nk$%(l)Zdj)HH<G,[1XaiS#
%>\0"i[Xo]/9/Z?IJF[rVj!ZVqmV*\IZ09nJn4j%)lU&<B.]L%J4Y@IT?GNc:a6oZp/X>sOQ!pDl]G0:N+o0/B%LTL3=p\\S^GcXG
%EKBt\E4K:gSOn3:9^V^gn&4.<^Y"J<ZTqp.&.MoXH!"iZV-=7Pmjl<b]Jf4f,`T:>`GdK5OIA*#djq.8OI%MUn/&DU%Ri-&NqVPc
%<B3dp4/h<por@&!_5q*^7+`6mH)pAQdWm-2#eNWe$YG,?4m!XhGQBoE;ejQ?.dUB&b,bRCL'T)ZGhO^+_Tnng]oOBqR]GdghWGsJ
%TVW=$GfYTJb=FB=(dfFp>u?H)^26S8(J\N^[rY277@kIZ*bH8s_.fiG'RZp%^GM]k70VH".kpZB>%[4>cd#L^;164P[O`_6Z-B*\
%EUHiA*'8c;g19jpPBB2dm_8GeIIntt!?/mGodU3Ck%:Z8ASd&RWT@,sm7ZqgHKBN(]Q#dieI`iOE'DZ8hYV\5S5m/]ka7^;g**01
%$_#2M_"9cc^9l)J`$]]!P0mO_YYM$3qPPS&>kne"SbVDu=eKLWELjT`#s_OQ"s'Hbqh*n&m.R8VWZSVa(sNd!N>(3R5-oH]7%f`]
%fm\$<>?6gN5BS#VnpJo6o^4>RmWVe[0g",b:'2HcT5N1g.Z_6=-i^jOpR\8QY"pWUo\mG32OkXocRD-"B3%Iqji^qUFTJ&I3,P39
%R2a"DCFX3p!,FV#T)+%?n=Dj>r1+@,A/=Eg&K03q(/hs57?)cg4N!c6k,%Q?b<O"ri`C]HbZD$&FR$;&:CJ$O8+M>hMD)].M:C-0
%&o]ZI?I[+F:^A%88VGk!Z2YA?UgW/=KAMY^s1YHka9"?p)ItuVgU;K38^C!m(-rEK;c@3VA#ZJcq0no"L1>SbV4st=eXk7VH^;n/
%F>B!dL>X?f]U'V'M8ies7/%!0,oa"M*<8u:X?Rh0j-BUn>3W[B[/YflNoF_.jH.IuRQ:UO""6&hnKXb6:OhEk>n@n,/(RHpjZcYb
%D8;R3*_AY?mtt?JI^>X3Pao]M?Xlct?XLV_eue[EB[F'Y2+p;/h$tCb+;rNEW0pkjru*!$J%i;YXQQ9S4;)Hgne,:W:fuc4FK)g7
%%EC[G)D#g*Ur?#9-1BO?pq.t;FJL+sPNio-OEPZlU,[HN_c/$g>ql\Sq8J`V#ab6]qhaJ]NrnTi]nO67JAf3-r-MY8ALk,R5'Emk
%HWs!2KEp^34n;dZL_4A`kfFtFD>!2$Hg%Z6!Z4Y.!be.k=W,aQZs5m-3!g>`lM/4m#:gN<L53&o$l@:SN"D(effnqN^b8"(\hKW9
%pUR2ZoPqo08&@.L;*%%;.J"-DO=OVlMiqC@;Z'puM*lE#JO;R5#CaY:7J@`JhR1eM,rm!LP6Ds)LkYoOcPN>PChZP\X)lGjo@d3u
%^#(oL[%.N6,,""=3613j'YER#DIX3V:\\]*WCqr)CGpp8GrO,qp3,ZP[2N9F^:(TYQ"/HC(D_KOm.f$k>ll*QQ_@.i>nS<:D7r\'
%H@XYB^Rr@hDc+"kD5ONuQnHAQ:&.nKlT7r,`["a1\B=l@D42@M5'd'8JTIqoA+qBCB]f&37DBA<>,t%:C%8qVd=u[T73kAD\?_4G
%8'cE`@T@n-K5^Ka@LEr<\OP1+PM1V<pgjpqBAmR8V!_CZa]`!=.Qq$+.\&j:qE-S\6LoY;^LV)L;ldq`Q2"_#dbh55j,1"!8j_o^
%DXs<h@G')ZfK6Y@,B=IR^C`7ueD&2CgAONCPUBh?&/Am'pm+2=Og4Y+dZJ_1I;&RZ^pjEfc%o0cLJDm?M@_>b-/G@'Dp[$H>h"t=
%c3b_&Qg$HP:e6r.NPaD0Kc!&8Wmpdp?#WTf>-Y<]*H(7D86%N0LkUjm>XR,&pVM%_%ZMIC0jbn-O3s,Cl=-mU?QT'u467\C1mQ2m
%!RgBb98VbL8DfK(E3qXEG1f-si`k<9b;6q\hn.Mo$kFNN=O>gin7]-7XiAXJf'h4il-+/SSM&[Q7d(?Zn*@=:P^AMqHPLG&;`\Wn
%+u6D2i&4R8/h6j1h03V+B/<`PKrSit58G!3%WtcM?DmnjS21b7kYgO(Q"^4E2q=c/eK%3loRbiPCM3FIPg8c8@garfpc.m'_A":L
%Cf7q1)Lj-(_"F`u"`oCQHl7(gZ-tf^X]\PX7Qnup'ROI9>9J$/b2"kUV((e40Ju#"4JD=?,l1"6RbkAp)(XM=IDVJA&\n4%nMIe_
%[Hp&YSAs9DB4jYlmhTGRc)\4Q6I*t[g"(G4Dp/"&NqjSj8X-W@4e/sG@Vg6S`Zh.]'Ok-26fk%$Ddk52)(&bD-U0I;b\QYt6W#Ms
%g(jT]W]Q)4c"-#^g_nRIbbl/G:*"B9"\clZW_H$(jfsigE48S4FqoED`ZgeD'@3f1KZdJsMjX+HY'BXP"&XU:o?Oa&JQa=IO2W!6
%a4RQr(_s!_l6GX6G:bhh@N5rYdSLd]081'LlaNl4b]"4sc'+&7psK>jl&"iB6,.7o$O?J_maqGo[?IAP"HJVidMb+XLd!&"QGs\&
%#j+J:omrQoe^*""bmO,rRda*1g9s!>GQ>!@'i`)Cg(g5@G.APL%9r7Z4aKA?o(gStq0G5ul8r5,ms-J2U=:G#`;<RYF0"=C-'(-)
%W8CVB^1*Tnau\%HkApgD5qCEoMc-H@8FROQFl;(rNXAM0*P`:8+1$m)4U8mT5e-.&T2D%'>K7pp005eE[-[JulLG<"QM'M%NEV=]
%IVkJ:!M\UO?fh!J5jrG:m_8P"VQ):Yd\J:B(S\).jL`3R\,rb<Eg9h&QkNndjd.kk"F[a3a9J/'&@#b6Os`D>f#0ZOjTG)+fp2!W
%BhS3T?44L"oo/QIft4TF*h[oeeuUn#mmQeGMpBXO+qM6W;IYWt*\nX)Y(poTfkIIX9k'_foR_73NVd-Y=ek_T0ptriSrEWnElr.V
%Bu*d%R=N%n?Gp<E!l9BK)+oSRRujMFgWo:H_R'(!C8F1hR>GCpc6kk>pH)"[@PA10=A*^!VH\TigLMlXXH"pm-(b#,oV1g*h;bjU
%k+eZX*WHYD'uC_grgJ<"rpE`9F"MICS`*ZX/85ZESb`ug(+?J9i`1o':JU-4B&^NYi5e+[Fm4a"m1]Jo2[6BRjYm3\VlY4OCh=B7
%EGj)L,d'W["V#/pZ-(skc`>oJPnsa_\95JRg2ege4W9HR'J!f?;i8^FKfHNC>*CQ-bOQR/N#RG2kLGb[@.9cq&!bAIJj3URG.RGe
%qp89/U5.tT51_?gJ3#.]K^[Z!m\8n;MR+rC,b,,'T$7G%]+Hm>M1L@<M)!6WfSk-',rRWRft#t$$`LboG1F"<MLQ?`>Z5A[@f<sj
%#cC1CfTsb.UeU<f*mO3q=/d%K6lPX4408oZ@@s'cD`?X\KPoOlp9[9%a9*.cAl;*,GEfb&$?iK@n?>%>`&d9W0qZYcdjpp+K=^f$
%$]kY#at:m+'O4]cPX'347(dmhZEm]6?=R=F)?UanaqUl4_3T0!rqmI(IpfAFE:lVJE:B\PW=S*A;Y8X,0(i8a<KIS492$_S4',`J
%)^$>SG9IW;FgX%`>ZH58Kb*s+'L!sVd]ZOPKs0hm(]OZr&iIQV^jU)t+pMLs^Q_^1Y1G2jMUC9^$rpF'8Bufi:smTi5"0(i8&bGt
%<S:IL7MjGH!1jIN5O*VW&`$mlTOcYLL]Rs/VXg@Z%t1$!<?17>>-NDV?&E2u4<9]Q.i"]>!i"Q[1.A9c0!VKeO-1#TWPahL!r_4G
%j^(\aC7PhPS5`4m&GFY?3@"(h9J<"3_6\,5&^So.?XI!P*A*&"QQ(dO5Dl/F/065\&qS_Th:78_6qG$"@errlN6Y%qHsEQbK;]U`
%#CrdLNH@ujN@AG>,m#P%)'(Zgjj!Vc#>Y[QI$C-P--m-PStR_Cd:l4A5gAc=?RkpY*dtttPn&-WTFUH!&e(6rEWb)(9G:Q+5VAhc
%d)!0Cg&nOmoK(gN@QZs'4,0_Dq#&P4E:'CW!aN2Pi-ur`a$%ou7'%i\0PV=ZigWB6cgl!_pl;gN;cQ1c8Slu3>B\G`MGd?9$N@t+
%FG%nj^qiG5Tq4$@F7>EPkOB:&P]l'=fbE]'VN&/5N++GcSP!l&Y41jK,%OOMA(9lPhUR[.j;VR4!?#fqa>ibZ06+6t:R>CYS[ep4
%k=S7i0m5+gFC^aGh9V$Fh/n=Pb)m\\,RFF7+@K^jGMm$>6YECM\5J`%;B>b3D!SIg5cm>D?Io10DiPc*Pm><qe)En'pg<LY<=3?/
%UY5ppplc]Q^ZatJ-j*G0A5,q$rI*0bR=b]cCU)*.:a&8<=HrsWJLG=H8([Lq'DP7I['RjfRgsS%V#*HHn'6W9_U;4>3\Z4;Cb>3>
%if*_1cVSX])0V[X'&Z:F?Ao:\[JBY@Z6a<HN6><n%fL04'P2-4@sjp7a95q`'K6JmLo^d!#!FW\BS_#)&D$'HYYK?cAZ1)affCT!
%>7gq0jF4S=5656N4jnr0]L8boLN?-X^l<8>2C4ZW5GW`8'_GCO-Ob/*[(s'[JHdWYi)g#0^(Io5=8Ba5Ph4\Zq5!F/H@X8_#:_p%
%I.W7=KB6D\93gGFa`QQEP]?>n`>EM_TP^`L2p:Fum*eD&[OsD*9GlQD.pq$OT-fHnX8eO4JAFE)fIl:Pi7R^MAVuDQW'JpPT)8E&
%;bYET]Xf"8c+j;VF8l(2HL&O\hb2FqaGkPK4,"8agNZmP,aO7\],jI3eYSKCgKI%FQ+q`3b4DlLc]\/B:uCK$H)DX;mLY(.<TL;'
%*uEm+Wjkdt.[K62!KOi;Te1*h<F,K9e")TapPJ4+'*Dhh;ao,<.H@b2/UD.p!h%LN:)u<..fs\]'&]uC2fcsD<?2B\h9,'Q]QATG
%;kkpV_-7.ZY,1GVF2"E&HNNQC7eE+"Ji.nrXHWC9c3)E:K'97]K,-hIPu;J44s/9e:X\L^Sd,<QFtR^`5NYY9LCO;92>rH:&>Pi[
%M@A:ub&.AlQNPQ)TAp]"*CnC@7ilOfTn!Rb_I41j])Vee@,Xrr^+;mM2K"fHj(q=E-;"QW%XF)Vf\BW^,"Pj-pCZi6T9X>YHL<8]
%Gn9*cZ'k2Sip)N[l!,Z.;YM79Q@>4F.p1k8T'0+-UWX<g1&5L29"42h@FPJeD3\qMK-ObK+j-U&s2gqrYGi.@"R+LQW),O!+Ei`$
%/>+JTS#"p@RI;U.5%4Id`N>.2=5\&UI!"eTh"G+X2Ipa<9AJ"W8V:+klLZDr^%UYmks78U4@ME=1qCBB^6%t!g3!)RT[G9.Op.9D
%D/Eqr\,]B^nr?LlC%>r<cqB(.W*?/p`?mUT_3N\i3(X4tV0VMEcdH?hEDmYfBDmREB#fE]4WeFm3#psjfrl2*9]-HmkMX$eJrVU/
%2U=KI3tHgDoJIN+Z)@.PW&b!n@BXBXkKtiG3'`nuZd4!Ncm`0&H>8j12pu;-VO1_q)#a^f:Nb_nO6\Xek`k(a$I4l/%<>+Z<Y/Y`
%DUY^1g@IQp&DSCuCUJ6DD)=)!G$]3gKT>n>N;7>5i&/0##k_7SE*l17fjd,QNRR1fOLbcd)b/I0K+RJ"2$Sh\4ZSfX)]$b1gp:b^
%KVJ&dFniTVjBu67)8K4OH)*QGh9h5nL;uo5qb10=[Dio'^V%t?UBR8$EsK*pH\U+Sl5/fb9gHY\/SYgIoAeR-RVEqp(nmq@87,c=
%KW$9iT$\<<&jeT0iH]u)ZiGH/H)5SHd]qY[ZQ,mtN\:6g)P,=C\uqtXZusfo5$O"`0JMnAkZS6`$arF!B<Bsmph:.R4LNpm[:uV!
%1_B>;D'_hUT"TE,a;)&NYC"kaN)sJ3R7?=&p>];BKT2G&\(p;G4*>FV?KHZe!<l:95EL]_bPLV$r6n(8/Q[a89&7gVC=/K<WWPZ#
%DXWp7IEj3-X+Y?YW2L&hD8l(!M7,qseD;8n&YaONR[5a4eCb;!>UB8Soj=8D=4S_;1b^gLoRhn4R*+DeQrdhiZ9n6)=);L9k(DAV
%"P+Ej9DB.f7[4+hPTAu)K/pNu4NO>er9S.N([f_9LY@oR^7XTc\=jNe6ieeY<;bl.Z&%7(.IT!q@3%Si'[99!3'mtY>]$F;Se8qr
%3tP+<gY#4R.@K91LZ\@@\q`W&('st0[M->?&N%/0$98*b9@+b6ELkWeCLS(<<fGI=R";Qc9`'u>.Zk\kVl)d+']PI+(-"[>DfZYf
%f/TI,r7'L(i<r?`8e[Q=LJ<R"2q*8OSk0XFKb&1e7TliuSbG)#%V5b8dhZb,)p#,<)LSmk;_O_dM)\XPCLnSC8JKZjEu*G"AB#+%
%7I\Q:)3GDD7ID`g3XT:\bu07>VOBuqe"R:6lnItdSH(4!XYf1+V3^^':c^\@b1[NtnK7<CQOP`F0V>l9riTid+h&)A>/&B:h2:gh
%TP>EcR2qZ]XPMc?WQ_[#V&h^RF=%5Oe=O/L7Jg"L;;!YL+&)-$ef49%oan+;0."G#1Q._;d]7u!RPV>TUaO8u626s3*Q^JZ;:Pm/
%e.?DibP>G*'1[2DP\4H@R9J7RA)u>)49-JjQNUcrg+W3f>esqnYu=1j@k@24rNc![i;h8a\=`Z;_h-L?dIb6mH;Zk9IkA<]f25KF
%K*&W7`-(h$OrJsREP,=<'F?WrK'kRc>8!H5oro_gN2KA:;<E\a3f:7[Uf4,s":O0TWoUg0ph^aB_mpfrJDFDE@dM<C6lJ:)+DT;_
%&F&GQnF-bSj*MrP;T!!dn[`13[PRSJmgcJ#CkoIkEUmZ*[pu<NC0a?Wj'@<E_8<!@c`$;\lV>AD5gh4+d"Ko]Z$$9i&MB&XqY4^9
%4]EZ83u&asX6kHr.e=LSBYQf:P<9g)kpkSXX^1@-U9O-a<Cs9G7'nq]i1[:reb'ub^'of6l9#1a[X0Hmd*&em@`(&4ZX6iElT1B\
%Ds`nXZQN_MhgHQ]??qk9V42R^`mH2$*([+L7g^06hVJBao9j?e1n6fG6+Z(bZmp#$)!`uEQA^59E#'1!Y#g];TM)*6aQZ4&5A7Tb
%2^XemJRJS,BYPgn3H968@K\al3NN5j-DKiebh<og5L%nfX^Fa^j3!CO"5uu>d/0GS9&5Un+Ta]$l*!^-6::P>D\Y"UYa&dqUgAPe
%M*hB2D[BD\I_n[&981>DEAKTqo/5;X,IC1M<p5u'&hP?7^"lm97mq/3VsIe2T5=74*Hj?5rcZK<S8*6J?Q6TtFJfIqNV$&*g=e.r
%/_P`o(:2h3[$.O:rdVkNMRJdNBmicsfqX0(D5S_8.sVPIBMVl7=tTCW^b<?#^M^%Ur]O/f4F0?LlF_R(?bj.VFK+<XF_m8E_5c+%
%..#]fnDs>;!Jpe<3mhpO(bR\+<JA2-r;MBr;J`Lpk"m0t)Hl4>82kqeR32[mg$,7B^`VcUS<rVs[j9*=W.#%l@Uq4bGmsCo4><dA
%UpR6Xl^\GZ,L.I`!+otEQB]+DoN+,nbRskcOU@-9BC8Oam.s^,`1p9b:*JFB%KbQ-m7h68IM!.)Q!qleN>"G%<l!q[Xp@QI.fDMg
%-7><F#-B$[_i(5,X<#VfU(BK=*hYh`(:=D9ka70"4LW2p@WeAZ4/TXMQaG3C8cX[.=A6I;H;#KR.]=%u&/Km\iR)e@)ZDQWO(KU:
%Ac+B/MnG?"7Z('T*YMtP4e@PHi30:`!l7#f?\1qo`^?_uJg\iLVB>OqhsMpkSimS71J>&$YW[^^e'Cp>%EN!Q\D%CaKWn'OKrC]K
%kW+61UY)cJ62"YD>H[D.ZZlF%o[9rPs2YHrk`iJ"CfrSHL256\"K?n,8odCuS;%=5g&tbjVi``;hpE[7AFf@SqK/H&4dMls2*o`s
%Kf1c'i7!Qj-tuU04OkhQSJV/bl(h.I&o+S>pn[1pbU%uHiYdd6D=sjro*4@F'sU1E2S+V)n9k>m[@&5;7g;"C,lP;;G,T-'J!E1O
%/3o@U#(!Xc"H<PENX4gL=(d7G'XDQ"(%7J%3J/+p/%=2;[.O!9%fEI)=s<0FKpmR=Jp/mi`*6;*(@\\*!iI'6jf2W0Li7Vm;Va@9
%,3I[&Udmi.M`V3M`[nkfYOiUg&FrY*=<lU%_NE.H*@dqDDihDH5LtTrF/>R]Zum1:VGg(R[V/'3i"agjkeTW3m?L4]/f-u>^NWKl
%KL`(t5#JCK9Y/Qg*\-a1i\E'^D`2QdQVhc^2CJQFh"uP7eS+6mnF8%hgepC%5GK83k=:jTWWBK5gpP?Uq'I)-?KXQ_)g@i>hR\e%
%(;<A>2c=jE5uAt6^^&&E<#'7&KhjdT%H)>]hOt<M*!&^Xj2$VO^OCkg4Mf?(5^]"l[&df1F)6Colp."dEtc/pB9->EX#<I"3C2!n
%5/iY(aoroDGSa7;C=RQ:pO7!5AW^SQYo5Os_S\:-@e,ih/J`o(U-NSkGZTP6T,C.9)&e[Q&chDlBrR`+=qBlG4/hb(\4;-oi\/`8
%*n)2b6E0efBhln\I[ubDVMC'.4mdF2#D'fI/M&7(R<^QVI;uht,<LnXL\HSR^9jkD8m$/*)!)O+!A/p#Jo192FdKXKIFC\K/oIdo
%aQK`k?-2KnUqkHEpAK`/%*%?TYVBDc#o4&FC7WKqV/<'ua0*q>D<%#9pUGK^f.H53"N1un>C+Qp@I/^hbqb',MaB'A/75h=.G$:n
%T.<.:HaVG_;\FVbh:OrcCO&j-8"Cjk0d9kU@9Q?Ad]CAS&@H1p50L=<O/9D?n!"c)_S_8(!HqLCDqM98TMeK-_AO5k$UbBAhufj[
%.7'OnlFQ8.A5'@,6jrCk_uE<h"?h@NJ-H?[kPbRge3FY_3p<K7QFXVN,!S/8c^q`40_<N3+ON4NA>^Y:mJ)5-l^,b<D0UAhqtD`Y
%!=>Hk=9'f,'"'*(SCj63R#bNW%A,j&Pe2*VU@I3(U*P2(MB@?I0Qg6e"430,-01p%UACsJb#GW(MQO]<g2C0+So@QfnOO5-P\Bo<
%D5GSNM>O@ALaPb,6uqJo+jg=Y6*eqGc"snf`/O)e_M0nDl)Eq(R2"J5l9><,kS8aI<ZZjGl:Yhhh,0PR2n\odda_;o/=#fCSpGLE
%8^N[OUi%M!&hdk-q@3ShH*u4M6G?DXeD!h#I['kl$S,5j4f[9l'jDi]ln@F29rXQI`&gs2*A2:W]MW!qSVYY+4&:t@Q`@r@k+l-o
%RB+3cC1g2/AqZi$&PDQ]1uE3Ro;U7.Y`s1c@Q\l(P-gplNk]$>he"im$t8m+-3uCNb]d\la^SG*"1.`L__1#>Y8.X$/mR4)7kVL;
%XD1ksUM>nQ218dsWmL$R.H%pj+m\f=9k?"i_tAT3PBgu',mJXkl,gXq",]>=.RA*2KBI+?J1aD4D[CVI@52]3&=4I<c)02C4!+bJ
%c,fH-EDYV;o_QA&7+D*jgONZ9RX:>qWNTBPa]8!tdt2@AkNJ<_r;!)o+hNYG<?Z%h^GgBf?18.@g)1JT%==)'Wd#5"*H$H"]];E5
%YWbo)ckLcfM+183((CrtPi<P<BQh63ClYr-*Ct[JFBGN`DS=!;"]f$;m4MS:7Z0E1W^o"O;URdPVPu_Y>@b&kR?;-YnjfhK;@uT0
%Ut!jM_!6&Uhm$O79GLjK=/\WXV->JQ'*1[2s-40d)s$3qcqg:!jpA255O08/GR)$0&qR#rb!9%G3!nDX76U?@j[qt&nW)FB.Q-E[
%W(5i7Vr.d%5Y3\>UM"2a_'KC#G7%_gGIU[ImHONL/"isagEiSG0Y1&f<9!^Ko0i*[&Yq`85-#[W+3G0&bIZ0U-':!U=+'s9M%rRE
%<XF]/ioj0]a#/nm0?<</VMICmh?IZ`-nOYX7_>,/JX5..KF9bhG*rdsq$Nbh=bAqIXlg%9-rML;/rNU,gQoL,J2TPZqC$$F`D\/-
%:NUaY@hZrN@mk$!>%J-Tn6*mI$%2/#s+sJAdIE^<S@%JiedtN"*C#O6$#cd1YaL`S1oHD&)KIGGs7MHrU>H$GK[PIgqF$d!7-cV6
%=bLk2`G:DMIu9@2ig]Yl/`Mrl+pf$u0qaI/id@Js/YMnHZLX2MVSICa'u<((`HGc[5M3^bm(Vo[DOH<?SlBONb-@Jnr[7j]cptd&
%9#ijmSM]oihkU>7#b]J<bL5lQ#MF3akGE.c!nU:GAX,RR>ukX*'Z`?9<0.=Rg96"&QIdEuYV2K>!WYj,?m-]iV+,3ed)4\l)MYu7
%%^+<&^M`H*=r>`3h+GT]]<i9D?E27?^GR2185Rs*TkaH3#A@NVN[;OT=C'P>q,2HDN^_Q*lZ8u`$>2'Y(KE+7<I*V`\Ff^\Of/B9
%.\<LWJUiO=VDc82&V1;W)s&"bSbgMlN4!i)PH>n@DCFm$!O3t.JZ`t5nl/"\C"bgCNsdGV1*5*nEG($.Y(bSrN-X(WJm8+f\bVY4
%6I\<@%NT8,&4@kOI@?!jdM91YT)1kH'hdrQMMlNN!`3uE`UA<K9_\`2l]H+F:Y9eiV9"h9P>Mp)KF@1)N51H`'+Q*[*45-e7ohmH
%;E5@hje9UT1Ond`L-onpcOGW#5G%!:.A[4+<`UpXXHo;[M3$Q9@b!W/0,q3^L&h:N>H/KFNU%;5]rOQ#pTaJ=meXT+*?)u1B]q>U
%*Kn=aOLTRkguU+V^!tj_9jtf5$<p9+)Wi)Vred%EO";s_pEC4oH6,opN\,$0rGil\b#^44Fmi?8_+R?5?>bI-Q[[t/-1V5FlEfEN
%f^7ob&imFQeD/&i7@RYaPA+^1YRd58k!`m".u$,9Y"pD1E5RT@^X\0XlFA<VFF=N:g-j-#'U288hC-A1%Z:'r0$7k66m@RIeXf"A
%7/%EP[L*9='lWC8[)]2<TI;jD_c#q:6H"g.%l!^X'IsT]PddHQ-G2soqCQr&fN<*j!`XPV`iK/8R<F*-2X95i*D8\MoVhN*PLgM)
%,$00i/?$#/MMc<q%1+e52aA-WWGFq-'bBJ7CCEM%V_4S@dj'eFr856FV:ClB4kK!-oH.+(?lM^KAB)#k(WTnpfF8dldk[E`7Q.b%
%,9;g7^\;uEpWH^nHVLPB'l/ga1*\"g^<:k[6`ADY*JLfcE_L)3?.(K?Bg5$3.`I;EK-3;83/kZ=*4mG>Bl,SJ/OX@Ha:T?\=Xe1Q
%DhE_OC.3!;`A1O-0j/#b$'3>(htLp36dMV;ecX6D7Ab"!XD&nd&QFM1H+d+;WDODLU85@>n7:rX1F;VcDYgCu(YJc2q;JrU,%?:4
%Z&of0&BHuEa^+B6PUb0BeJe!";`26<TqFMfq_Fm;X,ab=oot!&9&3cN@ZZO$Pts4O\mO\G_f'?'I,#^4B.N,gcMciSq8g*\)34#"
%ni+nDl;+VY=HKs_Flu9G*KLniDZsDA;ZS"J`nJhbMn5&I_%GilnXdh"'uj4:%cTn"fmU!#'_^7+bs0ZnHW913-C'p(*YB<'n!@AC
%c4)ec'4[E3XcNglWsFr[IB?Jh"@'8`I(_sT9W'.s52;*?L<fCR#f1!*3?id\/rjMK1m`Ls*9O6o)AW!n]XHo/gdFu.SC`h.X/bS8
%Q!DETI59D)B%KZe;m"R5<NqsmdDG$V4%@tVBOImWfh1u+#,@T,32OopBhie8*]p).qUSPg^C3KeP#M$DO%gI.Z!!f4,X^7iQ*2Ig
%LiFaJJL':!q"6M8,=*.*Ue?N$Jj^Y]\>XALgp9e)2a_AnB/Ta`8-.)kb[h%uP,ip)?J!59pLUR?m<+m`e`=oK@E(,kfO4KV!%@fc
%7snUiBV/4.@<R/obM',WWRB4ipdmp6IG`<&iebG`S$,N`L^B?a96;%]7u"NqiCk65s'6&me+`/k_PT,Iq^eQ]p1hbj[@RjAL&7aj
%P6MK^Sb.26jbn:+N>0DD(Mbs`\;OlZ_uTCKF_)17YoSMZp?loOd9E#,C*Ek?.NU'/k#eek(JA4^+?1@I#W1,>bipUs5)oq*Rq[DD
%g/[gk#i5EEQ9Fi+=.TreH`8m*QgtT1pF>MVP?$Id7!Tqa'6FKG2s2S)r0@;6"]94k>pqQ)OfJDVq+!_2Ndm_NHqX[SWr)9KcRMa"
%EX(+)D$7<*-@iJj<gRn$od(t^C(B9MDjq6a(%(o7a7*I4:dScLaPUOsINpQ<X3re%R]PbG)'>.$X5J&8)h?Z(?\qQT(V6I@hC5HA
%?^!"Co%E.O3RVtL*!Tg\mEg>rk0'*+":4(qcW*BS8+gHm#YeGu@#kZY[m,)WesfCp%]8\(@JmHul>p=<PecK[;T;a`h=9D`e9;bo
%=1(:AX,Z*fII8a8jcB,sL]W0Fr-;m0@mGU:B_Nu0Uf>Z<PK6%3<K9b;kmfRF)ls<.l;4JoJ$R0/<F0mQ,?[MgC/=$Y=R9[tYH_[R
%DcuYMR8Hu3c"WHJJV?kB-4GTSb(:,ZSOuau0hnnuGC7O`./m(N9>[XiV3M5;4C;j'G=[2G"d^@c\4PC7!j?k>i+;b1ONN(/[J0-q
%0;`*V<Yn@0(P$rM\%[O0I`lKaha[eQs24@Roq0;!e9f[0W;cZLfdpMJ[I!:SW.N-;FY3qs?R_S<P!.?CTu.Yr.qIL'oba.:W6pIK
%q>(LeId0q88RB5+[]`u"Nh6+VW==r.BpPQs_s5(7M-D'^po16oBRG9@chH?EKCXSok;&cr9t;bE2Or``jE:ig5856.HbY[3&OJqq
%2,6Eqlup2p4=.S3piOh@hHq%s&^0ImLS.&9$+MQ/NGQO#2/Ei@AL.I1\QZ.>P4_o^c-f4m+/r@eO4MAI;(A++&YVEe^`Zsu(<nIX
%=B_d;`<Yda`p;h8.Y5:EY3BJFd4:#N%7W1;P_]A%-AV(>Z2`=)?*_gF?fUerRaeu^OeY7D,+IFR/M-?CoDT'*TiRWR_ag[W]:Y-_
%8t-5,&J$=0-R4%>A=`R^1>A#p3*)#?9aF#78M7k,]98gm4[uGhb#ad^FNcnb-*#"6=PZ41<kl2'l,_\dWd9n73PCS?WN.AFJqE)V
%KXg(eYa:_Xe##p_oss,)A$3Kgh6FR]bM7dL=BUm[kK&'\=W3pN6t&GX%/TAi/(4<2TCb#;=6+XiH?*KgBZu+_"a2]YoDmD.O`9iW
%p\18&?TpF&8=]HgpTi^6['1fM#Ll$1[X&HDUD,##>l8d$5dT=_.Bc/m:c82XU`j-Q885Ju=AIsU;M88..Kim2fq&=<Ulh:W0EdT!
%g'CLH9L^0cFT<Y3TbK.eLlmI0(ASAs73I/Q+s!Y1q0IK1FMuO#^Inif*"'$;"?el)'hq>75;D@gN+\$2#!A6H*L3fG4S3"*kc\Rh
%aK&f_KFj\4VS?3pDS]PC_G"6*(F6EPPZ1m*8icOMYlB0d`>[iT%:ds0'0?lcXakHDO?q8d2<A<K4G*)[&O\f2!?ln,1[;C7S-G:d
%+)[:I9BWi(]3kRR!eGM/Rp%BLENa%>dNk\6T@FAFX#p@S23J-IAh^nXl/jTG=e[n#gqZT36`#9unZlX]nKZI+*o6.n?b2H-iq$E$
%W[lLq^nreM8n%>A[V)\$=#FR-\Kme2=6Za=)#$'+m"b<r"]!Xq9=:M4B2&45><ng;hj5tJ()k9W4?s%#X?%[?]#XuaX#bJ%b2"rN
%gGJtj9Q;#TI.b+q0p0/j%?X1O'-0RAb/0hb;mi7)-[Zt`QG)6%-"c8d[6)[RZSYE[G2$*fRtp]A4jGIh,si/Jr-OE0\oBO]1aSj^
%f@*P$g(q0VbNgY[OGZTN?"jm$;e;N-$C2TfIYR2%\<0gV-7c%PcQ@FR,[S*JI>^O<2,*u='n`W\0)](Mi:0b\AQ-2IG(+prcRsfL
%O-(7skhMG17JAHYe]E1]<`Z2_Ydg+>Z_:O;;:oPOf4r%YXYps/bI8goJ%44/fV$o+X?sa]3D2mh>s>on0E(4MS$BqRa*Y&6rOmr\
%(i6);]?aS\E74CU54@-$]1TY^R<*<sDB[%?*(QTo)Qt`B$FJLBLs.)IMfbb!3>G^2=(@R]NQC(L]#`#IC$XqaX2EkQlWi"4Vt*dj
%!1RjT9ri<QfM#<-kBjC8\J6Eri!%a+.M$S5]&u7W=mI,&/_n*o<S*G5XN-CAl@cGGfd'R$0TY-C:5DT+iUn7_QG^H4nb:tW)W[o5
%oeXc>Ln+*tS\SNq6_!jBJ8UMG7Wq/LVMre!]`-JkrXHR%,HW'FO8\_*mmZV1@QrA2=r*49L"D!6D_-h!%dTg\'T^A1?CB_oPoh)%
%pO6+$B?)P1V"?2mXspo3>gP9\4l.t@L&Vd]<=;r)Oa9i*rQ)[j9Z+M7Yh#Z&<qG`S4]01P**8far)kQRno1<Q;$+G7(GVIsQM[fO
%doE\S)Gg]QN._"'1KC]H`n%J2G$p2VG>KT!#Bcm[31j%8MBk"T7EgZlrn49L/DkA.GrV"%EQ#EjYR0C2VZb\`Nj7'/@]._s+r=m5
%7AZi,L0^P4%F3)T(IH(=V<O*9XNYW'ApF?2D++lCCi:a+(mVHCY%Htmj^odH4AZr6`JQ3_3$mA4"RJk>g/$3Q`?s(L-K?VqK.SB2
%H?Ir%_Gl"J\aRg&eGcPeWrjWkG2>hnO0e;8jKhlBj5cRIgQ8!/4F7cELG/ONGQ(GBe<jX#oX+q#khl%[*ImbJmr_JX:-P[$DL_V9
%=)cGSLI:kjX[4;:E352B0#iXZ%aO=>\;"2PVYH"pnbCOY9IrC[Lu(-s0(n6a:P#5&djL<<3MTetnn>`'RZjdt)ZP3L?T0jbH`QI(
%39JgeIBo*"iUfd!mTe84rpGt(>E?,geSM&bLrA:J%0Q=SCis&X\Q0_)BT'I^?)hOCc+]og0c\aj_q,uC_i49laGQ4:WLt,H8ma0J
%!54bBSWObZHfNXJ^o.sM`r``;Fg<mA.l9HgKGG3*g'uSiLb,ZMDbJbJceCOV`jn8^.S3U/S5E!$%G`:r\'ffnVRh/sBX[K?^j%N)
%rM<V)PS)DdBCm\*<)o##_iM[(ie3emms5t^1)/9aU=Yb"CK+O'A>,1uKWb@H[=?.t4_BF2r!"(^Ri62V`QW_T;&b,,FuqX/.ITb`
%F=\tb9:@LYIpcht.>`R`gG&`<6+]dTmZG*%?iTiO:;L0=o*OKNU&hB.VFmq:`)YTbMD-5u>AkdDJ:J,AjcppmH^XVmga.LnGiIJk
%kI>Bbq*mN_]$c/Ks4'WK];EnSHnVq"ZB%MQa!=+:h#t7?HrlRXZkPA_Eg`nb_US)S/RPsO$F\[hMo@c9LrJE3qPnW"F*p!LkCql%
%it93KI$2E5BH45(!F7Lj%\Y;G6r9pj.Cct(mBP;3K,MERk4R!*'AE!2)L9A9!C-DT:l<-0aI?76q"3&-C=6UC"+J[_Bs37CL#n^u
%;[C!Na-?+\O5$^?)-.<n\Gog/rq)0A<=hE8B;=-a^b<;8a^X(]"^S*X4`+V%GI/HSB=@9Rf"?1,COb+E<t:Q;H!.AW;*e630GTlG
%F[=C69+SgC,WEs:F-Y=oN1N0&8hGIc_NEHr<9]ZGo^_,.16^LgFn'j"MQQMEcW>#k40F%GF=HjJ=qrG0b0Q5d@9p-TKp+>.BQ=is
%Qu`1,)ab$O(d@1ecR771s"_a)!76qCq<@nDH-g=bcWK=Y/$F^(E%]GM?a&[a";T&iF-'[i7dI%kHCrem/O%?!i%\hRg[;JV%MP(4
%O^RBu^GNG5YbBG^f'Y/9)^na"PmcRgb,^OBjSQ6Y`GEZmH&jC[28@h?hX0VQ*>,^22".GTL')!ZfVQXH9Dn/oRu%uJ62CDcg_*\b
%>R')s">0l$7%D'FPE#;!?[i^ofG)`+:r0H;@(\g%F=pD:&cI<ZOT])GiJs`eHt,=HaB#=*Pi6;oZR*+Dr(=^0%ch4!-0N`@%sL)&
%8fbUB<b+dO>09?ag;@M$pu]H.$@>jbV@<!kA]q#mVIjm:X'=PR5Um2u&GWc5)RF8[lD9M6ID\ZN'JS4sdTnceMHn;2?u4,!.mO"/
%HX4+$;EKAF@3UQgM2k3j_!R?*@FqfFqec%lD$,WbEXm80Kao16#@Vdh'WliCc7]2C]E@H5QH"OKh.QO`/%6Am$A'l>&a3)lKJ\4N
%WVtW55&LmGqOAl.eP$T5;4sV_)(Y4MVs+:SlD(4>@[0G304X`,/kk(NUg8W\I5FYQ'jViYi+lmp*^#2qUD9c^L6Y>iJ&HJ%DFr7&
%Q8R(4L%q-O:O*A%q7'eY_DU@ak2T6GZ74ND_9^Ll^1fpNmL=Y"Vq-K>>Q5m$.-0=^L<]nF#7l4Vo1!sX)</)rcfL0c>*[U!>#jRC
%d])t6S*^!I_@,9'Sp5P]r%?sJa?&$P2`"'mp58:N$Mo_*'&QLgs!bAcKr)j"\N08*XmdkM4dR@O!2Rf1UT]b#cRBpJQ6GTR7t4?*
%7%%sqkkdbsLluP\>D['"VB&Z)CuGr.&SoOFl9;Rk\!=7-O2mSkf<NqcA^V&NMFtT#'6XIJD7]jV88J3PcuQqG?R_RrHGKN*:)#q<
%'8^4kB?P9b_na-r,s3(`VjLXF>E:oDSl0U1J;ii6,tRlBVfTt$Mf1_%#kSfbWf7-:]N*TG\YuZrTh4U(lIOE_OfJ5f60P*,%5^71
%n#k77%.K'o)mF8tHrFVV#GJcTY'&@<s/^1%!05C/L-q0dqZcj7S+UA0]I2(l0b!tb.c3,t`1W>+*^PuF@'>nl]cJ`5R(K(e^$`/g
%d,YfU'NColll'eG\Do"\%Wf$QWZ1e<gbiGk-VZBL?44\;9kgdtTirCb@Ok)WJ$l<7hmc)'e2gZF:2,E,[hjFd*+8h3C`k)[4/Ec^
%Z<eQ2bn8*YU'Bm%f0AV!fbV[:13fT<JX"t^e0Zk1\HusQ3cojC`5=<Ul8PfK\^4#H4Au>\qu!O$(.j[cCB*BiJS.ilF!>R6R@:nI
%nBe9e#ut'2`/'`EbmlpWNb>Y&YbVEA6Y7\@!<nIsoF6R?4/bTMU,q1@OuZKS9-n>+p[)SKmMDD+dTCX6BhZpU/+;3C[u8!M1n[@=
%7CP=i4C@.=6qA#dQ)hf@6k<\WVmd+Y%eSVX1PC]aRY>"W<Gt<.g7>P\g5l^^MIU8YN+mh=Sp^Znr1tS1!;+VN8"VkmO)5t>%^/dL
%P@JaC3]WN8E@=jT$AN'X2+<</m3V8/nA5%!quZdJ<bPb)bYAbLoWe#?<@%5\Y-=@D/IXtp+.3A5d[/?U9+Nr'/Nj-c'+:rfHg$/A
%PCm1;*el$g2>+ulOr38"/uYC49abXMrM9cB&[6jF2tPed8ZsANKe8I0G::C,j\;*b4YFF"hB``K@Fa;%Z)NfpNPI^kP/:9!&i"&$
%.N$t'4b#_#q;qL&4WK6MoR('ZBXH;d0ol%lH(M%8-Cbg(WGTYOEp1`9d.cP/$N9GGDM.9ias51s\sTNjTVS-d&\]a&U+`&&Le:Tt
%e5ZJ,^Q(B?[*l+h[:i\<`q^><"&/WtMp9+0$V>$;Z%4b4@GG-4g<:UWN@G?hgka!ApNFN0,*6>SRL4g=ZYin/2T6G01'J(f6Q32W
%/kiil:U7^=QO[OeRFOd"m_.u5m8b[pRV@6!$,57NK0u-#_%LIJo/8%e;Li'uAe7:iRf[\3`49?&&(&<*r6.CL1+i38kM;+FXJ-9b
%#(h-7[$-;be+XOfp#8YZQYBC?Uhur:q9#6%>IMBVCVFjO1%i`=`eqV$N+_`(N/j<OgpW>t@'&DQU3?$1p$@>TVOSP4;eeWDVc5<t
%Q.mKtc4DtKL!69q^PnGi)L-F2esC[jpf['?GAPgU4MgXO/H\dbikG3jSOqf1`/Frs!KlSR&;-m2kce[lg-;9*f4j(TGH9F)-uYtt
%G8I67Yn9L@Xiu3!HPbj.E\(rl+C%-*/sRKU$mW,uk,G9M(8Ph*)/$(HBqE;r#X)I5KL#<TIQRA;H^&_;:<Z?lOt1t"dfcq1J.ufB
%5A<a8(@V;lYk.QqjM+dCeNGW=[cP3dOgU:WRJhin`)Z13^Jm&r?`G7c5lHoMJ<YZg@mL*9(u$3=;8TpJX!uS,3n;6.)0q,W$>DOJ
%j#Dti4F]%bf"57K/VtebCfCiu@S6tEUuKQ4ReqHd$6Gc'S4!]"8XCKW[n6mSSG6-FVgl`kpf/XH!YT>\/)a4t>NUO^nn%AU,MNd0
%7PA!NiIpEK;IH'%ZM1tBL:9Q2LYBMBPJ3IV<"(YqpT5ES^Sc$'bOPrbVPAK#"fcb=5P"4S<$nOb/M@tl_,]^l."qOC!Bt29V;uYk
%4#MXPU$dF]-7@SYrVS&HMnV+WlrtZgXtm&A,U"a9Dsg\f=9\QAMe<s%R=RhQMec[k5`u=XOO'*`)9(i?&bIG6]5p,2S/rmad_=0'
%(:@6ZLd\b]&s@5#^&ik%?SfXN5(E(T`cW#b.Pt7"o%?MF:G]$).P&$5Sp6^p@8on2>7l9J\#4eeadnB+M'!VI>/i_uJWcb'1@"Fs
%R_TXNh-6@IQcm\)2T2Y-0(P(LJmNL7OXeZ"%mqjQP@[n%Pmk4.qGOo,bW7aUii>[!b`/jY5"J;U7)+nYBsH/&DL/!P1Kpkl>)DN_
%!?hM_#HS4IW!Y(\*FP`B/hh]lr@CJsb:nThq;g`3DrC_`_k6(F[C/huKEM1&X>bron0WnT[C4O57t0R-[>Tq<$/c*-=CN#hHjX#`
%r(!H@n"WudZ/-UO#O=12BJd^1e6,4_kD+XY=>$$]f"j]ZOaVO(:r7iQngm#KDYJE>aZt0Ro+]c5:6hukL.?tU8Dm((oNC[T,eMiC
%f1HK2/0'q*Xt$F7<%:B0*SEQ2/mZAHbttM6o/YTd<Y4<@]0CeQAEEfH$oE>2Sjes0+gPHNM4@r2/j!0,P!fCXRPmXakno5#6C$eU
%?=b).2f3$W-E9BWh<q-G_>#0nbSQtt'FuVC&9aL)ZoX&jOXd%%`=S>(+=?)F8Bb7X>0S=%<Z>3X3t-aYd7?._3%:E^k""aLmBVV#
%/+upqb;4_/AXZ&8h770WX?pRe.Usb%&UU]/5Zc;F`>E#Aj/)UB0MS9adtOoWl#6k5f*,q^c9Ss'3%;Z=LcFo]Nb9JCr(11^O1#oY
%OZ(5(?cXF&9;^b+`:WK7GE#b>DK5P&hUD_]$kUiX(_.Hk4"RO9e;-hr_TMWm4dF/;9!R6$:,IQ8c@XD>B!p^'3^.)U"N#r%Qi]O6
%M#[=h2LDNKH5+]IY1iaKD!t^i8*<TfT5_i<@_DF\gml^p9:3`a.Q+-9QGpkKO@8kSD[#&ec&GEj\O5BWGaHe,>&X="8\?kgU@KS4
%M+M!ar;9e3IS7WkScUN@Ze%f(aitjGfT%/Pjn'Dj#h.KOn,*<L%mt@Q_8XYBh)B?`Kec.T/KC5/8-j2&=L4daF`O&jAr,ok?uh:;
%B,sWK!"+H2!VBiWWZ\Y9,!`D3mpHAGpI<o99>(HNIDDd>ELj.tQ"L9VD8=V,5"+$"%'\),aN7UX8F\`(2(.tu8uU\AQ'j[1PiXjl
%^_h>!iLg$1aYin"[cAQR]a6IkWfLIJG_;\'g='A1:`S[k0?@5k;(&'%IjfZTj%I@Ohi\"R@=n@)1Sb@TYakaUadlgML([aP'Wrel
%>U)K`k!*3o\j1ARA=a*j=e*.[%%PJ)oK[/C(MWa@]GR9TbEC0IOL3>t$%g.pgoDit>8TJ!W$Fo89OAuH-ZoM*cadiK!o]`Hk;,.)
%.#E,Frg0oe3LQ#Cl$%*>4brC-d36+r_0\]e8!C/i>m15&6L`7Uehbj0kXFc$j?C=kSb-VZJX)3N12lDK$^704:3HtejfQ<U-nnj%
%2OYf[qP`2F=/V]IBK;-sPL`@?c,t62-gc[dDlAo\-M>n'+!FqGomXX7HD2hWM!];(;\J.l'(&aJI\A4PChl_Gf.??+18T%oiDO"a
%;+ll)c6i+DC8pGBnX_[;-Sr'>&MFJ06)QoHFl5o/;[RN"9#8KG,kfLU^,H+g4Y?UM$N0@<cGM3td@X6<3pM/07DK#hAqs:!SIle%
%ZZ$hO\sS/Fid%D)K_edYPQ<\dH+2<a=rB*Jr&$6e>=\n$JU-3'W28#o0n@qVD#EOdCOt.W$G@8b_4@J*1t&69W.g!Y5ihFV"nfso
%2%/&\+isD6>RL2(/#!GN`P^KT4SObY@(@IS-JoPS:uAUD$gG\McDkm5FLMVci/stI+tjh8Cj9mk;*.9KOLf5:7EAB8RT^32<iF[_
%%1?a$9.H$(8\XUr^,ThD\L.i'o_?_1EHDRHjW(+/5jb>?T5&W>R0.^Y#9-*=DZQG,0,7,AQ0uK8^G+&MHF\a*<kpZRPZ1N1jqu2L
%WQ<tj8LYXk,KNmhZs2oRH)d4q[S4-X?G+31(J!j>n0560V,E,$=GnZaYuP\`1&\%_De@VG:<aPX7:O$1h!;RF86"e20gDKWfAe=B
%kQ*2S<+`\AaN@sT@V(J0Z$J$)gJKmCXr#?^f[K2G/8u%jjod-9a.]+-YNg1XZp;%`Whei3;1AIk-T,2A"&M]e!S9X#?*?iGK,.@D
%DK\K-3/(jqhfJ0DO7lX2L[[0g`gaXT8#q/nSe`(Y:`&@$=r!U,nkn9ZiQ@?gUck:oihUpE`495g06N-e)%b%/?FCn$+U'8ae]]-'
%Cu.UO<+b==qoN`*7?7ZllfSRK7<RpKSW:`i#HZIBT>["b]i&7b@\Hl('s_CP2+Z9#RmC<9R[s4sO`s7*jY#d/CKR@/@?R(PemE;d
%(oR.`W'4j)E7a+^m?5HX7'H^>]^V-Rlh,A)k7c$Trr-staQBE+AL70DQ;Tu:0@TH[8Pr?Y4p@l,EWC@n_RO1(@Fp._;\7_3$rA]Y
%C9*5a8`.slO:Li;?I[qY"JVc*+=$8AX8k'PX\dW@Bh$uh`<p^i;'"_F]-#t"Ssac<XX7@)9dpjKYC[\p,13njdUm1C/%PBFIVpK;
%--.5-;55Q#&oi^e-5GtMlDCqM?e%M=SXuSQ,.kGr?["uJ:7a&bl2+J;Ru/ppBBSK:.7.s,US*)j403[4DWX"EGkM2qhH!R#LQLP&
%Oh'1t"R50LJn+%n,^a'digD1)@1%;[@G3?SJ^4/DXcON8V6_J9m5I-)rO*'Nl\?D-TIf(-!WGA'SQ@Z>UG[5#hNfk%Q=kOF9>Eid
%b<I7U);8tC/@p^Z0j:Ek:cij&3J1I6-WaV:"HA5!WF"[7VB\3$U.b8AlZJ`O"TqmIU!mnAfbW0#Kg2ST>lLaTK?6SVDTAkpl*gWQ
%M[TLe2Z3CaPnO#8B6hWgO+uVM#O5T;Q+-g'i7*]omb/"Dcn#Gk`693!p-l3f6K63\%LS'cnT-[Q3/,n&d_Csb[uF=Ro#eT#PN,,U
%-!<ZV"-Y0c6V5o?>tGMD*@VmMWI<+FAYsJp#+mL*RpSkuW(:$00\gLKZTQ6=i70DtBa.u(GZUtB`ZN'!ZM'EH3U?,h/isg.U'Ar&
%NT@;(+!\2s+u'N(Q!4$LO1*-?Rb!)/InU9A7_mmMQds5]-2Q'XK]SoMpe[4RXH25TqN=CBW.#%^.GC*i]"dB>O73;Rem$$h_"k..
%i&@NFF0d1S/mels+4B2JPbSb%J%sE%>Ka/kfcn'e42:I1'i,-]!pb_.BrF:$bf5TOB`RR*4)ePGjmfKUgbfgj9"V8`$FCa]6*3(M
%BP8j*De]RLVLRf6g`Tb/m??+q?B22HWY-H9OW9g+9fnV9W]!7pWknG5,\8G:O/D`Pq%*u%B<drns0aiE:7#Y1I[#2o<l7.bQ0l24
%(64?#]h;gKO.fa)*[7DP>=NU]eZe^q5C-l81>9+K-0rj>-s7<RZ?cl8ML_KnLRju<4#=0."e23LTGBG.;uGJRm$$L>n)4%-1[J)C
%k*,CCRn+c+-.6#HO_uIL,c,2E]n*)/'P_Z1mamX^$g^Esd^lSHgC3HL:6iAo2,07hL=XGJn5s(l"^PW<4A3jd_tP./])B-gT`iAo
%6>OgrbB$0a>Na53=#q^Onup-:LP)<+2-dpWMV4ZF+1q)C((Bof?;X:)oTo#"X&Hb6_AY`(crVPm`a<#pW0N[u>>,:Eo-7-kO(!mP
%+^#m'Y8*Bs(OHnF62MAjIB%D$_W"$lpK$CsUO^Dl*DJgMC64VV>jun2XBgl?li^p4oXac1N!'k?'T1J*HpkJhhrF%IMh$u#EmP9l
%'rU,Cq#hO1m="F'l=n\5/M^o3DF"j^hDk1g8@VBr4DqhVk0kf*IS'XibT_1PG#(08KXg2u,()2=kJoMO5b/?h`)R8WSqG2.fY(Vl
%+fT='5'QZ)04&BCFEd]kbY:_68^l"!:J@g2J.KC4;NPs287SCOo"3.;*k'&iip=Kb-pE>%a,cjqpq78_Ki:s3q1Q*i:R>*M]F,ld
%fg.o_aCogE?&nfRI)>#Ln@BjD2Dd)R)L1UF&-6e9K7i:/SCLX):E>PqMtTYO#'e;:VQu9$/uPT]o+<Z&mrKQ65`r2c_K&M1Ih_^(
%W_qA6oMBl`NYZ(ZH"DB\T83K3J1Ig!O5/,ZG4*C0'3-i%8)8]G#D&0e1T7!BaG=q95*+k=q65cDF1>e>G*[r\q2B"!=Ud,dP$"]3
%&'J1^cE8-4Ic!BgllXj>j2ikg;qsUP16%aCIprqA,?,j^X&SDP;\1%*`m-?uZV/JEjtSb[966;\8$IQh5*kKPH4%\&S3pb2O!pHZ
%ki^)3s2EK<\c><WB2d:[.'Cc"1-R1$Nd@KAOYb_mh8W]d^W#XcM!A/FM`B#FLj[<Gm(RD1]@H:p(*ZuYMJm+,VN?ln?%&TYbP@nZ
%0X"<*Lors(eitjgphA\,qI6iGE]ig6#?8Lk/lP-++6F;jEIjFY8nC^7-.<Hg`!nFBTOoc+6kia6HjG;l[hlbmjue-4;`0_`11Z0n
%'g&^Hfo-4_AJW_3gV$ou``ud=:GYg'6Vf#n'I/#<Aqki9hW;T@0aC]]Z-P"MK;$W9[Ck70V+.=p<Fd+Hb2Nm"JBobH6peZ2=`/f>
%[n-DIXW3a-BOVFB+3bVh+T6+DT8^A]F'XJb5OX>"(i+.l=7^^Xls0@:o0tGD1[&0&iYb!%5C;d(q!2^S4EA,fmFH3#<^4o0OrX->
%<i1F%A,:Mo(6!"J.+)\=e+$`'44T*_jW[E%QHTi0bB@7Hf.WlOJ5$&B<CDY,^\Q\J;I2\rqd0P5foZpJ:k(-QdKk>(0p1XP4#4kb
%'hf$uL>pYs?Z+b9.h3Hq]O2'jMQQ'J_Kilkg%TgB=:ebl;W#RgcoN^++KhZ8;=t_%bADte%.iu!AeCu6dPLC]_GR+T6YaTLoeDA)
%]_5u4YW^fJX:%;4Q+jP!D?UP^eh3$i<uIo,FJX$*A&VSQQb2Y]m"e>%coo_<NT="*6AUWAM;cC=XpFC]M$5f4II=[&"'101GX8/K
%CqlC9G63VmE]'@%U$M:RB>4_b%@'EY4h"MBGJF58ne@As"@Q^qITJ$D4!.E4Kf^ML8%(b;O\+cC1l#+)>".)n6G8ocs07AU8M\<t
%HQPIU.U0Dtdo#aM="P>O:kZj+rAfRCb3Mb2^32MoZ*DL>)HI51UQ5J)6mtWm$bA`>QZ\#A/.fl&:%;1scnFTd8"s@Md-.%'UA03o
%b;K7J9JqPB)RM?]!A:/%W*j^mf0lQh@>7eX"]L-'W7Yj*Q5u5T8[qOT5l:bq:h$XX\TQh`j3'DgPnNGnbK&5,m4hg5,5$$B8IcJ)
%1iRl962o+Tf=fN\<G$M)hpufuYa@f+UXer2G'CWj]n-#6mf[;Z<@`TVh^*lSY(O,$0]eb/on4J5,_s\*q"\RgEnJT`=k"%qZ?>`m
%JSuN#;:L%lMHDOq(eY$fG(KMSG6C3rKbZd1\`Uk0_63JH&pPhL)Zl<946WplAD#LH<*m%>HiC7aV'K`d!%PM>VdSDN7l^t;<<H7j
%$^3Rtot"o!_+::Kblrb8^%kE2[W/#sR_5Ba^/";.:q1uH_4XKP:@Ipi+*/jJ$S$I;<9948Vb9k2"FQe;"hO#VHu%?Ljf[Na"3'D?
%,@BnsJ=+fn1,[tJIdXf%(*\m/_gm9U:o)m[Gg]NFf#T/<1skgHVhEcO<"uNp0ikYF!Pm"C?!QX:1UD;-2*Tci`&4;NhBdsE69X$q
%Pb5EO1i%SJh7#!NU(k'PrX:"'c;Su#5p*>3Z@3O6rLt5-CNeSc2#EtH1^BqQIWoXIrC>h*lEn%3c[q>@*]Yo.hlMB5L%(AkBX=\\
%jg2s1=$H4YhV_>+d(3$Pn?Kr-M#Kqu]/<GD7-@8_mkOKg^A1%W50J"(pI_P+:k;,*e/`?-#(`dPWuBs&g(7<IU3ck!qmGCQ7urRa
%r<_W/%94$X="O-1BFsXVW-0[Ud#?`ep56l+b5>RIq$nfVL?,JrV*V94$,jVQR8`(qb!24#9=.ghh#7Jo:@qi65bBlNULW[A&LI=3
%2*'Xu2Okp5-tXB4j'<@;Md8JTPfU*V(X`+4;J2r+55^s@8M)$lCSu!Y&uo[mKNT#nrDRcX+cW7GL@@.C/;qr4C-PdN.bbu>Q;)ch
%gko5Z&u4K";SWp/I:C$!%rd'RZ_5Zt\T.lm<k]c%P[ehjYq+7TIj2G>@_/TW6+SrB]"XYcfjf$C:tX&,Q]19WK]I';dp7Y99'a+9
%DkkbR]*43="QK?8G!Rrh=PtVnO[,eJW0`O$'8h?Aa#`d[KU`\@<"U9#T-83b<)Qtuq$8a?hSA;l=,%1d(cEJ5Kr)WEPjhi7\,6L_
%&?<q3OUCG!=embTAS%-SR^E-b;<U_Dc_b#AQ'+Vei9+qn'*c[^$*`@3-%hsD!s5Wda=*MB-Zrs:*a:-+Xl@[WNtTbWaY2ql*o>/A
%;Se6dLres9cNIP:ZH%nZZmM-J*O"[G$Id'HTkD1GYgU1VRL&&5V;t&Ps%8-E>E0DLU!C\uB:hdg1\+\sH"f"X%^ptDfON-LhC@EG
%^>4_V(#M^pp:>!3SRm^E##>0;:#(nS9bkJ]G!4]3"<b]ZoNT:q-celJ-7uuX`qss:89ebm>/qgqV#Eg"]@-Er-(cukCai\.JHOBM
%IHB^OR'1IS.R)q,G"SsmE,Ai/r*BufQR6-*23jSUZKcn">'RN3(/$qn'S\[,UooK@Q!+>H9C3ZfEV04t'QJr5:At[/"OEODk_V>\
%b)!GR5X:Ru"V#E/HuMVRH((_nF28%>C9^=jPD%^mJ&.E^<C7-3eMXn]e7>(o+\966T]V2s$gW+=I`j>\cF#-,LH0fCp4WSMNCo&O
%pa,pV^*.Rofk<A8H;&'P4J2RPq&Q<\&D`pT88_lYM0a`i6eoK;Pm"5Hq'bX),&K,5qTjC@n92ZlD?U*VIG`.C$O$IIpVtN'p:"f(
%SO)PXJj-;EUm#1a-*#$8Wkp[O7pD_9LU-;Achhu>Cae'=&!U<;:mMVF5m:6726ncRE%42;DD!.ZO,05=KF[-@:CVj%H/?q;)10<"
%Z/mpCe.*uKXkGO3??^j-`@iL]^\MC'f$ru:H/V:C:63.+ED[kdlj;Bd_6sEn@d%`5."ii1DM+[jIu?KYhH?t"_b1!\aihBmor$db
%n]$]#3`U=7:8Ii8bQ)f!hbJ>+S\>XJiPL_Z6Rsh+YTA)?qWuq:[*]$UF\SBu@NY&OB-!&_aM:Ts?$cb9RsZH[<kf:QMph9X7`OlZ
%Pj(o=<7.WrWF9.%/nL8-C:2j$)@:e<$s54'K)aOnc0X_pc>#kTA^9jOA$]f*o@Y8`37'cXM%<XIDf&.1?1_4MP$R.Bkt!Q'lKN3_
%]A!uDM$-I]SFh>2h=j@B2p?1g>5#D65>RI`pnulKH183]FaH;/k(2.2g8q((Qh>[&qm&dJh<7%:c[/4T]Cn)c]6maQa,%@,7Ygtc
%SN)^dg#O6W,R;)]FRVh&2ZTQSAu-n>0]]?XhS-P]PSQd'Wm3N72Va3YO0l/b@YGM@Vdp9""9]1qV]AWk#DJLp<Z/%="JI-R3pS2Q
%RS+m(ro9K?c.if&jg*C^o;/*C?LQr^#.(sl7&u+<Gjt4UrDX`a+D%W`Og#pYZ`qh7<iJKfWe[%q013'DK""ZZd[q]BSksCUC![K1
%W00X*,PL&uU!"']Hq,.X3LE-hJj([XkYj1g0Bn*;:U$EmD,Etel;V12I)e]d8=?/L!Z7=jBo&b9(R\i/)9&&&J^C&GP-+I=Q0&T?
%?^7%W;CTq?gQl,0^7!o'k,F3A;u%q"D`:b(<FTN?%gFCtUeP.'Tb#5i".kX25S@mn5NYc;)Fg@F5<CArQ:NMc10b+U*>pn>0RauF
%]q,I;lN#?lK#7HpBe]6?$/$DUJnF6P%e@"*ou)u!)_B<k.0.@Q;"^<iIA]@SXnTq'b&ePPfdU[t;Krb9+];."@qoJjWn`CXf?IR^
%bfXV.?8<45q(/IaY7c1mk]TuU0=T^Y7Le;`%EL]+<H<I0VetCrAdi3t(;jKbEo"pCA<Ya`p@3J=[b+U,Ac+Y]L@RSIq7Mt&>jpQ4
%W=(a8cI,")E#DRBK-=(`%On^Acq-rZaA)3!Bq<_=iQdbn[m<`YWgJ"5s5!/uNY\ilb.ciMNflM9+K2Hc`0&H,$kB\BpfW4-DtUGM
%2W[+4*Fisrq2J=&fO7T2UqjQ/enOEUj4a/Nli$00qNqp/do5o)Q?*H`@0Ss8W3m`PFe0]8FgrAfI//_oXT-cW*'96Srbc?0'41a&
%)h[RJ^UdE5]Dqo&&(UOJ5"6e&*&93UW0&)\Um`*Jj?%K^IWa/;Zf3Jlk`*XKSaD[*C7(+9INbb,mhJ>j`ke-f1#I0:]>76O0(.[R
%ko2D)e#`5f4M->OW\%<Mk]o288PubWq^Z9HXdYJt\HIHZT=]i$f&C&>s*??0E1p:D300@AK0Vm@F13>)Utft=qo%`Le]hGY'fGfQ
%=Up2apSBYh=$%k9n;/C;fp.TZ-PI/Wi*i$1Rgofl/Bb97qUpu+kd!/.O[;n@bpECpD(ilC"s=7LV8$Y"J).N-qg8FSogn(>D5<33
%Igg*sS1p*pIa.lfR!*iE&;"k5I!/e]LBe0!'&RKi`6VbDrSsM7Z0KGEUP-\E)\P8#%m@==/iiY]OlOjhF]&PN#g^2S=%dPuNm*Ce
%o$3-DHo0(H_->H&r-PBMj:s"5eB2]M3E4(TV_rrNqs4=>V%gr&23fFXYF!Yk1'"(+<Mmjlji)4KpsG_:[r+V"k2S[VMqUcOc6i39
%?SI>V-92ddA<*'1j1Nm'B8$!O<R?+Pf9O*\GF1A_puqKa%A"rT4c9bJBpdEL-aIJBod<<kmG^_!d2Mp.S`Y8H%MFXI9s$J:$pK6@
%WB*3l"ajXh8XDt3rTEi#8&TrVVd',%I+0QZ&^sK?IiMb<!@u+(Di2ZSMqt8+'5ML]3KtnM%JR@-f`h*UH"1SgbGo1(3]09%W1J*,
%#]M,(I+($/T(UA2=eHk5$cs*7)q%esC83dD;u5aAlZp?0=$(-eNhRNS]kEGi"+>^H@m1F+MB%rF!kN5hY2<A?aP-rYhMj'^/Hqe>
%Z_&uZRKQeNgEq^<F*iUb\ESBai5`b\fVV*HQ[RQ`FggK`:!1gtq+oi',Yl_12"($VIPO5ZinM7YIlN%o\^QuK(5<C?Ksb9oO2cT,
%_shdtMYH2+ff^[#)Q[=IntYgE6q4:ilf'h2l<"]<"jO]:SViY+Vk7hPordN'4>$8UI!1t00IRG"o;beLmE!U3f&I/Q*oXMb7p]tE
%WI6WZWic=p\I2kOn2"cjr-Yh.$(A@UT,ZSV;6p6cL?aj69CBlF%aarQWYBK!s2NJ4r+I#fnr-*m\#:n=r:B8%bI680rL^h"ft&5X
%X-Kkq68ialG(*?ehIi(!h.M@K93@pt(Chh^:?SoWk&'Pu;k+q\QO%?I#N5QV!)4Ifo)gh37J5k3^Fgr:q<YP9Htq5s0GIG?>(1"t
%Js^(fdkq6@T_*pcFhdh[";;7RL74Z1L,Km7DsfOtYma%RQkh>SO+51Or?iM/;1M/tIfW/AJU&E96,*=YUM61fV7kB'ItaK$@q(hQ
%cW=aiIuUP#+gmIR8cl:>h=12'69P,2ld8U\-NZ`.BDT`9B_"4&pP,N]BJYEJC2&'=X9E$9O<R'#3uM5]#SpG"QKdS`d+J=+6?'M#
%^Zo^PS.>?%g]KssG1X.(Yksc!AohPU6LfM]FX;?:@fLW68Y6@XFn^0re'o(sG*KG2P@@,.8YJrVo/qHGn9h-tLZ=S#mjE%WiYWg#
%d0*C65AT_[OYgXJIgu?<O-PHo5K]#&V,;2UL%^Dg(MKA'5N74;laE$KFm>@nl"@EtkS`Y.!#Y!5T+&,iBS,^+MI&9Y0G'R'%OBUu
%T`4+#?)!bgs/]e60[mB[m]j&n7.-D#5#iqD!.K*ZDjGk_iPd<]Z]78@4@\08m*4<]eeAYfq1_JikS[Md*CZd:+AVnam8GYCM[R93
%!=87U"g@]@F)a/9bhP.l>;,8&L%o1Qg@aKXfKi*:*:shn;[;'mgE\nRh;Zk[CUK>!iGtA2"8j<jDq=+"(s(e>llLi*&rXYukXZ]h
%jjc4A@2,OW?V3mi?FH:*T*'d?gQo1sUOV_>\P!<!+#C1uk8P3p*:`AgAQEF%kF8SVJ1IU!W+U=4GFf&5YP"-Wi7YY=U&&?Wi8Q`M
%3FGj;SLWS7]a_2a6:Bo-_0E6JG=cgC-(WP-g>"E!,_!KPJAu9/)*F/sm$qGV[J6[5k`6r_"hsdfF875A^'P(WYse?R)>U_Wc[Lo6
%V%Bb+)R-$cF^e=24a6SdhoXFf3IJCGSOqh??0.]l4SsPlBU=p@/5=SoX.eM+AZpEO)LAR_llDtY05M+W3JB,OE`G5A[s*QZ+heB0
%OrWMU%O%O<"-B`Bqns'N_LFFZ!Jipoe[8D.]T[H[4_Q9ha>SU?OtB[g)X<OqWE#,!1Bi`f`3ZikQJaK"b!Qb2?A"a@jYBj1KXf\c
%N5/L%#pV5KMMp"Ja[7);Pa"=BZrpt#)lPE^9T)jV0@3/\F=At;<Lt"E;3p\sD8)_E;<tn<OjM:ul\-_/J#Ja!]4]ld@;qcj%hnOi
%i_p+e/UrSr.+'H=%W1n6La74OP,;@=N7#k?cQ_Lf-:VrC]8_&MfINKV.2k@J!GtZAW^=qn34hMbk&6>TatT8W9A/&Yk=V&M1h"Z"
%VlM8*QD"2?!.Opof$:9($&]:"K-gAI..nK%lOs4U61+m']!.:u>Wq%*W!9feUR(W7n1T@;$"-6'AO\>].C,Am%IQO]rg51F,dgl1
%Bn8r.#3K1>`H#DuBr&3bS:]SA2BQl1o/dIF-U*G2Ore@c2-bZg7!\o7PAnB4(iB\BY]'/t^j/7824EY<=7ZrpCiFjXNKD(Hp/qtt
%1U@[0lBLY"T.ODAP3-I?L`o.<RJ(;'>s4:)WEQAh\GPN'/Pn_iK)H,N<,\^oDbK?]SEe'lRK>S18+.J%=:4GH:JQQK=P>"6'oXul
%HmutVQo'ZL3I:V-O=tsIgYP2>/bmfirFHn.V[[0R//ACZ_gp&::Q6[$CN/MY4/Gt^P^4OPBJ%K[$DWheG\KY6Y'3^32f1k'85IBd
%qTnrr%DaXt/5'rUn>-Wk'/UuW.>*D=IPS:U*]9QU'H>fQ/c/pZjLSos:c'6o;(U>Aa0CTSdpA_YgXDZ0ie&eZ)Ojq2UDl?A'j2e/
%E15*SnaDK;muX&`H`r%1/^$:bL`B=-m^)fL[CG+_UH8A)_5,9`rBm,c2?0U89)B*)[7?=recI9=nK'"g(Zu#jklT?0<^233D_jj#
%S0S];*q@tXZ]Js>ih0F/$82o(KM)68p:3R&]H8F=NqpcAJM]2gG,cD=1noQ*7(Y7^9'Xh/_MjlhG1K^cE7hFt79=u:_:55AX0PLI
%?p).@6[./jp2AS8JlP`gk=H3-*E$J*lNr$3dH?AS/:,rlYrMV)>n,baR0leH,L=It94-dXACi,"TJ:tR`uPEm#!HCW!PqTG.Fu3U
%"A]n-iV.JmmC"jUUWLR5_oVepY"`kNr@HB,/mBHOa1EWnO)X`KoUAo+/4CM>Oie"jBap:_oor7,!N[<H>=mQ-9T=S$O`-c+Gjs$P
%E",J)-JkU][&j7Y,3X2p%%qp3QUa;m+tH'In/;Qr)jWN9=EijBNp%L]b['-EAX/p'[V?,'`4TmL@L2j=Kt,#UF<og"e;@>Q"KK%D
%g":0n49U6#,]!HfL,bUNQ6CYJ!i>D]1<NCCrS!R_S9N<apCEtF/X$'9e>1>`iT"^8SuqdN..8XGI;H(DJRf`h,KC14)VV*HE*,Fh
%kibG7)u[S7ANW+rjPZ\hNhM?:`G8KS]a&,,@jH/q-+VLe+&?aR]2ZAS^1jA#ZGT4/TC'T-54;VfX$jGF]+?RjC6`IW/kl*U7W(Ff
%J<G::Li)h$Mqf@_Q9F4G?q"*AD^"#R2&=QFjf.GU`bU.@\m%Aqa(X!S=/2f$kAhuk6o$ogIPbhFA+UN\F:#5HjKf]j"?A(*qfB4A
%r`mj']RnsM:FR,!ESM3e$le0%=2^jEgljYhLg,L(bb)9KFLanYi:bgrr9;=>7!rZn_QTOBOAQ<nNP"jhiaW[6lh1*>(#1\C*3i+;
%dA*Q0g,i=io#hj>$L2(K=;!4)Oj]8_VU4A&rNVhZ;7U>UOp&2j=rm8`!#I?G[l\fhb`u42G(TfLhWs:5s3WJ=2TNam!][(AG+KN%
%V[t<Yc!19D_=,Q;oeol]Lt%]BoQ*r.s,N3_+;nXmAfUKB1L5D/TVJF[p>)#S?nn"/^5>U;&^,SpJRCW4I>23']g,Z5?pc*F#Wdp#
%;0+&Nb*;NhUD^dS>'4R`*mR9.V#gnd*\\$`4cpeTUTL7[X3h+1*#+-Ak^9hEH9Rs/L`u7[l4+/=.>?FGMVLZNPt0"a&pqs)V.M^X
%l31TUJeXiuW^mhCD0rsX?*:5):E%*p2G49^4c_?rjMpU4r9,OmpfS=D^'`Sl_,"U;(tp7%pJi<s/JEK6RM2C%dSI[gEj/G!0RXr6
%0!64Nm0'c-UMDUEO[jBFEZr4&WF]!j\U#j[&L=5Br<R^do@@NuqnBA-38bCgH-(-t%DSN-oZD>G\F2g9KI$'og_k*YG./sXr.m`%
%*RNUTq&`-b>PKR#TP2^&K`qju3Nj6l4-dVSR!TJ./rpS$cq\l$;n5e<\n!-(;X01RE^V8m?+iYg)umAI=[Rm,5;q'XOe7_O^72q+
%>fS2tN*4W)5?,r4&&R-3NP3:]O4XcD,>ppnqT"[]qX0hH;iLMXqe?5pbBj:HTCDf@No0@.F_W+%%,iFo:5Jq4(a!OY)*04nSGOq6
%;_c*?U"dDWm,"QuEO,mgCi+l@YUqEc_nD\*i+AMgL^]p%mSl,P!$9?EB-f%^o7Xro'M/nk$S(rZF`1WmbmW>Y8Rf/1jp=H>K-e@2
%bGbN(G(reM*F"*X]\H,UcHdT8!)b"M6A:,ehIc#@X:cXbo\9eIm]llR$&s!@/?pYXL=0FG7[DEmKIG/L_r>6FpmQ([MlO'IRK7nM
%D2V\J8ng;uWbkM`l\1sqFWJX%",.Qn2ab%`@UO6N'r!bTi\EjOV%NdZL7`a&=-4ZIBA#gbC5Vrh1b.0WcqB4gdLl9Xmf^^cD4[R#
%>6]_0";eC7=Dmk7%8+>I6-I!ma"L?="^u>=oS.1:!`VlL0mDD_.@H9_m:PoA*L%`PDh]T%U7`)[R3B6sL#Sl%:j%MHJT]1).&jF.
%V`si1`o]g3LI,'A#ZQDRBLa$A$L`mOKjlEcc_Ncrf#BV&<o/Yc6[.g".^(SMlm()7<(LmAo2UlSadap%`5e-erGK+;QkS;(F9run
%/h&%WAp2KTD,oSE"VDYhTW(cV.-6?>g!%PUe/VMX^;$05.#ST6XcX']P*aIp(I4N/J3feK"MeaBrbu8Ho$+K#19IienO+UpKMcZ1
%a1rZojhAadcYg#3KtnBK&;i#9VQ+7XP`>gH`0`kOq'[Pp!!J9JB`VqEmLW5-icmTP3Q3iV5aoCIeSMTPWXID@%tS(\LS>""31h!+
%RmfSOVd:M=23"@6-3@'*Za,<:;<S3NJQ(f<Hcgk0>G@:WE097+ji)Gdf't+s/ijN.$L4iPbd2WZDHfJ7Z*++c>+PWYKkrV5iLM1>
%N(__-<@+agP+FG]2)/RIZ[`pN.iLd=rIU`/Wa@Q#8<5#"]:GPtW_,9ql\ZJ=#OO:B'[3,(!;\\P^#GWW!s!"3.8X/e8i*8-kum%j
%;38Ml\UlB2Qc<'H;;Qb]9GnJ=aK'PrZr&:<AHHT3#6s#I-eO1.[a]]^WQ)bICX_Fq'O"4PA$#RnEi4]J%)uu\phkmD`,gI\m@=$S
%l1]LQ'S;,jIFiMM?q0>3HK@7(4MuO$Jok;`5ZrOo5V]"D.]=/NK;@:]lsK2?\jOuEMS2Di:J481*j%M*eLdE:,5P(EUL+Cs!jR&P
%?@94Ifsn5AH'1j*;%`l(K)p!@6Y+=DTMYjbGpfq,?Q*nbr9Os7_X`_NrH<1ekomu+/'[d3l@Z.^b%)TOG2CX!7?p&MHZ3P+`1-aR
%D*LLW/]AoB:#+<YKZSE%[3+;]BmQ:#lFpW;SHiummf>)4d"RT`]e!t-,b5ga^p`a\75Im>T'Q1R4p@OY2?OCrs"Gmt)\9?%\l(ne
%"@S6Y,Gn*#WR22#(Vj%3Z3FOd&qdSBZKWPo66VpL5F.2B73g=LA%edNUIOt%rP#sFp?1165$?"[C%fDq>h+:bZ;2_ckV=9B:AV>j
%gcXhQTTZP5g[&e?/kjq-a+`s6QE*!QgB;0YoC(gn39$"7F`qO]lG#,GRF!QFoPpJ_kC%r#96U[b'p[V"7cRps(>a?md="5JicG!p
%U;5B?J6fZQo%p!g[P$aj%:`GnRr@J9W.(Z=XK9Vnr#6s$A`N[Z"Gl>",e=*9BQm)I>>=_]G7h[d]XrO)<kNhRi+fTrZH;c^D,nXa
%DaVGHF[oo?oi`IkP_C6amj4_&q+Ctq^Y72AUDGD`ROc,?<Hkm5l2TmX1CFGu:t&BJIOgM1@gV4FS*"P5qc,bf5CS4pqcjM`'b3AU
%So[3?<=3;G@q,OX$k:YDj"1<1cI_0OgeZ]Pq5E;K2U)hLTieSM4:p;bEDK%mQn;?-pr'i5YB][`65$Rhs+#66.mq+rI"I`6l"&p%
%fX+E?ICWm7^^1tS&;HWF5=5MqKL9s7/@5sG%ihhjn@;-ffU$iqOX@gemc6JBGiuT`>Li$CgFr[HG\/OnA)fk>"*M[Z'i;@o>,f3S
%eS].oR`>#qDWfSf-GARX)tehcXJ-P)iT2htl$olps3_(5XH2(d>*eet4.X\bZ$+_(T<+8EQd%LX+4ruF7mk\rg$NtV+5\WHHIju3
%[s?l4DWP.[.s+[Y$>uX]l60/?\M93T\b@m8f;PM..5:um7%8Ve5mlliD=!YU:mYlRe=KK_\JVf;gbODR%I[(=*/89r0sjn:iNqek
%qR062Eg9MC-4B9\=V"W$6MJt2Nm(a7<.XJFc=S5i84c!$a8-)Dgs;GM;R2oXCLF!9ZQgOFo0ul)A=jMCb!^Gih:slqa0k:F-%pWY
%ocJUf<"=\i22L4EE]CmufYC]f`qUhkX&MJ)]eh;T&OtWd,oQqodj)fI:aG_i.XF@)XR7^oh1l$5Bp2rLT_57\::JWE2qg%I8EkB"
%^@,7FEX'0BdaUN/."5E^qdYh&-o/'*FM-Q_N-,AEd/]SNc1urD+:YPYn^D6SANFsnRK9*%$rqe\$VGVHTuYLVbOR`/`5@Ps7^i`N
%L1sUL:TRG3*B@><9:5^"WjBRY-6-^.>D'MlK61+1hBh%-SoF=h9hX`ZZ#*2i(\26Ea[j0YI?\UK`Kp(%>?r$Y#4&P\L-OS^*s^hi
%ZsetC55h)#q#kh4_hW)l0N`1>J35cl"l>!g2MX8H1<F)b>_1q1>=eNT"m$'u!b%,8QOugt-k+TbK`^n;PYIe6=QD=EP\'J?`/:Be
%+%bJmiS6#E*]Bc@B`bmpQ2bop2Ea?a*'A>'p:[&_pr]IqF$ON1ZFXXm1^=)ZW+u%+%8Z8N*#mlEo33Y%+2fS`QT,sL5J#fq%A=fD
%)D[.fB"1TG/NAG?nQINRa[8ocd0>WP!&rX9.OYP/.0dd'(C`Vk>Cm<B#P8l\l[EUDkd5>D[M>;ZQ/K\;/VXYOVGR\!EHD8b*K$`W
%d94BYr=KhFg%SQ$"0`p5El&h<RFn%+qY0f5G%t\qpq-^&kV,.L[BdQ>-^;A%'V)*hkT\Mg@\]R4QGS3$T]GrY/iBC:IiPJ-L>;4Y
%0HZ=tV5s=\!>Xa\7$L4U5B-?&VOs\?9?SW"(e&(ue5j8l_c&YHm::i#D<dnMi2"Zb^gIJq@Y-d??ogT/+L"&!!#HTMToFo#O4397
%T0b]"W!6=fZ5sXkb=U6eLK:Ot#TJ&+?Cr=.!NQHWaKp#;hA&]js8R@iA_CLf$.`cir4iL9Xq-?">IBAJp?^*B//R9BoXk2qIBF56
%52j>DMbdUl+4&9@i_+]K#ogTa0*kgRmsb2J/69,i\KJd*20pqAeq/;4SYa+")59(V\U4_`gR5%eO.<kg@t]d2)'1*V6g/L*L@S,q
%BoFH(PUuDggj<-2=6+IrQLX\+3<;qD$,jL;Cr(6Z`=@%BJ9#@Np,%=bD`XiAT)&<.s(DA"?GjmA7739$phG\JgLVA!RU5<j_+kT#
%Vn%B_f'E2hdH=U<boP]8<ZGl)1SflR\j`EH&7&Orn24c%[`,18KG`lo^o;.mTfj!%,LGj:D6uFiCE,O;5.\]=81Tgsg&_a9Dbs^@
%aKW(.'1U\M,]Ba.6Z@upRjTZoF;%^%Fn@nSq2aO[Q@[s$VhIu[G1'CA*Aru.<A)tXD'q%mgI,"U_=)YH8$-fiA_V#YDa/Z#>`C*8
%Z1-.ZbX6VOO+6oW^Kd$Q4WK-Wk.!2\pBc3GTIXLV1DOn<o0L(5\h<T#&O[`9i2N2sqn%G85E55CVMlmR6Oh(sIqB8@*;Ee3acP)V
%I.A&npnT[a[XK9#e-43GBS[ZMqYalT?SKPe"LeO_[tMeC84N)EC`h0K1[MU#_]3g0I?m^<FWt!$bfL1M$.2udJW@fc;0SgX],FBH
%'?6^%).9@08p@,U`O>=t\A+Hk3]R5?*p8SjA5@?!X,L*,<0<(6!t[A]6(j=l)B@p`'[kE_^mjQhn)V$aJ;u1?J=1Vo=1O`V"A)71
%glN$`1*rfN<mo-%DUMVnItsNhq3p31Gm\:Sa^1k(mhniO6[r3d8\SUser/dH@ggI3pLSa*j9]F4UCs#<gdG:nSdau!>U)c^J5:sG
%]@:gM;V-p3_:HidQjtf1f`XUKe9-nEMuR8-m*&HS0A?,n[ZFLieQ2=0@U+VNm(Eo"p'=_)8b&U^_4;S-LaXRqr#sm-"(7;.X4HEI
%`g/Qchf'iD3[_,:[PVii&FU::-Q4;oW?E'4CU0k\:%9IR9e"tKmcctC0\<^[$VGs$\g@-"<(kMKbJ*D&66@&;TJ_]ZXA_sX'QPT5
%Wq=)[N^!</dY]u,o%C7hBP4^^!(5qm/d!\p5%S`ShlY7-Ym`m%@kXNJ,9OTI1_B+_\joF'<j/OSOQHb>qS\g$8E(6'$R1Ztn@7_k
%U:QC$RPU(,.e]Mp89iI*D<CWW6B9un[9U?*.:F0\8fsQ=Ia@3m`]'+-$U_Gskd1?(FHX-S:i'RQGLQ2;mD(E-]RiaNLb?/3/13gd
%'JKi,>==9EYAO['Na@E.8=u,\3NH/]*>,%mH6Um<.f`A!Fk)m4Ji(Dj3>@6,Xo$k7Z8[`'\&LTSI20Bj28SDb$\#33J2u`O:sIAG
%`SoQ(-%cCJh`L?LiN$6TjV!6C*6DC@_^Sm+"4JJE)(5NF#j`Q=U<lhg&HstD'$tK6n,'SKCNSfn@diN<65[\]V+E0PnC:2W6!j>p
%B^S9r<mtufa&Idc22a\8[1uO&"\CuIV\MV@.kSN*3/<2LB<[A[`WEQ=3mpk*0Q5#>#DHQ>@99"1hM(>U&cl5bhE!i'blVSe7Fq#V
%+d"@f;/]JWBap6%:5MJI+I`FT`YFfJ<=t>rZ]N^REc!-8gr^U_Ja=GNk-h]#;F;P>8eOpji5kTWSn7XYK6[)tSs1n,mmK3o?-*^o
%K_Y<e8V,QrRn?JOJuh`dpLA!Xf'93j]ReSN]+s>tX^X8qH)A7k$su(F$Ld^f0uKfj[Y=;Hl;6;4'e@)fm_JMC`1!Y]4kW;[^0]<f
%O:o<dk^7P!c*s:eo?E#8#f$Y]!G<9Rb%i:)0<=f7ak*KTmd+Z#V)3!R%GX`g>G)CsdsB3fhrim-i)\C2!_H';;Rg8kPJaC')Ndk=
%RJ*N4\PZtW5W0!!G7-A6iN-sQ#i8H<;Mct_DHj3;MA8*]GdHf?;fqYs$V?S8*E%_*fIBHP"T+TV3cf\LQ"p-XZ+P:5p2W]L_Lf1O
%N&8d%_4g!_mFVmr=d3YMhLB8`W1.+9ZTA4F<K@7Ko]Ukrj:<1ielK3-P)6$p6LfFu9D'&p8Ee$c*0@Hj?%UDI'11U>MhG)'!q9If
%++u;=+3W.\H+:r_,<.2SR"!eK,21JObIaE)#$lVm9:J_RHlIsgg(cr"AS5SX=Bd<%T'UPs6K,8s#`%Z%R*cNS2lia!PoG@jRg-gM
%`.-W+0<j,KTH"9X?m3l7ZDGFC`Bsf?\7ZO9<RG:>(<@j*N(oY4b=\i3KW4Dk&;"i*'T.n%Z1=(p?k=s"T+j`AFA&@H"SDDbRG6R]
%G$L_D??&YCn6Qg`G)bj]fO1S"WLtju*_oDpX4Bc?$<1(1IL$VVois'3>tNLY(hcRLZjq7ZCQ7G_!S953?$:oX8,KHS!]+VrEZ'`V
%[Cgf,Vc;+Y^-'G@Y:FLe!l\AkW7\o*1ubTO,QAkL*.-._"m*\dkXNK3C=lShq3Ek:O#71EFXr[7Ok:EV!20-ZmVrt$65BM3P6c&>
%jeML7/Wm@dJJB9o`J6bm"WHAYn_)$Z/ddLLKS?25M3fXQ!g>[^_5)0s:"p(TD'?f%:aNd=G@ljPiMrZY.89\N<:cM0'PA`7IBI[u
%VXL3aq;M\NI=(&P#U=&$1qH#-GSp1?^;r*:]%+2T<H8=8r;`rPYbMTL&pXjk0JDKB]sqD<`I*NO5RMPuM"Y@GB68M)GV$J]O*-FP
%6+lkSeeC1S$%NcTX_&F*+qs>#W2p0"p?JcnT=d>;KE2b[].aoSM2[,[Ni(m*V&"35G?;\5,-"U!O+`MPS19dkdl`_2T_E#Q.pOp+
%_FaL?S]3X1K<h6kYc]ou4e<Su9NfnF.IDE`^6L%Qg-Z[`dK@_@.\aR()Xn!BrTH8</5W0^$`9cGj..1G$J<mba!q"96=XamL9_*-
%ogF]@bf^EY=T1&L7sIc@)23c<2lPSKE^:bN.gL\iU^#LNma-a)]]II/lD'SdRq5m?m,W,/1c>YD4?ogDkna@<CJsPn2Z8;@UB*r8
%<%Nf-%N-JF(_r2IAO1$MpMEa?"'uqDO-up#AcHdkJ6^MYD+DahW6`ltJ*<+dnu`PNS(VRK8LP!e/>Al>8)dA=P6bildd\034;R&n
%D.DmOl3L9ZZu<DtIAf-hk?S5YX/H?k_u3PU&H0T3I'J?+WtQuo;RL2BE:d,H?.t0/LD1.ho(LbV9sS?R:I<*f%qfW+<ZGDY-T..G
%!o^d,%H)!NMe?^kYE"DVNsti$[/-_!eOS4D/[<-k^!:CB$T[d@BMZJ^JNru?4U$!f2p(Y&&@!S=)Gg1g%`qi%N23!M=lK"BRdjG;
%:;&]F[6+ne1/^g\_#gT0?FA"H=eY^l)bP;*.algu]]5_!-O^rOdtN+D^-QL!?A[?[osSS!<%[%B]EERP3RmQZ,%VJg;aeCOWt)Du
%Db5JTItGWX3V+72-9Yk-:B)cf--\XoSa:"H,j,-'lLEAZNoVp:M.c025/YH;"h7^(=cNqY*sb2k4in2_F[E*\3)O;JYTeat$o.DJ
%U:M5DUb_M5kK__E'Hg9BSo9hOWjED=:Xa=]MWM?l5LTr9mb1TpBMG>^PT0n;R[Dhcgd7T"Y9-q^_c+7l..g:g4F=X#YGXSJf$GdX
%Qh.dECtY^D-!B>NZI;+js,8*.>BAVYqi9Q.-$qfWYf/;*3,WNuLA16V@k72>&o$f5Xe^6Bk7)i;A$&Fs33f.nY^IIZ)(egqk:9Y$
%&I+*7(9X*n//sTMcjdCRY'Q[<=ZO:o/S9q]"a?o^5/U5,NN8^u-aa9adY(nI`gpi].KSM,_:V;$Da"1OdP2X(fUdWTQ3r;Q%`iF?
%B^nG]Irg19]nAf`V`lWj1Z8>=ZH4U'Fn0Nu(TBK9VmOch"O8<r\+m&*B+Ls=T)3e+NOMkn%7Vag;,Fu\pga!eJ6^1/$.Bgtp:4\K
%7$*IO440[\HI$([$nPdre)j96W*kUIG4H(aM)[%,PifDg`DM,l2M#I*IF@PR/?(&i#&O7Ki>j^c@@O!95O1e^^,oTP!>Xf3kpbCn
%[+@4ahJqZ52E%8IfnO]c\#D<iR(\p6(u]lrP4U-_8K4do%Rublq1A3X/H^1`=UVYB[d=WkI-GA<"l'"oI\M.U?&PGI+2<aGLS\-k
%kaPX80E$Cl^O3blK=\uep*qinmkoo?M1^<cRUt7"dW'q$\0FOR4-D/JZ1`Va#Sk*gAt\Blc+m>/dS<i(K8AbO8Fb+?%9j^\5#:5%
%$iRJDY'B?XrYs8oV4L%]/cg8s1d;=Eks/OSF#u);N%gt>+_Ni1JdC4=U8XjaUgbgT^II9PK65rF10@&3Z.uO*\NE2Cb>Gh81/rf#
%k'F)U9Ci[tog]E[:)+Ku0NBEGq)ja._2m=D@kLL9FfJ-]aNbC8KG&`2hpm";&;kBbpq[kSV50`40:24P]qWX#fN9Q#s3BO&WUfl3
%;RPb1M`4$U2c0!T#0/[DGjo^t;FBHccQ>&q.A+AM^.Ue>UK'RFfs]2nI$C!<'-P$VVT8NP*sMHA1:epbb#rng1&\WmRN\d2T.[Ua
%7jQ@#XVp>E@Nu6Gl:$F(5`)!$0KZ9&TOI$<9IYt`*\ci^!FoBdY4ttAMPE11A4lA_U-(W)4'ie&VT*;>pSkiu23R-WmDfjX4]'G>
%G2,E5M/D@p=4:mki1q9?;092hH6RKi0EALIcG6B;;G&'[-"LM`e?N0).9sm[CZLB&'8=ba@Z++iDoN.ARY%MCQJ*O!cX^o<TWRG*
%V+<>hZD&#]qHHq02!keO7X?$LW%B0e&h8]*`?i/`9\Nu\?rb/SJp(3cL43hc5)]@/5WEDtg:e<s]?4q(aeTU?XrYY&!fHk*3c$DG
%aN6@,4qoOlWPYSBbG;-lCZ,,m;DGoFc[3$c\8#]C$NQr!%6/+!D#^ZKdYE7:iCHR.4<Eb2IT!7XbNR2J_66JH8tNl#!9"jNjgb?[
%-)1">7ri3NCP(K<:doC.=j.q^b#OCFhq`4+^I?X[qW=!Qnd];Pha(ld_H\>-(G](V61BY*['u%i5(?%M-2AS"2hld1omSFX]>W$Z
%>0U6)WIoq@>376fYh7?k@Qaa][@3T)EcooF8-o]Ro'H4b:;HE2q8-u>0I8;S8nY3>k$NMp:D`Wg^NYr29IF1Nj;KeT^=+N5E<`1;
%Gh1W;DnF;K"-UqRqm\tXfj^$N_(bo&MtuTIJ'[=c:<#Nr4ST3mhpJg)(q!lEdoZMrJ*RaWS0.d]J,SClri^hK2uiC)rU&M?h1,;d
%N;r90r6t]F%tFG*s84Obr:1a#]Dq+ks7kdWq-X-nJ,Wf)rg1CuRt(@f5Q-p5s7k&-rR4"2k<Jq.5QBW5J,8\rs75?&rQkNA07Wuk
%YQ)X-s$)J3Ts#")h;A0ds7*l(gV<Ra!!0d$%0~>
%AI9_PrivateDataEnd
